{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "improved-cnft-manager",
  "type": "registry:block",
  "title": "Improved CNFT Manager",
  "description": "A comprehensive compressed NFT management platform with multiple features and tabs.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-bubblegum",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "tabs"
  ],
  "files": [
    {
      "path": "components/ui/murphy/improved-cnft-manager.tsx",
      "content": "'use client';\r\n\r\n// React v√† hooks\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Solana\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/components/ui/tabs\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertTitle\r\n} from \"@/components/ui/alert\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\n// Icons and notifications\r\nimport { toast } from \"sonner\";\r\nimport {\r\n  Loader2,\r\n  ExternalLink,\r\n  Search,\r\n  TreePine,\r\n  Plus,\r\n  Settings,\r\n  Eye,\r\n  Copy,\r\n  RefreshCw,\r\n  Trash2,\r\n  Edit,\r\n  Send,\r\n  Info,\r\n  CheckCircle,\r\n  X,\r\n  ArrowUpDown,\r\n  AlertTriangle\r\n} from \"lucide-react\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Import Metaplex libraries for Compressed NFTs\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport { mplBubblegum, mintToCollectionV1, createTree } from '@metaplex-foundation/mpl-bubblegum';\r\nimport { mplTokenMetadata, createNft } from '@metaplex-foundation/mpl-token-metadata';\r\nimport {\r\n  generateSigner,\r\n  publicKey as umiPublicKey,\r\n  percentAmount,\r\n} from '@metaplex-foundation/umi';\r\n\r\n// Types\r\ninterface CompressedNFT {\r\n  id: string;\r\n  name: string;\r\n  image?: string;\r\n  description?: string;\r\n  merkleTree: string;\r\n  leafIndex: number;\r\n  owner: string;\r\n  collection?: string;\r\n  creators?: Array<{\r\n    address: string;\r\n    verified: boolean;\r\n    share: number;\r\n  }>;\r\n  attributes?: Array<{\r\n    trait_type: string;\r\n    value: string | number;\r\n  }>;\r\n  uri: string;\r\n  compressed: boolean;\r\n}\r\n\r\ninterface MerkleTreeInfo {\r\n  address: string;\r\n  maxDepth: number;\r\n  maxBufferSize: number;\r\n  canopyDepth: number;\r\n  authority: string;\r\n  creationSlot: number;\r\n  totalMinted: number;\r\n  totalCapacity: number;\r\n}\r\n\r\ninterface CNFTCollection {\r\n  mint: string;\r\n  name: string;\r\n  symbol: string;\r\n  description?: string;\r\n  image?: string;\r\n  totalItems: number;\r\n  merkleTree: string;\r\n}\r\n\r\ntype ActiveTab = 'view' | 'mint' | 'manage' | 'trees' | 'collections';\r\n\r\n// Form types\r\ntype ViewCNFTFormValues = {\r\n  searchType: 'assetId' | 'treeAndLeaf' | 'owner';\r\n  assetId: string;\r\n  treeAddress: string;\r\n  leafIndex: number;\r\n  ownerAddress: string;\r\n};\r\n\r\ntype MintCNFTFormValues = {\r\n  name: string;\r\n  symbol: string;\r\n  uri: string;\r\n  description: string;\r\n  merkleTree: string;\r\n  collection: string;\r\n  useExistingCollection: boolean;\r\n  attributes: Array<{\r\n    trait_type: string;\r\n    value: string;\r\n  }>;\r\n};\r\n\r\ntype ManageTreeFormValues = {\r\n  maxDepth: number;\r\n  maxBufferSize: number;\r\n  canopyDepth: number;\r\n};\r\n\r\n// Custom resolver for view form\r\nconst viewFormResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  if (data.searchType === 'assetId') {\r\n    if (!data.assetId || data.assetId.trim().length === 0) {\r\n      errors.assetId = {\r\n        type: \"required\",\r\n        message: \"Asset ID is required\",\r\n      };\r\n    } else {\r\n      try {\r\n        new PublicKey(data.assetId);\r\n      } catch (e) {\r\n        errors.assetId = {\r\n          type: \"pattern\",\r\n          message: \"Invalid Asset ID format\",\r\n        };\r\n      }\r\n    }\r\n  } else if (data.searchType === 'treeAndLeaf') {\r\n    if (!data.treeAddress || data.treeAddress.trim().length === 0) {\r\n      errors.treeAddress = {\r\n        type: \"required\",\r\n        message: \"Tree address is required\",\r\n      };\r\n    } else {\r\n      try {\r\n        new PublicKey(data.treeAddress);\r\n      } catch (e) {\r\n        errors.treeAddress = {\r\n          type: \"pattern\",\r\n          message: \"Invalid tree address format\",\r\n        };\r\n      }\r\n    }\r\n\r\n    if (data.leafIndex === undefined || data.leafIndex < 0) {\r\n      errors.leafIndex = {\r\n        type: \"min\",\r\n        message: \"Leaf index must be 0 or greater\",\r\n      };\r\n    }\r\n  } else if (data.searchType === 'owner') {\r\n    if (!data.ownerAddress || data.ownerAddress.trim().length === 0) {\r\n      errors.ownerAddress = {\r\n        type: \"required\",\r\n        message: \"Owner address is required\",\r\n      };\r\n    } else {\r\n      try {\r\n        new PublicKey(data.ownerAddress);\r\n      } catch (e) {\r\n        errors.ownerAddress = {\r\n          type: \"pattern\",\r\n          message: \"Invalid owner address format\",\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\n// Custom resolver for mint form\r\nconst mintFormResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  if (!data.name || data.name.trim().length === 0) {\r\n    errors.name = {\r\n      type: \"required\",\r\n      message: \"Name is required\",\r\n    };\r\n  }\r\n\r\n  if (!data.symbol || data.symbol.trim().length === 0) {\r\n    errors.symbol = {\r\n      type: \"required\",\r\n      message: \"Symbol is required\",\r\n    };\r\n  }\r\n\r\n  if (!data.uri || data.uri.trim().length === 0) {\r\n    errors.uri = {\r\n      type: \"required\",\r\n      message: \"Metadata URI is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new URL(data.uri);\r\n    } catch (e) {\r\n      errors.uri = {\r\n        type: \"pattern\",\r\n        message: \"Invalid URI format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  if (!data.merkleTree || data.merkleTree.trim().length === 0) {\r\n    errors.merkleTree = {\r\n      type: \"required\",\r\n      message: \"Merkle Tree address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.merkleTree);\r\n    } catch (e) {\r\n      errors.merkleTree = {\r\n        type: \"pattern\",\r\n        message: \"Invalid merkle tree address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  if (data.useExistingCollection && (!data.collection || data.collection.trim().length === 0)) {\r\n    errors.collection = {\r\n      type: \"required\",\r\n      message: \"Collection address is required when using existing collection\",\r\n    };\r\n  } else if (data.collection && data.collection.trim().length > 0) {\r\n    try {\r\n      new PublicKey(data.collection);\r\n    } catch (e) {\r\n      errors.collection = {\r\n        type: \"pattern\",\r\n        message: \"Invalid collection address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport interface ImprovedCNFTManagerProps {\r\n  className?: string;\r\n  defaultTab?: ActiveTab;\r\n}\r\n\r\nexport default function ImprovedCNFTManager({\r\n  className,\r\n  defaultTab = 'view'\r\n}: ImprovedCNFTManagerProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [activeTab, setActiveTab] = useState<ActiveTab>(defaultTab);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Data state\r\n  const [compressedNFTs, setCompressedNFTs] = useState<CompressedNFT[]>([]);\r\n  const [merkleTree, setMerkleTree] = useState<MerkleTreeInfo | null>(null);\r\n  const [collections, setCollections] = useState<CNFTCollection[]>([]);\r\n  const [selectedNFT, setSelectedNFT] = useState<CompressedNFT | null>(null);\r\n\r\n  // View form\r\n  const viewForm = useForm<ViewCNFTFormValues>({\r\n    defaultValues: {\r\n      searchType: 'assetId',\r\n      assetId: '',\r\n      treeAddress: '',\r\n      leafIndex: 0,\r\n      ownerAddress: publicKey?.toString() || '',\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: viewFormResolver,\r\n  });\r\n\r\n  // Mint form\r\n  const mintForm = useForm<MintCNFTFormValues>({\r\n    defaultValues: {\r\n      name: '',\r\n      symbol: '',\r\n      uri: '',\r\n      description: '',\r\n      merkleTree: '',\r\n      collection: '',\r\n      useExistingCollection: false,\r\n      attributes: [{ trait_type: '', value: '' }],\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: mintFormResolver,\r\n  });\r\n\r\n  // Tree management form\r\n  const treeForm = useForm<ManageTreeFormValues>({\r\n    defaultValues: {\r\n      maxDepth: 14,\r\n      maxBufferSize: 64,\r\n      canopyDepth: 0,\r\n    },\r\n    mode: \"onSubmit\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      viewForm.setValue('ownerAddress', publicKey.toString());\r\n    }\r\n  }, [connected, publicKey, viewForm]);\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = (address: string, type: 'address' | 'tx' = 'address') => {\r\n    const baseUrl = network === 'devnet'\r\n      ? `https://explorer.solana.com/${type}/`\r\n      : `https://solscan.io/${type === 'address' ? 'account' : 'tx'}/`;\r\n    window.open(\r\n      `${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n      '_blank'\r\n    );\r\n  };\r\n\r\n  // Search CNFTs\r\n  const searchCNFTs = async (values: ViewCNFTFormValues) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      setCompressedNFTs([]);\r\n\r\n      toast.loading(\"Searching compressed NFTs...\", {\r\n        id: \"search-cnfts\",\r\n      });\r\n\r\n      // Initialize UMI\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(mplBubblegum());\r\n\r\n      // Mock data for demonstration\r\n      // In real implementation, you would use DAS API or indexer\r\n      const mockCNFTs: CompressedNFT[] = [\r\n        {\r\n          id: `cnft_${Date.now()}_1`,\r\n          name: \"Compressed NFT #1\",\r\n          description: \"A sample compressed NFT\",\r\n          image: \"https://via.placeholder.com/300?text=CNFT+1\",\r\n          merkleTree: values.treeAddress || \"11111111111111111111111111111111\",\r\n          leafIndex: 0,\r\n          owner: values.ownerAddress || publicKey?.toString() || \"11111111111111111111111111111111\",\r\n          collection: values.searchType === 'assetId' ? \"22222222222222222222222222222222\" : undefined,\r\n          creators: [\r\n            {\r\n              address: publicKey?.toString() || \"11111111111111111111111111111111\",\r\n              verified: true,\r\n              share: 100,\r\n            }\r\n          ],\r\n          attributes: [\r\n            { trait_type: \"Rarity\", value: \"Common\" },\r\n            { trait_type: \"Type\", value: \"Compressed\" },\r\n          ],\r\n          uri: \"https://example.com/metadata/1.json\",\r\n          compressed: true,\r\n        },\r\n        {\r\n          id: `cnft_${Date.now()}_2`,\r\n          name: \"Compressed NFT #2\",\r\n          description: \"Another sample compressed NFT\",\r\n          image: \"https://via.placeholder.com/300?text=CNFT+2\",\r\n          merkleTree: values.treeAddress || \"11111111111111111111111111111111\",\r\n          leafIndex: 1,\r\n          owner: values.ownerAddress || publicKey?.toString() || \"11111111111111111111111111111111\",\r\n          creators: [\r\n            {\r\n              address: publicKey?.toString() || \"11111111111111111111111111111111\",\r\n              verified: true,\r\n              share: 100,\r\n            }\r\n          ],\r\n          attributes: [\r\n            { trait_type: \"Rarity\", value: \"Rare\" },\r\n            { trait_type: \"Type\", value: \"Compressed\" },\r\n          ],\r\n          uri: \"https://example.com/metadata/2.json\",\r\n          compressed: true,\r\n        }\r\n      ];\r\n\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n\r\n      setCompressedNFTs(mockCNFTs);\r\n\r\n      toast.success(\"Compressed NFTs found!\", {\r\n        id: \"search-cnfts\",\r\n        description: `Found ${mockCNFTs.length} compressed NFTs`,\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error searching CNFTs:\", err);\r\n      setError(err.message);\r\n\r\n      toast.error(\"Failed to search compressed NFTs\", {\r\n        id: \"search-cnfts\",\r\n        description: err.message,\r\n      });\r\n\r\n      if (err.message?.includes(\"failed to fetch\") ||\r\n        err.message?.includes(\"timeout\") ||\r\n        err.message?.includes(\"429\") ||\r\n        err.message?.includes(\"503\")) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Mint CNFT\r\n  const mintCNFT = async (values: MintCNFTFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      toast.loading(\"Minting compressed NFT...\", {\r\n        id: \"mint-cnft\",\r\n      });\r\n\r\n      // Mock implementation - complex CNFT minting\r\n      await new Promise(resolve => setTimeout(resolve, 4000));\r\n\r\n      toast.success(\"Compressed NFT minted successfully!\", {\r\n        id: \"mint-cnft\",\r\n        description: `NFT: ${values.name}`,\r\n      });\r\n\r\n      // Reset form\r\n      mintForm.reset();\r\n\r\n      // Refresh CNFTs list if on view tab\r\n      if (activeTab === 'view') {\r\n        const currentValues = viewForm.getValues();\r\n        if (currentValues.ownerAddress) {\r\n          await searchCNFTs(currentValues);\r\n        }\r\n      }\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error minting CNFT:\", err);\r\n      setError(err.message);\r\n\r\n      toast.error(\"Failed to mint compressed NFT\", {\r\n        id: \"mint-cnft\",\r\n        description: err.message,\r\n      });\r\n\r\n      if (err.message?.includes(\"failed to fetch\") ||\r\n        err.message?.includes(\"timeout\") ||\r\n        err.message?.includes(\"429\") ||\r\n        err.message?.includes(\"503\")) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create Merkle Tree\r\n  const createMerkleTree = async (values: ManageTreeFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      toast.loading(\"Creating merkle tree...\", {\r\n        id: \"create-tree\",\r\n      });\r\n\r\n      // Mock implementation - Bubblegum createTree may not be ready\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n      // Generate mock tree address\r\n      const treeAddress = `Tree${Date.now()}${Math.random().toString(36).substring(2)}`;\r\n\r\n      // Update tree info\r\n      const newTreeInfo: MerkleTreeInfo = {\r\n        address: treeAddress,\r\n        maxDepth: values.maxDepth,\r\n        maxBufferSize: values.maxBufferSize,\r\n        canopyDepth: values.canopyDepth,\r\n        authority: publicKey.toString(),\r\n        creationSlot: Date.now(), // Mock slot\r\n        totalMinted: 0,\r\n        totalCapacity: Math.pow(2, values.maxDepth),\r\n      };\r\n\r\n      setMerkleTree(newTreeInfo);\r\n\r\n      toast.success(\"Merkle tree created successfully!\", {\r\n        id: \"create-tree\",\r\n        description: `Tree: ${treeAddress.slice(0, 8)}...${treeAddress.slice(-8)}`,\r\n      });\r\n\r\n      // Reset form\r\n      treeForm.reset();\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error creating merkle tree:\", err);\r\n      setError(err.message);\r\n\r\n      toast.error(\"Failed to create merkle tree\", {\r\n        id: \"create-tree\",\r\n        description: err.message,\r\n      });\r\n\r\n      if (err.message?.includes(\"failed to fetch\") ||\r\n        err.message?.includes(\"timeout\") ||\r\n        err.message?.includes(\"429\") ||\r\n        err.message?.includes(\"503\")) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Add attribute to mint form\r\n  const addAttribute = () => {\r\n    const currentAttributes = mintForm.getValues(\"attributes\");\r\n    mintForm.setValue(\"attributes\", [\r\n      ...currentAttributes,\r\n      { trait_type: \"\", value: \"\" }\r\n    ]);\r\n  };\r\n\r\n  // Remove attribute from mint form\r\n  const removeAttribute = (index: number) => {\r\n    const currentAttributes = mintForm.getValues(\"attributes\");\r\n    if (currentAttributes.length > 1) {\r\n      mintForm.setValue(\"attributes\", currentAttributes.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  // Render view tab\r\n  const renderViewTab = () => (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Search className=\"h-5 w-5\" />\r\n            Search Compressed NFTs\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Find compressed NFTs by Asset ID, Tree & Leaf Index, or Owner\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Form {...viewForm}>\r\n            <form onSubmit={viewForm.handleSubmit(searchCNFTs)} className=\"space-y-4\">\r\n              <FormField\r\n                control={viewForm.control}\r\n                name=\"searchType\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Search Method</FormLabel>\r\n                    <FormControl>\r\n                      <Tabs\r\n                        value={field.value}\r\n                        onValueChange={field.onChange}\r\n                        className=\"w-full\"\r\n                      >\r\n                        <TabsList className=\"grid w-full grid-cols-3\">\r\n                          <TabsTrigger value=\"assetId\">Asset ID</TabsTrigger>\r\n                          <TabsTrigger value=\"treeAndLeaf\">Tree & Leaf</TabsTrigger>\r\n                          <TabsTrigger value=\"owner\">By Owner</TabsTrigger>\r\n                        </TabsList>\r\n\r\n                        <TabsContent value=\"assetId\" className=\"space-y-4 mt-4\">\r\n                          <FormField\r\n                            control={viewForm.control}\r\n                            name=\"assetId\"\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Asset ID</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    placeholder=\"Enter compressed NFT asset ID\"\r\n                                    {...field}\r\n                                    disabled={isLoading}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                        </TabsContent>\r\n\r\n                        <TabsContent value=\"treeAndLeaf\" className=\"space-y-4 mt-4\">\r\n                          <div className=\"grid grid-cols-2 gap-4\">\r\n                            <FormField\r\n                              control={viewForm.control}\r\n                              name=\"treeAddress\"\r\n                              render={({ field }) => (\r\n                                <FormItem>\r\n                                  <FormLabel>Tree Address</FormLabel>\r\n                                  <FormControl>\r\n                                    <Input\r\n                                      placeholder=\"Merkle tree address\"\r\n                                      {...field}\r\n                                      disabled={isLoading}\r\n                                    />\r\n                                  </FormControl>\r\n                                  <FormMessage />\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n\r\n                            <FormField\r\n                              control={viewForm.control}\r\n                              name=\"leafIndex\"\r\n                              render={({ field }) => (\r\n                                <FormItem>\r\n                                  <FormLabel>Leaf Index</FormLabel>\r\n                                  <FormControl>\r\n                                    <Input\r\n                                      type=\"number\"\r\n                                      min=\"0\"\r\n                                      placeholder=\"0\"\r\n                                      {...field}\r\n                                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                                      disabled={isLoading}\r\n                                    />\r\n                                  </FormControl>\r\n                                  <FormMessage />\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                        </TabsContent>\r\n\r\n                        <TabsContent value=\"owner\" className=\"space-y-4 mt-4\">\r\n                          <FormField\r\n                            control={viewForm.control}\r\n                            name=\"ownerAddress\"\r\n                            render={({ field }) => (\r\n                              <FormItem>\r\n                                <FormLabel>Owner Address</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    placeholder=\"Enter owner wallet address\"\r\n                                    {...field}\r\n                                    disabled={isLoading}\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n                        </TabsContent>\r\n                      </Tabs>\r\n                    </FormControl>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Searching...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Search className=\"h-4 w-4 mr-2\" />\r\n                    Search CNFTs\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </form>\r\n          </Form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Results */}\r\n      {compressedNFTs.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span className=\"flex items-center gap-2\">\r\n                <TreePine className=\"h-5 w-5\" />\r\n                Found {compressedNFTs.length} Compressed NFTs\r\n              </span>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => searchCNFTs(viewForm.getValues())}\r\n                disabled={isLoading}\r\n              >\r\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n                Refresh\r\n              </Button>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n              {compressedNFTs.map((nft) => (\r\n                <Card key={nft.id} className=\"border border-border/50\">\r\n                  <CardContent className=\"p-4\">\r\n                    {nft.image && (\r\n                      <div className=\"aspect-square mb-3 overflow-hidden rounded-lg\">\r\n                        <img\r\n                          src={nft.image}\r\n                          alt={nft.name}\r\n                          className=\"w-full h-full object-cover\"\r\n                          onError={(e) => {\r\n                            e.currentTarget.src = \"https://via.placeholder.com/300?text=No+Image\";\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"space-y-2\">\r\n                      <h3 className=\"font-semibold text-sm\">{nft.name}</h3>\r\n\r\n                      {nft.description && (\r\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\r\n                          {nft.description}\r\n                        </p>\r\n                      )}\r\n\r\n                      <div className=\"space-y-1 text-xs\">\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-muted-foreground\">Tree:</span>\r\n                          <span className=\"font-mono\">\r\n                            {nft.merkleTree.slice(0, 4)}...{nft.merkleTree.slice(-4)}\r\n                          </span>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-muted-foreground\">Leaf:</span>\r\n                          <span>{nft.leafIndex}</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-between\">\r\n                          <span className=\"text-muted-foreground\">Owner:</span>\r\n                          <span className=\"font-mono\">\r\n                            {nft.owner.slice(0, 4)}...{nft.owner.slice(-4)}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {nft.attributes && nft.attributes.length > 0 && (\r\n                        <div className=\"pt-2 border-t border-border/50\">\r\n                          <div className=\"flex flex-wrap gap-1\">\r\n                            {nft.attributes.slice(0, 3).map((attr, index) => (\r\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\r\n                                {attr.trait_type}: {attr.value}\r\n                              </Badge>\r\n                            ))}\r\n                            {nft.attributes.length > 3 && (\r\n                              <Badge variant=\"outline\" className=\"text-xs\">\r\n                                +{nft.attributes.length - 3} more\r\n                              </Badge>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      <div className=\"flex gap-1 pt-2\">\r\n                        <Dialog>\r\n                          <DialogTrigger asChild>\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              className=\"flex-1\"\r\n                              onClick={() => setSelectedNFT(nft)}\r\n                            >\r\n                              <Eye className=\"h-3 w-3 mr-1\" />\r\n                              View\r\n                            </Button>\r\n                          </DialogTrigger>\r\n                          <DialogContent className=\"max-w-2xl\">\r\n                            <DialogHeader>\r\n                              <DialogTitle>{selectedNFT?.name}</DialogTitle>\r\n                              <DialogDescription>\r\n                                Compressed NFT Details\r\n                              </DialogDescription>\r\n                            </DialogHeader>\r\n                            {selectedNFT && (\r\n                              <div className=\"space-y-4\">\r\n                                {selectedNFT.image && (\r\n                                  <div className=\"aspect-square w-48 mx-auto overflow-hidden rounded-lg\">\r\n                                    <img\r\n                                      src={selectedNFT.image}\r\n                                      alt={selectedNFT.name}\r\n                                      className=\"w-full h-full object-cover\"\r\n                                    />\r\n                                  </div>\r\n                                )}\r\n\r\n                                <div className=\"space-y-3\">\r\n                                  <div>\r\n                                    <Label className=\"text-sm font-medium\">Description</Label>\r\n                                    <p className=\"text-sm text-muted-foreground\">\r\n                                      {selectedNFT.description || \"No description\"}\r\n                                    </p>\r\n                                  </div>\r\n\r\n                                  <div className=\"grid grid-cols-2 gap-4\">\r\n                                    <div>\r\n                                      <Label className=\"text-sm font-medium\">Merkle Tree</Label>\r\n                                      <div className=\"flex items-center gap-2\">\r\n                                        <span className=\"text-sm font-mono\">\r\n                                          {selectedNFT.merkleTree.slice(0, 8)}...{selectedNFT.merkleTree.slice(-8)}\r\n                                        </span>\r\n                                        <Button\r\n                                          variant=\"ghost\"\r\n                                          size=\"sm\"\r\n                                          onClick={() => copyToClipboard(selectedNFT.merkleTree)}\r\n                                        >\r\n                                          <Copy className=\"h-3 w-3\" />\r\n                                        </Button>\r\n                                      </div>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                      <Label className=\"text-sm font-medium\">Leaf Index</Label>\r\n                                      <p className=\"text-sm\">{selectedNFT.leafIndex}</p>\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <div>\r\n                                    <Label className=\"text-sm font-medium\">Owner</Label>\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      <span className=\"text-sm font-mono\">\r\n                                        {selectedNFT.owner.slice(0, 8)}...{selectedNFT.owner.slice(-8)}\r\n                                      </span>\r\n                                      <Button\r\n                                        variant=\"ghost\"\r\n                                        size=\"sm\"\r\n                                        onClick={() => copyToClipboard(selectedNFT.owner)}\r\n                                      >\r\n                                        <Copy className=\"h-3 w-3\" />\r\n                                      </Button>\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  {selectedNFT.attributes && selectedNFT.attributes.length > 0 && (\r\n                                    <div>\r\n                                      <Label className=\"text-sm font-medium\">Attributes</Label>\r\n                                      <div className=\"grid grid-cols-2 gap-2 mt-2\">\r\n                                        {selectedNFT.attributes.map((attr, index) => (\r\n                                          <div key={index} className=\"bg-secondary/50 rounded p-2\">\r\n                                            <div className=\"text-xs text-muted-foreground\">{attr.trait_type}</div>\r\n                                            <div className=\"text-sm font-medium\">{attr.value}</div>\r\n                                          </div>\r\n                                        ))}\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n\r\n                                  <div className=\"flex gap-2\">\r\n                                    <Button\r\n                                      variant=\"outline\"\r\n                                      onClick={() => viewInExplorer(selectedNFT.merkleTree)}\r\n                                      className=\"flex-1\"\r\n                                    >\r\n                                      <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                                      View Tree\r\n                                    </Button>\r\n                                    <Button\r\n                                      variant=\"outline\"\r\n                                      onClick={() => copyToClipboard(selectedNFT.uri)}\r\n                                      className=\"flex-1\"\r\n                                    >\r\n                                      <Copy className=\"h-4 w-4 mr-2\" />\r\n                                      Copy URI\r\n                                    </Button>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </DialogContent>\r\n                        </Dialog>\r\n\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => viewInExplorer(nft.merkleTree)}\r\n                        >\r\n                          <ExternalLink className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Render mint tab\r\n  const renderMintTab = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Plus className=\"h-5 w-5\" />\r\n          Mint Compressed NFT\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Create a new compressed NFT with custom metadata\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Form {...mintForm}>\r\n          <form onSubmit={mintForm.handleSubmit(mintCNFT)} className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <FormField\r\n                control={mintForm.control}\r\n                name=\"name\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Name</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder=\"Enter NFT name\"\r\n                        {...field}\r\n                        disabled={isLoading}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={mintForm.control}\r\n                name=\"symbol\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Symbol</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder=\"NFT\"\r\n                        {...field}\r\n                        disabled={isLoading}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n\r\n            <FormField\r\n              control={mintForm.control}\r\n              name=\"description\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Description</FormLabel>\r\n                  <FormControl>\r\n                    <Textarea\r\n                      placeholder=\"Enter NFT description\"\r\n                      {...field}\r\n                      disabled={isLoading}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={mintForm.control}\r\n              name=\"uri\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Metadata URI</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"https://example.com/metadata.json\"\r\n                      {...field}\r\n                      disabled={isLoading}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={mintForm.control}\r\n              name=\"merkleTree\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Merkle Tree Address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter merkle tree address\"\r\n                      {...field}\r\n                      disabled={isLoading}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* Collection Settings */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <FormField\r\n                control={mintForm.control}\r\n                name=\"useExistingCollection\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"flex items-center space-x-2\">\r\n                    <FormControl>\r\n                      <Switch\r\n                        checked={field.value}\r\n                        onCheckedChange={field.onChange}\r\n                        disabled={isLoading}\r\n                      />\r\n                    </FormControl>\r\n                    <Label>Use Existing Collection</Label>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {mintForm.watch(\"useExistingCollection\") && (\r\n                <FormField\r\n                  control={mintForm.control}\r\n                  name=\"collection\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Collection Address</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          placeholder=\"Enter collection mint address\"\r\n                          {...field}\r\n                          disabled={isLoading}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Attributes */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label>Attributes</Label>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={addAttribute}\r\n                  disabled={isLoading}\r\n                >\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Attribute\r\n                </Button>\r\n              </div>\r\n\r\n              {mintForm.watch(\"attributes\").map((_, index) => (\r\n                <div key={index} className=\"grid grid-cols-12 gap-2 items-end\">\r\n                  <div className=\"col-span-5\">\r\n                    <FormField\r\n                      control={mintForm.control}\r\n                      name={`attributes.${index}.trait_type`}\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          {index === 0 && <FormLabel>Trait Type</FormLabel>}\r\n                          <FormControl>\r\n                            <Input\r\n                              placeholder=\"e.g., Color\"\r\n                              {...field}\r\n                              disabled={isLoading}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-6\">\r\n                    <FormField\r\n                      control={mintForm.control}\r\n                      name={`attributes.${index}.value`}\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          {index === 0 && <FormLabel>Value</FormLabel>}\r\n                          <FormControl>\r\n                            <Input\r\n                              placeholder=\"e.g., Blue\"\r\n                              {...field}\r\n                              disabled={isLoading}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"col-span-1\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => removeAttribute(index)}\r\n                      disabled={mintForm.watch(\"attributes\").length === 1 || isLoading}\r\n                    >\r\n                      <X className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n                <div className=\"flex justify-between items-center text-sm\">\r\n                  <span>Network</span>\r\n                  <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                    {network}\r\n                  </Badge>\r\n                </div>\r\n                {connected && publicKey && (\r\n                  <div className=\"flex justify-between items-center text-sm\">\r\n                    <span>Wallet</span>\r\n                    <span className=\"font-mono text-xs\">\r\n                      {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"pt-2\">\r\n                {!connected ? (\r\n                  <ConnectWalletButton className=\"w-full\" />\r\n                ) : (\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={isLoading}\r\n                    className=\"w-full\"\r\n                  >\r\n                    {isLoading ? (\r\n                      <>\r\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                        Minting...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Plus className=\"mr-2 h-4 w-4\" />\r\n                        Mint Compressed NFT\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  // Render trees tab\r\n  const renderTreesTab = () => (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <TreePine className=\"h-5 w-5\" />\r\n            Create Merkle Tree\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Create a new merkle tree for compressed NFT storage\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Form {...treeForm}>\r\n            <form onSubmit={treeForm.handleSubmit(createMerkleTree)} className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-3 gap-4\">\r\n                <FormField\r\n                  control={treeForm.control}\r\n                  name=\"maxDepth\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Max Depth</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"3\"\r\n                          max=\"30\"\r\n                          placeholder=\"14\"\r\n                          {...field}\r\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                          disabled={isLoading}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Tree depth (3-30). Higher = more capacity\r\n                      </p>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={treeForm.control}\r\n                  name=\"maxBufferSize\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Max Buffer Size</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"8\"\r\n                          max=\"2048\"\r\n                          placeholder=\"64\"\r\n                          {...field}\r\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                          disabled={isLoading}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Buffer size (8-2048). Higher = more concurrent ops\r\n                      </p>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={treeForm.control}\r\n                  name=\"canopyDepth\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Canopy Depth</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"17\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                          disabled={isLoading}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Canopy depth (0-17). Higher = cheaper operations\r\n                      </p>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <Alert>\r\n                <Info className=\"h-4 w-4\" />\r\n                <AlertDescription>\r\n                  Creating a merkle tree requires SOL for rent. Higher depths and buffer sizes cost more but allow for more NFTs and concurrent operations.\r\n                </AlertDescription>\r\n              </Alert>\r\n\r\n              <div className=\"space-y-4\">\r\n                <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n                  <div className=\"flex justify-between items-center text-sm\">\r\n                    <span>Estimated Capacity</span>\r\n                    <span className=\"font-medium\">\r\n                      {Math.pow(2, treeForm.watch(\"maxDepth\") || 14).toLocaleString()} NFTs\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex justify-between items-center text-sm\">\r\n                    <span>Network</span>\r\n                    <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                      {network}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"pt-2\">\r\n                  {!connected ? (\r\n                    <ConnectWalletButton className=\"w-full\" />\r\n                  ) : (\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={isLoading}\r\n                      className=\"w-full\"\r\n                    >\r\n                      {isLoading ? (\r\n                        <>\r\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                          Creating Tree...\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <TreePine className=\"mr-2 h-4 w-4\" />\r\n                          Create Merkle Tree\r\n                        </>\r\n                      )}\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tree Info */}\r\n      {merkleTree && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n              Merkle Tree Created\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Tree Address</Label>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-sm font-mono\">\r\n                      {merkleTree.address.slice(0, 8)}...{merkleTree.address.slice(-8)}\r\n                    </span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(merkleTree.address)}\r\n                    >\r\n                      <Copy className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Authority</Label>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"text-sm font-mono\">\r\n                      {merkleTree.authority.slice(0, 8)}...{merkleTree.authority.slice(-8)}\r\n                    </span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(merkleTree.authority)}\r\n                    >\r\n                      <Copy className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-4 gap-4\">\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Max Depth</Label>\r\n                  <p className=\"text-sm\">{merkleTree.maxDepth}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Buffer Size</Label>\r\n                  <p className=\"text-sm\">{merkleTree.maxBufferSize}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Canopy Depth</Label>\r\n                  <p className=\"text-sm\">{merkleTree.canopyDepth}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Capacity</Label>\r\n                  <p className=\"text-sm\">{merkleTree.totalCapacity.toLocaleString()}</p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Total Minted</Label>\r\n                  <p className=\"text-sm\">{merkleTree.totalMinted.toLocaleString()}</p>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"text-sm font-medium\">Usage</Label>\r\n                  <p className=\"text-sm\">\r\n                    {((merkleTree.totalMinted / merkleTree.totalCapacity) * 100).toFixed(2)}%\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2 pt-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => viewInExplorer(merkleTree.address)}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                  View in Explorer\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => copyToClipboard(merkleTree.address)}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <Copy className=\"h-4 w-4 mr-2\" />\r\n                  Copy Address\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Render manage tab\r\n  const renderManageTab = () => (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            CNFT Management Tools\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Advanced tools for managing your compressed NFTs\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\r\n              <Send className=\"h-6 w-6\" />\r\n              <span>Transfer CNFTs</span>\r\n              <span className=\"text-xs text-muted-foreground\">Transfer compressed NFTs to other wallets</span>\r\n            </Button>\r\n\r\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\r\n              <Edit className=\"h-6 w-6\" />\r\n              <span>Update Metadata</span>\r\n              <span className=\"text-xs text-muted-foreground\">Update CNFT metadata and attributes</span>\r\n            </Button>\r\n\r\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\r\n              <Trash2 className=\"h-6 w-6\" />\r\n              <span>Burn CNFTs</span>\r\n              <span className=\"text-xs text-muted-foreground\">Permanently destroy compressed NFTs</span>\r\n            </Button>\r\n\r\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\r\n              <ArrowUpDown className=\"h-6 w-6\" />\r\n              <span>Batch Operations</span>\r\n              <span className=\"text-xs text-muted-foreground\">Perform bulk operations on multiple CNFTs</span>\r\n            </Button>\r\n          </div>\r\n\r\n          <Alert className=\"mt-4\">\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              Advanced management features are coming soon. These tools will provide comprehensive CNFT management capabilities.\r\n            </AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n\r\n  // Render collections tab\r\n  const renderCollectionsTab = () => (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Plus className=\"h-5 w-5\" />\r\n            CNFT Collections\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage your compressed NFT collections\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert>\r\n            <Info className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              Collection management features are in development. This will include collection creation, metadata management, and analytics.\r\n            </AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Improved CNFT Manager</CardTitle>\r\n          <CardDescription>\r\n            Comprehensive compressed NFT management platform\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <TreePine className=\"h-6 w-6\" />\r\n              Improved CNFT Manager\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Comprehensive compressed NFT management platform\r\n            </CardDescription>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            {connected && publicKey && (\r\n              <Badge variant=\"outline\">\r\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n              </Badge>\r\n            )}\r\n            <Badge variant=\"outline\">{network}</Badge>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as ActiveTab)}>\r\n          <TabsList className=\"grid w-full grid-cols-5\">\r\n            <TabsTrigger value=\"view\" className=\"flex items-center gap-2\">\r\n              <Eye className=\"h-4 w-4\" />\r\n              View\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"mint\" className=\"flex items-center gap-2\">\r\n              <Plus className=\"h-4 w-4\" />\r\n              Mint\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"trees\" className=\"flex items-center gap-2\">\r\n              <TreePine className=\"h-4 w-4\" />\r\n              Trees\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"manage\" className=\"flex items-center gap-2\">\r\n              <Settings className=\"h-4 w-4\" />\r\n              Manage\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"collections\" className=\"flex items-center gap-2\">\r\n              <TreePine className=\"h-4 w-4\" />\r\n              Collections\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          <div className=\"mt-6\">\r\n            <TabsContent value=\"view\" className=\"space-y-4\">\r\n              {renderViewTab()}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"mint\" className=\"space-y-4\">\r\n              {renderMintTab()}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"trees\" className=\"space-y-4\">\r\n              {renderTreesTab()}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"manage\" className=\"space-y-4\">\r\n              {renderManageTab()}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"collections\" className=\"space-y-4\">\r\n              {renderCollectionsTab()}\r\n            </TabsContent>\r\n          </div>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { ImprovedCNFTManager };",
      "type": "registry:component",
      "target": "components/ui/murphy/improved-cnft-manager.tsx"
    }
  ]
}