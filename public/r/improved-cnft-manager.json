{
    "name": "improved-cnft-manager",
    "description": "A comprehensive compressed NFT management platform with multiple features and tabs, supporting viewing, minting, and managing cNFTs, Merkle trees, and collections.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/mpl-bubblegum",
        "@metaplex-foundation/mpl-token-metadata",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "badge",
        "dialog",
        "label",
        "tabs",
        "table",
        "alert",
        "textarea",
        "switch",
        "select"
    ],
    "files": [
        {
            "name": "improved-cnft-manager.tsx",
            "content": "'use client';\n\n// React v√† hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle\n} from \"@/components/ui/alert\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport {\n  Loader2,\n  ExternalLink,\n  Search,\n  TreePine,\n  Plus,\n  Settings,\n  Eye,\n  Copy,\n  RefreshCw,\n  Trash2,\n  Edit,\n  Send,\n  Info,\n  CheckCircle,\n  X,\n  ArrowUpDown,\n  AlertTriangle\n} from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries for Compressed NFTs\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplBubblegum, mintToCollectionV1, createTree } from '@metaplex-foundation/mpl-bubblegum';\nimport { mplTokenMetadata, createNft } from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  percentAmount,\n} from '@metaplex-foundation/umi';\n\n// Types\ninterface CompressedNFT {\n  id: string;\n  name: string;\n  image?: string;\n  description?: string;\n  merkleTree: string;\n  leafIndex: number;\n  owner: string;\n  collection?: string;\n  creators?: Array<{\n    address: string;\n    verified: boolean;\n    share: number;\n  }>;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  uri: string;\n  compressed: boolean;\n}\n\ninterface MerkleTreeInfo {\n  address: string;\n  maxDepth: number;\n  maxBufferSize: number;\n  canopyDepth: number;\n  authority: string;\n  creationSlot: number;\n  totalMinted: number;\n  totalCapacity: number;\n}\n\ninterface CNFTCollection {\n  mint: string;\n  name: string;\n  symbol: string;\n  description?: string;\n  image?: string;\n  totalItems: number;\n  merkleTree: string;\n}\n\ntype ActiveTab = 'view' | 'mint' | 'manage' | 'trees' | 'collections';\n\n// Form types\ntype ViewCNFTFormValues = {\n  searchType: 'assetId' | 'treeAndLeaf' | 'owner';\n  assetId: string;\n  treeAddress: string;\n  leafIndex: number;\n  ownerAddress: string;\n};\n\ntype MintCNFTFormValues = {\n  name: string;\n  symbol: string;\n  uri: string;\n  description: string;\n  merkleTree: string;\n  collection: string;\n  useExistingCollection: boolean;\n  attributes: Array<{\n    trait_type: string;\n    value: string;\n  }>;\n};\n\ntype ManageTreeFormValues = {\n  maxDepth: number;\n  maxBufferSize: number;\n  canopyDepth: number;\n};\n\n// Custom resolver for view form\nconst viewFormResolver = (data: any) => {\n  const errors: any = {};\n\n  if (data.searchType === 'assetId') {\n    if (!data.assetId || data.assetId.trim().length === 0) {\n      errors.assetId = {\n        type: \"required\",\n        message: \"Asset ID is required\",\n      };\n    } else {\n      try {\n        new PublicKey(data.assetId);\n      } catch (e) {\n        errors.assetId = {\n          type: \"pattern\",\n          message: \"Invalid Asset ID format\",\n        };\n      }\n    }\n  } else if (data.searchType === 'treeAndLeaf') {\n    if (!data.treeAddress || data.treeAddress.trim().length === 0) {\n      errors.treeAddress = {\n        type: \"required\",\n        message: \"Tree address is required\",\n      };\n    } else {\n      try {\n        new PublicKey(data.treeAddress);\n      } catch (e) {\n        errors.treeAddress = {\n          type: \"pattern\",\n          message: \"Invalid tree address format\",\n        };\n      }\n    }\n\n    if (data.leafIndex === undefined || data.leafIndex < 0) {\n      errors.leafIndex = {\n        type: \"min\",\n        message: \"Leaf index must be 0 or greater\",\n      };\n    }\n  } else if (data.searchType === 'owner') {\n    if (!data.ownerAddress || data.ownerAddress.trim().length === 0) {\n      errors.ownerAddress = {\n        type: \"required\",\n        message: \"Owner address is required\",\n      };\n    } else {\n      try {\n        new PublicKey(data.ownerAddress);\n      } catch (e) {\n        errors.ownerAddress = {\n          type: \"pattern\",\n          message: \"Invalid owner address format\",\n        };\n      }\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\n// Custom resolver for mint form\nconst mintFormResolver = (data: any) => {\n  const errors: any = {};\n\n  if (!data.name || data.name.trim().length === 0) {\n    errors.name = {\n      type: \"required\",\n      message: \"Name is required\",\n    };\n  }\n\n  if (!data.symbol || data.symbol.trim().length === 0) {\n    errors.symbol = {\n      type: \"required\",\n      message: \"Symbol is required\",\n    };\n  }\n\n  if (!data.uri || data.uri.trim().length === 0) {\n    errors.uri = {\n      type: \"required\",\n      message: \"Metadata URI is required\",\n    };\n  } else {\n    try {\n      new URL(data.uri);\n    } catch (e) {\n      errors.uri = {\n        type: \"pattern\",\n        message: \"Invalid URI format\",\n      };\n    }\n  }\n\n  if (!data.merkleTree || data.merkleTree.trim().length === 0) {\n    errors.merkleTree = {\n      type: \"required\",\n      message: \"Merkle Tree address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.merkleTree);\n    } catch (e) {\n      errors.merkleTree = {\n        type: \"pattern\",\n        message: \"Invalid merkle tree address format\",\n      };\n    }\n  }\n\n  if (data.useExistingCollection && (!data.collection || data.collection.trim().length === 0)) {\n    errors.collection = {\n      type: \"required\",\n      message: \"Collection address is required when using existing collection\",\n    };\n  } else if (data.collection && data.collection.trim().length > 0) {\n    try {\n      new PublicKey(data.collection);\n    } catch (e) {\n      errors.collection = {\n        type: \"pattern\",\n        message: \"Invalid collection address format\",\n      };\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport interface ImprovedCNFTManagerProps {\n  className?: string;\n  defaultTab?: ActiveTab;\n}\n\nexport default function ImprovedCNFTManager({\n  className,\n  defaultTab = 'view'\n}: ImprovedCNFTManagerProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [activeTab, setActiveTab] = useState<ActiveTab>(defaultTab);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Data state\n  const [compressedNFTs, setCompressedNFTs] = useState<CompressedNFT[]>([]);\n  const [merkleTree, setMerkleTree] = useState<MerkleTreeInfo | null>(null);\n  const [collections, setCollections] = useState<CNFTCollection[]>([]);\n  const [selectedNFT, setSelectedNFT] = useState<CompressedNFT | null>(null);\n\n  // View form\n  const viewForm = useForm<ViewCNFTFormValues>({\n    defaultValues: {\n      searchType: 'assetId',\n      assetId: '',\n      treeAddress: '',\n      leafIndex: 0,\n      ownerAddress: publicKey?.toString() || '',\n    },\n    mode: \"onSubmit\",\n    resolver: viewFormResolver,\n  });\n\n  // Mint form\n  const mintForm = useForm<MintCNFTFormValues>({\n    defaultValues: {\n      name: '',\n      symbol: '',\n      uri: '',\n      description: '',\n      merkleTree: '',\n      collection: '',\n      useExistingCollection: false,\n      attributes: [{ trait_type: '', value: '' }],\n    },\n    mode: \"onSubmit\",\n    resolver: mintFormResolver,\n  });\n\n  // Tree management form\n  const treeForm = useForm<ManageTreeFormValues>({\n    defaultValues: {\n      maxDepth: 14,\n      maxBufferSize: 64,\n      canopyDepth: 0,\n    },\n    mode: \"onSubmit\",\n  });\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  useEffect(() => {\n    if (connected && publicKey) {\n      viewForm.setValue('ownerAddress', publicKey.toString());\n    }\n  }, [connected, publicKey, viewForm]);\n\n  // Helper functions\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n\n  const viewInExplorer = (address: string, type: 'address' | 'tx' = 'address') => {\n    const baseUrl = network === 'devnet'\n      ? `https://explorer.solana.com/${type}/`\n      : `https://solscan.io/${type === 'address' ? 'account' : 'tx'}/`;\n    window.open(\n      `${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`,\n      '_blank'\n    );\n  };\n\n  // Search CNFTs\n  const searchCNFTs = async (values: ViewCNFTFormValues) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      setCompressedNFTs([]);\n\n      toast.loading(\"Searching compressed NFTs...\", {\n        id: \"search-cnfts\",\n      });\n\n      // Initialize UMI\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(mplBubblegum());\n\n      // Mock data for demonstration\n      // In real implementation, you would use DAS API or indexer\n      const mockCNFTs: CompressedNFT[] = [\n        {\n          id: `cnft_${Date.now()}_1`,\n          name: \"Compressed NFT #1\",\n          description: \"A sample compressed NFT\",\n          image: \"https://via.placeholder.com/300?text=CNFT+1\",\n          merkleTree: values.treeAddress || \"11111111111111111111111111111111\",\n          leafIndex: 0,\n          owner: values.ownerAddress || publicKey?.toString() || \"11111111111111111111111111111111\",\n          collection: values.searchType === 'assetId' ? \"22222222222222222222222222222222\" : undefined,\n          creators: [\n            {\n              address: publicKey?.toString() || \"11111111111111111111111111111111\",\n              verified: true,\n              share: 100,\n            }\n          ],\n          attributes: [\n            { trait_type: \"Rarity\", value: \"Common\" },\n            { trait_type: \"Type\", value: \"Compressed\" },\n          ],\n          uri: \"https://example.com/metadata/1.json\",\n          compressed: true,\n        },\n        {\n          id: `cnft_${Date.now()}_2`,\n          name: \"Compressed NFT #2\",\n          description: \"Another sample compressed NFT\",\n          image: \"https://via.placeholder.com/300?text=CNFT+2\",\n          merkleTree: values.treeAddress || \"11111111111111111111111111111111\",\n          leafIndex: 1,\n          owner: values.ownerAddress || publicKey?.toString() || \"11111111111111111111111111111111\",\n          creators: [\n            {\n              address: publicKey?.toString() || \"11111111111111111111111111111111\",\n              verified: true,\n              share: 100,\n            }\n          ],\n          attributes: [\n            { trait_type: \"Rarity\", value: \"Rare\" },\n            { trait_type: \"Type\", value: \"Compressed\" },\n          ],\n          uri: \"https://example.com/metadata/2.json\",\n          compressed: true,\n        }\n      ];\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      setCompressedNFTs(mockCNFTs);\n\n      toast.success(\"Compressed NFTs found!\", {\n        id: \"search-cnfts\",\n        description: `Found ${mockCNFTs.length} compressed NFTs`,\n      });\n\n    } catch (err: any) {\n      console.error(\"Error searching CNFTs:\", err);\n      setError(err.message);\n\n      toast.error(\"Failed to search compressed NFTs\", {\n        id: \"search-cnfts\",\n        description: err.message,\n      });\n\n      if (err.message?.includes(\"failed to fetch\") ||\n        err.message?.includes(\"timeout\") ||\n        err.message?.includes(\"429\") ||\n        err.message?.includes(\"503\")) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Mint CNFT\n  const mintCNFT = async (values: MintCNFTFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      toast.loading(\"Minting compressed NFT...\", {\n        id: \"mint-cnft\",\n      });\n\n      // Create wallet adapter\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplBubblegum())\n        .use(mplTokenMetadata());\n\n      let collectionMint = values.collection;\n\n      // Create new collection if not using existing one\n      if (!values.useExistingCollection || !collectionMint) {\n        const newCollectionMint = generateSigner(umi);\n\n        const createCollectionResult = await createNft(umi, {\n          mint: newCollectionMint,\n          name: `${values.name} Collection`,\n          symbol: values.symbol,\n          uri: values.uri,\n          sellerFeeBasisPoints: percentAmount(5.0),\n          isCollection: true,\n        }).sendAndConfirm(umi);\n\n        collectionMint = newCollectionMint.publicKey.toString();\n\n        // Wait for confirmation\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n\n      // Mint compressed NFT\n      const merkleTreePubkey = umiPublicKey(values.merkleTree);\n      const collectionMintPubkey = umiPublicKey(collectionMint);\n\n      const metadataArgs = {\n        name: values.name,\n        uri: values.uri,\n        symbol: values.symbol,\n        sellerFeeBasisPoints: 500,\n        collection: {\n          key: collectionMintPubkey,\n          verified: false\n        },\n        creators: [\n          { address: umi.identity.publicKey, verified: false, share: 100 }\n        ],\n      };\n\n      const mintResult = await mintToCollectionV1(umi, {\n        leafOwner: umi.identity.publicKey,\n        merkleTree: merkleTreePubkey,\n        collectionMint: collectionMintPubkey,\n        metadata: metadataArgs,\n      }).sendAndConfirm(umi);\n\n      toast.success(\"Compressed NFT minted successfully!\", {\n        id: \"mint-cnft\",\n        description: `NFT: ${values.name}`,\n      });\n\n      // Reset form\n      mintForm.reset();\n\n      // Refresh CNFTs list if on view tab\n      if (activeTab === 'view') {\n        const currentValues = viewForm.getValues();\n        if (currentValues.ownerAddress) {\n          await searchCNFTs(currentValues);\n        }\n      }\n\n    } catch (err: any) {\n      console.error(\"Error minting CNFT:\", err);\n      setError(err.message);\n\n      toast.error(\"Failed to mint compressed NFT\", {\n        id: \"mint-cnft\",\n        description: err.message,\n      });\n\n      if (err.message?.includes(\"failed to fetch\") ||\n        err.message?.includes(\"timeout\") ||\n        err.message?.includes(\"429\") ||\n        err.message?.includes(\"503\")) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Create Merkle Tree\n  const createMerkleTree = async (values: ManageTreeFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      toast.loading(\"Creating merkle tree...\", {\n        id: \"create-tree\",\n      });\n\n      // Create wallet adapter\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplBubblegum());\n\n      // Generate tree signer\n      const merkleTree = generateSigner(umi);\n\n      // Create tree\n      const createTreeResult = await createTree(umi, {\n        merkleTree,\n        maxDepth: values.maxDepth,\n        maxBufferSize: values.maxBufferSize,\n        canopyDepth: values.canopyDepth,\n        treeCreator: umi.identity,\n      }).sendAndConfirm(umi);\n\n      const treeAddress = merkleTree.publicKey.toString();\n\n      // Update tree info\n      const newTreeInfo: MerkleTreeInfo = {\n        address: treeAddress,\n        maxDepth: values.maxDepth,\n        maxBufferSize: values.maxBufferSize,\n        canopyDepth: values.canopyDepth,\n        authority: publicKey.toString(),\n        creationSlot: Date.now(), // Mock slot\n        totalMinted: 0,\n        totalCapacity: Math.pow(2, values.maxDepth),\n      };\n\n      setMerkleTree(newTreeInfo);\n\n      toast.success(\"Merkle tree created successfully!\", {\n        id: \"create-tree\",\n        description: `Tree: ${treeAddress.slice(0, 8)}...${treeAddress.slice(-8)}`,\n      });\n\n      // Reset form\n      treeForm.reset();\n\n    } catch (err: any) {\n      console.error(\"Error creating merkle tree:\", err);\n      setError(err.message);\n\n      toast.error(\"Failed to create merkle tree\", {\n        id: \"create-tree\",\n        description: err.message,\n      });\n\n      if (err.message?.includes(\"failed to fetch\") ||\n        err.message?.includes(\"timeout\") ||\n        err.message?.includes(\"429\") ||\n        err.message?.includes(\"503\")) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add attribute to mint form\n  const addAttribute = () => {\n    const currentAttributes = mintForm.getValues(\"attributes\");\n    mintForm.setValue(\"attributes\", [\n      ...currentAttributes,\n      { trait_type: \"\", value: \"\" }\n    ]);\n  };\n\n  // Remove attribute from mint form\n  const removeAttribute = (index: number) => {\n    const currentAttributes = mintForm.getValues(\"attributes\");\n    if (currentAttributes.length > 1) {\n      mintForm.setValue(\"attributes\", currentAttributes.filter((_, i) => i !== index));\n    }\n  };\n\n  // Render view tab\n  const renderViewTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Search Compressed NFTs\n          </CardTitle>\n          <CardDescription>\n            Find compressed NFTs by Asset ID, Tree & Leaf Index, or Owner\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...viewForm}>\n            <form onSubmit={viewForm.handleSubmit(searchCNFTs)} className=\"space-y-4\">\n              <FormField\n                control={viewForm.control}\n                name=\"searchType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Search Method</FormLabel>\n                    <FormControl>\n                      <Tabs\n                        value={field.value}\n                        onValueChange={field.onChange}\n                        className=\"w-full\"\n                      >\n                        <TabsList className=\"grid w-full grid-cols-3\">\n                          <TabsTrigger value=\"assetId\">Asset ID</TabsTrigger>\n                          <TabsTrigger value=\"treeAndLeaf\">Tree & Leaf</TabsTrigger>\n                          <TabsTrigger value=\"owner\">By Owner</TabsTrigger>\n                        </TabsList>\n\n                        <TabsContent value=\"assetId\" className=\"space-y-4 mt-4\">\n                          <FormField\n                            control={viewForm.control}\n                            name=\"assetId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Asset ID</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Enter compressed NFT asset ID\"\n                                    {...field}\n                                    disabled={isLoading}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </TabsContent>\n\n                        <TabsContent value=\"treeAndLeaf\" className=\"space-y-4 mt-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={viewForm.control}\n                              name=\"treeAddress\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Tree Address</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      placeholder=\"Merkle tree address\"\n                                      {...field}\n                                      disabled={isLoading}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={viewForm.control}\n                              name=\"leafIndex\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Leaf Index</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      type=\"number\"\n                                      min=\"0\"\n                                      placeholder=\"0\"\n                                      {...field}\n                                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                      disabled={isLoading}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </TabsContent>\n\n                        <TabsContent value=\"owner\" className=\"space-y-4 mt-4\">\n                          <FormField\n                            control={viewForm.control}\n                            name=\"ownerAddress\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Owner Address</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Enter owner wallet address\"\n                                    {...field}\n                                    disabled={isLoading}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </TabsContent>\n                      </Tabs>\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Searching...\n                  </>\n                ) : (\n                  <>\n                    <Search className=\"h-4 w-4 mr-2\" />\n                    Search CNFTs\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      {compressedNFTs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center gap-2\">\n                <TreePine className=\"h-5 w-5\" />\n                Found {compressedNFTs.length} Compressed NFTs\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => searchCNFTs(viewForm.getValues())}\n                disabled={isLoading}\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {compressedNFTs.map((nft) => (\n                <Card key={nft.id} className=\"border border-border/50\">\n                  <CardContent className=\"p-4\">\n                    {nft.image && (\n                      <div className=\"aspect-square mb-3 overflow-hidden rounded-lg\">\n                        <img\n                          src={nft.image}\n                          alt={nft.name}\n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            e.currentTarget.src = \"https://via.placeholder.com/300?text=No+Image\";\n                          }}\n                        />\n                      </div>\n                    )}\n\n                    <div className=\"space-y-2\">\n                      <h3 className=\"font-semibold text-sm\">{nft.name}</h3>\n\n                      {nft.description && (\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {nft.description}\n                        </p>\n                      )}\n\n                      <div className=\"space-y-1 text-xs\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Tree:</span>\n                          <span className=\"font-mono\">\n                            {nft.merkleTree.slice(0, 4)}...{nft.merkleTree.slice(-4)}\n                          </span>\n                        </div>\n\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Leaf:</span>\n                          <span>{nft.leafIndex}</span>\n                        </div>\n\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Owner:</span>\n                          <span className=\"font-mono\">\n                            {nft.owner.slice(0, 4)}...{nft.owner.slice(-4)}\n                          </span>\n                        </div>\n                      </div>\n\n                      {nft.attributes && nft.attributes.length > 0 && (\n                        <div className=\"pt-2 border-t border-border/50\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {nft.attributes.slice(0, 3).map((attr, index) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                {attr.trait_type}: {attr.value}\n                              </Badge>\n                            ))}\n                            {nft.attributes.length > 3 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{nft.attributes.length - 3} more\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"flex gap-1 pt-2\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex-1\"\n                              onClick={() => setSelectedNFT(nft)}\n                            >\n                              <Eye className=\"h-3 w-3 mr-1\" />\n                              View\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>{selectedNFT?.name}</DialogTitle>\n                              <DialogDescription>\n                                Compressed NFT Details\n                              </DialogDescription>\n                            </DialogHeader>\n                            {selectedNFT && (\n                              <div className=\"space-y-4\">\n                                {selectedNFT.image && (\n                                  <div className=\"aspect-square w-48 mx-auto overflow-hidden rounded-lg\">\n                                    <img\n                                      src={selectedNFT.image}\n                                      alt={selectedNFT.name}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  </div>\n                                )}\n\n                                <div className=\"space-y-3\">\n                                  <div>\n                                    <Label className=\"text-sm font-medium\">Description</Label>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {selectedNFT.description || \"No description\"}\n                                    </p>\n                                  </div>\n\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <Label className=\"text-sm font-medium\">Merkle Tree</Label>\n                                      <div className=\"flex items-center gap-2\">\n                                        <span className=\"text-sm font-mono\">\n                                          {selectedNFT.merkleTree.slice(0, 8)}...{selectedNFT.merkleTree.slice(-8)}\n                                        </span>\n                                        <Button\n                                          variant=\"ghost\"\n                                          size=\"sm\"\n                                          onClick={() => copyToClipboard(selectedNFT.merkleTree)}\n                                        >\n                                          <Copy className=\"h-3 w-3\" />\n                                        </Button>\n                                      </div>\n                                    </div>\n\n                                    <div>\n                                      <Label className=\"text-sm font-medium\">Leaf Index</Label>\n                                      <p className=\"text-sm\">{selectedNFT.leafIndex}</p>\n                                    </div>\n                                  </div>\n\n                                  <div>\n                                    <Label className=\"text-sm font-medium\">Owner</Label>\n                                    <div className=\"flex items-center gap-2\">\n                                      <span className=\"text-sm font-mono\">\n                                        {selectedNFT.owner.slice(0, 8)}...{selectedNFT.owner.slice(-8)}\n                                      </span>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={() => copyToClipboard(selectedNFT.owner)}\n                                      >\n                                        <Copy className=\"h-3 w-3\" />\n                                      </Button>\n                                    </div>\n                                  </div>\n\n                                  {selectedNFT.attributes && selectedNFT.attributes.length > 0 && (\n                                    <div>\n                                      <Label className=\"text-sm font-medium\">Attributes</Label>\n                                      <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                                        {selectedNFT.attributes.map((attr, index) => (\n                                          <div key={index} className=\"bg-secondary/50 rounded p-2\">\n                                            <div className=\"text-xs text-muted-foreground\">{attr.trait_type}</div>\n                                            <div className=\"text-sm font-medium\">{attr.value}</div>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n\n                                  <div className=\"flex gap-2\">\n                                    <Button\n                                      variant=\"outline\"\n                                      onClick={() => viewInExplorer(selectedNFT.merkleTree)}\n                                      className=\"flex-1\"\n                                    >\n                                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                                      View Tree\n                                    </Button>\n                                    <Button\n                                      variant=\"outline\"\n                                      onClick={() => copyToClipboard(selectedNFT.uri)}\n                                      className=\"flex-1\"\n                                    >\n                                      <Copy className=\"h-4 w-4 mr-2\" />\n                                      Copy URI\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </DialogContent>\n                        </Dialog>\n\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => viewInExplorer(nft.merkleTree)}\n                        >\n                          <ExternalLink className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  // Render mint tab\n  const renderMintTab = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Plus className=\"h-5 w-5\" />\n          Mint Compressed NFT\n        </CardTitle>\n        <CardDescription>\n          Create a new compressed NFT with custom metadata\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...mintForm}>\n          <form onSubmit={mintForm.handleSubmit(mintCNFT)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={mintForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter NFT name\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={mintForm.control}\n                name=\"symbol\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Symbol</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"NFT\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={mintForm.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter NFT description\"\n                      {...field}\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={mintForm.control}\n              name=\"uri\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Metadata URI</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"https://example.com/metadata.json\"\n                      {...field}\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={mintForm.control}\n              name=\"merkleTree\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Merkle Tree Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter merkle tree address\"\n                      {...field}\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Collection Settings */}\n            <div className=\"space-y-4 border rounded-lg p-4\">\n              <FormField\n                control={mintForm.control}\n                name=\"useExistingCollection\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <Label>Use Existing Collection</Label>\n                  </FormItem>\n                )}\n              />\n\n              {mintForm.watch(\"useExistingCollection\") && (\n                <FormField\n                  control={mintForm.control}\n                  name=\"collection\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Collection Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter collection mint address\"\n                          {...field}\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            {/* Attributes */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Attributes</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addAttribute}\n                  disabled={isLoading}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Attribute\n                </Button>\n              </div>\n\n              {mintForm.watch(\"attributes\").map((_, index) => (\n                <div key={index} className=\"grid grid-cols-12 gap-2 items-end\">\n                  <div className=\"col-span-5\">\n                    <FormField\n                      control={mintForm.control}\n                      name={`attributes.${index}.trait_type`}\n                      render={({ field }) => (\n                        <FormItem>\n                          {index === 0 && <FormLabel>Trait Type</FormLabel>}\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Color\"\n                              {...field}\n                              disabled={isLoading}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"col-span-6\">\n                    <FormField\n                      control={mintForm.control}\n                      name={`attributes.${index}.value`}\n                      render={({ field }) => (\n                        <FormItem>\n                          {index === 0 && <FormLabel>Value</FormLabel>}\n                          <FormControl>\n                            <Input\n                              placeholder=\"e.g., Blue\"\n                              {...field}\n                              disabled={isLoading}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"col-span-1\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeAttribute(index)}\n                      disabled={mintForm.watch(\"attributes\").length === 1 || isLoading}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span>Network</span>\n                  <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                    {network}\n                  </Badge>\n                </div>\n                {connected && publicKey && (\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span>Wallet</span>\n                    <span className=\"font-mono text-xs\">\n                      {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"pt-2\">\n                {!connected ? (\n                  <ConnectWalletButton className=\"w-full\" />\n                ) : (\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Minting...\n                      </>\n                    ) : (\n                      <>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Mint Compressed NFT\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n\n  // Render trees tab\n  const renderTreesTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TreePine className=\"h-5 w-5\" />\n            Create Merkle Tree\n          </CardTitle>\n          <CardDescription>\n            Create a new merkle tree for compressed NFT storage\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...treeForm}>\n            <form onSubmit={treeForm.handleSubmit(createMerkleTree)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={treeForm.control}\n                  name=\"maxDepth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Depth</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"3\"\n                          max=\"30\"\n                          placeholder=\"14\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Tree depth (3-30). Higher = more capacity\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={treeForm.control}\n                  name=\"maxBufferSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Buffer Size</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"8\"\n                          max=\"2048\"\n                          placeholder=\"64\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Buffer size (8-2048). Higher = more concurrent ops\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={treeForm.control}\n                  name=\"canopyDepth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Canopy Depth</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"17\"\n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Canopy depth (0-17). Higher = cheaper operations\n                      </p>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Creating a merkle tree requires SOL for rent. Higher depths and buffer sizes cost more but allow for more NFTs and concurrent operations.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4\">\n                <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span>Estimated Capacity</span>\n                    <span className=\"font-medium\">\n                      {Math.pow(2, treeForm.watch(\"maxDepth\") || 14).toLocaleString()} NFTs\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span>Network</span>\n                    <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                      {network}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"pt-2\">\n                  {!connected ? (\n                    <ConnectWalletButton className=\"w-full\" />\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      className=\"w-full\"\n                    >\n                      {isLoading ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating Tree...\n                        </>\n                      ) : (\n                        <>\n                          <TreePine className=\"mr-2 h-4 w-4\" />\n                          Create Merkle Tree\n                        </>\n                      )}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Tree Info */}\n      {merkleTree && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              Merkle Tree Created\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Tree Address</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-mono\">\n                      {merkleTree.address.slice(0, 8)}...{merkleTree.address.slice(-8)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(merkleTree.address)}\n                    >\n                      <Copy className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Authority</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-mono\">\n                      {merkleTree.authority.slice(0, 8)}...{merkleTree.authority.slice(-8)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(merkleTree.authority)}\n                    >\n                      <Copy className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-4 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Max Depth</Label>\n                  <p className=\"text-sm\">{merkleTree.maxDepth}</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Buffer Size</Label>\n                  <p className=\"text-sm\">{merkleTree.maxBufferSize}</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Canopy Depth</Label>\n                  <p className=\"text-sm\">{merkleTree.canopyDepth}</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Capacity</Label>\n                  <p className=\"text-sm\">{merkleTree.totalCapacity.toLocaleString()}</p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Total Minted</Label>\n                  <p className=\"text-sm\">{merkleTree.totalMinted.toLocaleString()}</p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium\">Usage</Label>\n                  <p className=\"text-sm\">\n                    {((merkleTree.totalMinted / merkleTree.totalCapacity) * 100).toFixed(2)}%\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 pt-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => viewInExplorer(merkleTree.address)}\n                  className=\"flex-1\"\n                >\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  View in Explorer\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => copyToClipboard(merkleTree.address)}\n                  className=\"flex-1\"\n                >\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copy Address\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  // Render manage tab\n  const renderManageTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            CNFT Management Tools\n          </CardTitle>\n          <CardDescription>\n            Advanced tools for managing your compressed NFTs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\n              <Send className=\"h-6 w-6\" />\n              <span>Transfer CNFTs</span>\n              <span className=\"text-xs text-muted-foreground\">Transfer compressed NFTs to other wallets</span>\n            </Button>\n\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\n              <Edit className=\"h-6 w-6\" />\n              <span>Update Metadata</span>\n              <span className=\"text-xs text-muted-foreground\">Update CNFT metadata and attributes</span>\n            </Button>\n\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\n              <Trash2 className=\"h-6 w-6\" />\n              <span>Burn CNFTs</span>\n              <span className=\"text-xs text-muted-foreground\">Permanently destroy compressed NFTs</span>\n            </Button>\n\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\" disabled>\n              <ArrowUpDown className=\"h-6 w-6\" />\n              <span>Batch Operations</span>\n              <span className=\"text-xs text-muted-foreground\">Perform bulk operations on multiple CNFTs</span>\n            </Button>\n          </div>\n\n          <Alert className=\"mt-4\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Advanced management features are coming soon. These tools will provide comprehensive CNFT management capabilities.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  // Render collections tab\n  const renderCollectionsTab = () => (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Plus className=\"h-5 w-5\" />\n            CNFT Collections\n          </CardTitle>\n          <CardDescription>\n            Manage your compressed NFT collections\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              Collection management features are in development. This will include collection creation, metadata management, and analytics.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Improved CNFT Manager</CardTitle>\n          <CardDescription>\n            Comprehensive compressed NFT management platform\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TreePine className=\"h-6 w-6\" />\n              Improved CNFT Manager\n            </CardTitle>\n            <CardDescription>\n              Comprehensive compressed NFT management platform\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {connected && publicKey && (\n              <Badge variant=\"outline\">\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n              </Badge>\n            )}\n            <Badge variant=\"outline\">{network}</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as ActiveTab)}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"view\" className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              View\n            </TabsTrigger>\n            <TabsTrigger value=\"mint\" className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Mint\n            </TabsTrigger>\n            <TabsTrigger value=\"trees\" className=\"flex items-center gap-2\">\n              <TreePine className=\"h-4 w-4\" />\n              Trees\n            </TabsTrigger>\n            <TabsTrigger value=\"manage\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Manage\n            </TabsTrigger>\n            <TabsTrigger value=\"collections\" className=\"flex items-center gap-2\">\n              <TreePine className=\"h-4 w-4\" />\n              Collections\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"mt-6\">\n            <TabsContent value=\"view\" className=\"space-y-4\">\n              {renderViewTab()}\n            </TabsContent>\n\n            <TabsContent value=\"mint\" className=\"space-y-4\">\n              {renderMintTab()}\n            </TabsContent>\n\n            <TabsContent value=\"trees\" className=\"space-y-4\">\n              {renderTreesTab()}\n            </TabsContent>\n\n            <TabsContent value=\"manage\" className=\"space-y-4\">\n              {renderManageTab()}\n            </TabsContent>\n\n            <TabsContent value=\"collections\" className=\"space-y-4\">\n              {renderCollectionsTab()}\n            </TabsContent>\n          </div>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport { ImprovedCNFTManager };\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Bubblegum-v2",
    "tags": [
        "nft",
        "compressed-nft",
        "cnft",
        "manager",
        "viewer",
        "minter",
        "metaplex",
        "bubblegum",
        "solana",
        "dashboard",
        "tabs"
    ]
}