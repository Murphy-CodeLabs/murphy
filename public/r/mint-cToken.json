{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mint-cToken",
  "type": "registry:block",
  "title": "Mint cToken",
  "description": "A simple mint cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mint-cToken.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Keypair, PublicKey, Signer, Transaction, sendAndConfirmTransaction, SystemProgram } from '@solana/web3.js';\nimport { createRpc } from '@lightprotocol/stateless.js';\nimport {\n    createMint,\n    getOrCreateAssociatedTokenAccount,\n    mintTo,\n} from \"@solana/spl-token\";\nimport { createTokenPool } from '@lightprotocol/compressed-token';\nimport { \n    createMetadataAccountV3,\n    MPL_TOKEN_METADATA_PROGRAM_ID as TOKEN_METADATA_PROGRAM_ID,\n    mplTokenMetadata,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { createSignerFromKeypair, publicKey } from '@metaplex-foundation/umi';\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { web3JsRpc } from '@metaplex-foundation/umi-rpc-web3js';\nimport bs58 from \"bs58\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Upload } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\n// Form schema\nconst formSchema = z.object({\n  privateKey: z.string().min(1, \"Private key is required\"),\n  tokenName: z.string().min(1, \"Token name is required\"),\n  tokenSymbol: z.string().min(1, \"Token symbol is required\").max(10, \"Symbol must be less than 10 characters\"),\n  tokenDecimals: z.number().min(0).max(9, \"Decimals must be between 0 and 9\"),\n  tokenSupply: z.number().min(1, \"Supply must be greater than 0\"),\n  tokenDescription: z.string().optional(),\n  tokenImage: z.string().optional(),\n  tokenUri: z.string().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function MintTokenForm() {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [currentStage, setCurrentStage] = React.useState<'input' | 'success' | 'error'>('input');\n  const [error, setError] = React.useState(\"\");\n  const [isMainnet, setIsMainnet] = React.useState(false);\n  const [result, setResult] = React.useState<{\n    mint: string;\n    poolTxId: string;\n    ata: string;\n    mintToTxId: string;\n    metadataTxId: string;\n  } | null>(null);\n  const [imagePreview, setImagePreview] = React.useState<string>(\"\");\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      privateKey: \"\",\n      tokenName: \"\",\n      tokenSymbol: \"\",\n      tokenDecimals: 9,\n      tokenSupply: 1000000000,\n      tokenDescription: \"\",\n      tokenImage: \"\",\n      tokenUri: \"\",\n    },\n  });\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64String = reader.result as string;\n        setImagePreview(base64String);\n        form.setValue(\"tokenImage\", base64String);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const createMetadata = async (\n    connection: any,\n    payer: Keypair,\n    mint: PublicKey,\n    metadata: {\n      name: string;\n      symbol: string;\n      uri: string;\n    }\n  ) => {\n    const metadataProgramId = new PublicKey(TOKEN_METADATA_PROGRAM_ID);\n    const [metadataAddress] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from('metadata'),\n        metadataProgramId.toBytes(),\n        mint.toBytes(),\n      ],\n      metadataProgramId\n    );\n\n    // Create a Umi instance\n    const umi = createUmi(connection.rpcEndpoint)\n      .use(web3JsRpc(connection))\n      .use(mplTokenMetadata());\n\n    // Create a signeridentity from the payer Keypair\n    const signerIdentity = createSignerFromKeypair(umi, { \n        publicKey: publicKey(payer.publicKey.toBase58()),\n        secretKey: payer.secretKey \n    });\n    umi.use({\n        install(umiContext) {\n            umiContext.identity = signerIdentity;\n            umiContext.payer = signerIdentity;\n        }\n    });\n\n    const umiMintPublicKey = publicKey(mint.toBase58());\n    const umiMetadataPda = publicKey(metadataAddress.toBase58());\n    const umiSystemProgram = publicKey(SystemProgram.programId.toBase58());\n\n    const createMetadataInstructionBuilder = createMetadataAccountV3(\n      umi, \n      {\n        metadata: umiMetadataPda,\n        mint: umiMintPublicKey,\n        mintAuthority: signerIdentity, \n        payer: signerIdentity,          \n        updateAuthority: signerIdentity, \n        systemProgram: umiSystemProgram,\n        \n          data: {\n            name: metadata.name,\n            symbol: metadata.symbol,\n            uri: metadata.uri,\n            sellerFeeBasisPoints: 0,\n            creators: null,\n            collection: null,\n            uses: null,\n          },\n          isMutable: true,\n          collectionDetails: null,\n      }\n    );\n\n    const { signature } = await createMetadataInstructionBuilder.sendAndConfirm(umi, {\n        confirm: { commitment: 'confirmed' }\n    });\n    \n    // The signature from Umi is a Uint8Array, convert to base58 string for consistency\n    return bs58.encode(signature); \n  };\n\n  const onSubmit = async (values: FormValues) => {\n    try {\n      setIsSubmitting(true);\n      setError(\"\");\n\n      const rpcEndpoint = isMainnet \n        ? process.env.NEXT_PUBLIC_SOLANA_RPC_URL \n        : process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET;\n\n      if (!rpcEndpoint) {\n        throw new Error(\"RPC endpoint not configured\");\n      }\n\n      // Create keypair from private key\n      const PAYER = Keypair.fromSecretKey(bs58.decode(values.privateKey));\n      \n      // Create RPC connection\n      const connection = createRpc(rpcEndpoint);\n\n      // Create mint\n    const mint = await createMint(\n        connection,\n        PAYER,\n        PAYER.publicKey,\n        null,\n        values.tokenDecimals\n      );\n\n      // Create metadata\n      const metadataTxId = await createMetadata(\n        connection,\n        PAYER,\n        mint,\n        {\n          name: values.tokenName,\n          symbol: values.tokenSymbol,\n          uri: values.tokenUri || \"\",\n        }\n      );\n\n      // Register mint for compression\n    const poolTxId = await createTokenPool(connection, PAYER, mint);\n\n      // Create associated token account\n    const ata = await getOrCreateAssociatedTokenAccount(\n        connection,\n        PAYER,\n        mint,\n        PAYER.publicKey\n    );\n\n      // Calculate supply with decimals\n      const supply = values.tokenSupply * Math.pow(10, values.tokenDecimals);\n\n      // Mint tokens\n    const mintToTxId = await mintTo(\n        connection,\n        PAYER,\n        mint,\n        ata.address,\n        PAYER.publicKey,\n        supply\n      );\n\n      setResult({\n        mint: mint.toBase58(),\n        poolTxId,\n        ata: ata.address.toBase58(),\n        mintToTxId,\n        metadataTxId,\n      });\n      setCurrentStage('success');\n    } catch (err) {\n      console.error(err);\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n      setCurrentStage('error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n    setImagePreview(\"\");\n  };\n\n  // Add helper function to handle long text\n  const truncateText = (text: string, maxLength: number = 20) => {\n    if (text.length <= maxLength) return text;\n    return `${text.slice(0, maxLength)}...`;\n  };\n\n  // Add helper function to copy text\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  // Add helper function to create Solscan link\n  const getSolscanUrl = (type: 'tx' | 'token' | 'account', id: string) => {\n    const cluster = isMainnet ? '' : '?cluster=devnet';\n    return `https://solscan.io/${type}/${id}${cluster}`;\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4\">\n      <div className=\"bg-secondary/50 rounded-lg p-4\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Field</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Value</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Token Name</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"tokenName\")}</td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(form.getValues(\"tokenName\"))}\n                  >\n                    Copy\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Token Symbol</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"tokenSymbol\")}</td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(form.getValues(\"tokenSymbol\"))}\n                  >\n                    Copy\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Mint Address</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.mint || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.mint || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('token', result?.mint || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Pool Transaction</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.poolTxId || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.poolTxId || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('tx', result?.poolTxId || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Token Account</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.ata || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.ata || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('account', result?.ata || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Mint Transaction</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.mintToTxId || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.mintToTxId || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('tx', result?.mintToTxId || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Metadata Transaction</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.metadataTxId || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.metadataTxId || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('tx', result?.metadataTxId || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <Button onClick={resetForm} className=\"flex-1\">\n          Create Another Token\n        </Button>\n        <Button \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={() => {\n            const data = {\n              tokenName: form.getValues(\"tokenName\"),\n              tokenSymbol: form.getValues(\"tokenSymbol\"),\n              mintAddress: result?.mint,\n              poolTxId: result?.poolTxId,\n              tokenAccount: result?.ata,\n              mintTxId: result?.mintToTxId,\n              metadataTxId: result?.metadataTxId,\n            };\n            navigator.clipboard.writeText(JSON.stringify(data, null, 2));\n          }}\n        >\n          Copy All Data\n        </Button>\n      </div>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4\">\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\n        {error}\n      </div>\n      <Button onClick={resetForm} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render input form\n  const renderInputForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"network-switch\">Network</Label>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Devnet</span>\n              <Switch\n                id=\"network-switch\"\n                checked={isMainnet}\n                onCheckedChange={setIsMainnet}\n                disabled={isSubmitting}\n              />\n              <span className=\"text-sm text-muted-foreground\">Mainnet</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Select network to create token on\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"tokenName\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Token Name</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter token name\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"tokenSymbol\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Token Symbol</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter token symbol\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"tokenDecimals\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Decimals</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"9\"\n                    placeholder=\"Enter decimals\"\n                    {...field}\n                    onChange={(e) => field.onChange(Number(e.target.value))}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"tokenSupply\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Total Supply</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    placeholder=\"Enter total supply\"\n                    {...field}\n                    onChange={(e) => field.onChange(Number(e.target.value))}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"tokenDescription\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Enter token description\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"tokenImage\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Token Image</FormLabel>\n              <FormControl>\n                <div className=\"flex items-center gap-4\">\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageChange}\n                    disabled={isSubmitting}\n                    className=\"hidden\"\n                    id=\"token-image\"\n                  />\n                  <label\n                    htmlFor=\"token-image\"\n                    className=\"flex items-center gap-2 cursor-pointer bg-background px-4 py-2 rounded-md hover:bg-accent\"\n                  >\n                    <Upload className=\"h-4 w-4\" />\n                    <span>Upload Image</span>\n                  </label>\n                  {imagePreview && (\n                    <img\n                      src={imagePreview}\n                      alt=\"Token preview\"\n                      className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                  )}\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"tokenUri\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Token URI</FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter token URI\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"privateKey\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Private Key</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Enter your private key\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <div className=\"mt-2 px-2 py-1.5 text-sm bg-yellow-100/20 border border-yellow-400/50 text-yellow-600 dark:text-yellow-400 rounded-md\">\n                ⚠️ <strong>Warning:</strong> Do not use your main wallet containing large amounts of money. Create a new wallet or use a separate wallet for this purpose to ensure asset safety.\n              </div>\n            </FormItem>\n          )}\n        />\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isSubmitting}\n        >\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              Creating Token on {isMainnet ? \"Mainnet\" : \"Devnet\"}...\n            </>\n          ) : (\n            `Create Token on ${isMainnet ? \"Mainnet\" : \"Devnet\"}`\n          )}\n        </Button>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      default:\n        return renderInputForm();\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>Create Compressed Token</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/mint-cToken.tsx"
    }
  ]
}