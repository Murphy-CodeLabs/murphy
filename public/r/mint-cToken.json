{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mint-cToken",
  "type": "registry:block",
  "title": "Mint cToken",
  "description": "A simple mint cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mint-cToken.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Keypair, PublicKey, Signer, Transaction, sendAndConfirmTransaction, SystemProgram } from '@solana/web3.js';\r\nimport { createRpc } from '@lightprotocol/stateless.js';\r\nimport {\r\n    createMint,\r\n    getOrCreateAssociatedTokenAccount,\r\n    mintTo,\r\n} from \"@solana/spl-token\";\r\nimport { createTokenPool } from '@lightprotocol/compressed-token';\r\nimport { \r\n    createMetadataAccountV3,\r\n    MPL_TOKEN_METADATA_PROGRAM_ID as TOKEN_METADATA_PROGRAM_ID,\r\n    mplTokenMetadata,\r\n} from '@metaplex-foundation/mpl-token-metadata';\r\nimport { createSignerFromKeypair, publicKey } from '@metaplex-foundation/umi';\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { web3JsRpc } from '@metaplex-foundation/umi-rpc-web3js';\r\nimport bs58 from \"bs58\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\n\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Loader2, Upload } from \"lucide-react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\n// Form schema\r\nconst formSchema = z.object({\r\n  privateKey: z.string().min(1, \"Private key is required\"),\r\n  tokenName: z.string().min(1, \"Token name is required\"),\r\n  tokenSymbol: z.string().min(1, \"Token symbol is required\").max(10, \"Symbol must be less than 10 characters\"),\r\n  tokenDecimals: z.number().min(0).max(9, \"Decimals must be between 0 and 9\"),\r\n  tokenSupply: z.number().min(1, \"Supply must be greater than 0\"),\r\n  tokenDescription: z.string().optional(),\r\n  tokenImage: z.string().optional(),\r\n  tokenUri: z.string().optional(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nexport function MintTokenForm() {\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n  const [currentStage, setCurrentStage] = React.useState<'input' | 'success' | 'error'>('input');\r\n  const [error, setError] = React.useState(\"\");\r\n  const [isMainnet, setIsMainnet] = React.useState(false);\r\n  const [result, setResult] = React.useState<{\r\n    mint: string;\r\n    poolTxId: string;\r\n    ata: string;\r\n    mintToTxId: string;\r\n    metadataTxId: string;\r\n  } | null>(null);\r\n  const [imagePreview, setImagePreview] = React.useState<string>(\"\");\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      privateKey: \"\",\r\n      tokenName: \"\",\r\n      tokenSymbol: \"\",\r\n      tokenDecimals: 9,\r\n      tokenSupply: 1000000000,\r\n      tokenDescription: \"\",\r\n      tokenImage: \"\",\r\n      tokenUri: \"\",\r\n    },\r\n  });\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const base64String = reader.result as string;\r\n        setImagePreview(base64String);\r\n        form.setValue(\"tokenImage\", base64String);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const createMetadata = async (\r\n    connection: any,\r\n    payer: Keypair,\r\n    mint: PublicKey,\r\n    metadata: {\r\n      name: string;\r\n      symbol: string;\r\n      uri: string;\r\n    }\r\n  ) => {\r\n    const metadataProgramId = new PublicKey(TOKEN_METADATA_PROGRAM_ID);\r\n    const [metadataAddress] = PublicKey.findProgramAddressSync(\r\n      [\r\n        Buffer.from('metadata'),\r\n        metadataProgramId.toBytes(),\r\n        mint.toBytes(),\r\n      ],\r\n      metadataProgramId\r\n    );\r\n\r\n    // Create a Umi instance\r\n    const umi = createUmi(connection.rpcEndpoint)\r\n      .use(web3JsRpc(connection))\r\n      .use(mplTokenMetadata());\r\n\r\n    // Create a signeridentity from the payer Keypair\r\n    const signerIdentity = createSignerFromKeypair(umi, { \r\n        publicKey: publicKey(payer.publicKey.toBase58()),\r\n        secretKey: payer.secretKey \r\n    });\r\n    umi.use({\r\n        install(umiContext) {\r\n            umiContext.identity = signerIdentity;\r\n            umiContext.payer = signerIdentity;\r\n        }\r\n    });\r\n\r\n    const umiMintPublicKey = publicKey(mint.toBase58());\r\n    const umiMetadataPda = publicKey(metadataAddress.toBase58());\r\n    const umiSystemProgram = publicKey(SystemProgram.programId.toBase58());\r\n\r\n    const createMetadataInstructionBuilder = createMetadataAccountV3(\r\n      umi, \r\n      {\r\n        metadata: umiMetadataPda,\r\n        mint: umiMintPublicKey,\r\n        mintAuthority: signerIdentity, \r\n        payer: signerIdentity,          \r\n        updateAuthority: signerIdentity, \r\n        systemProgram: umiSystemProgram,\r\n        \r\n          data: {\r\n            name: metadata.name,\r\n            symbol: metadata.symbol,\r\n            uri: metadata.uri,\r\n            sellerFeeBasisPoints: 0,\r\n            creators: null,\r\n            collection: null,\r\n            uses: null,\r\n          },\r\n          isMutable: true,\r\n          collectionDetails: null,\r\n      }\r\n    );\r\n\r\n    const { signature } = await createMetadataInstructionBuilder.sendAndConfirm(umi, {\r\n        confirm: { commitment: 'confirmed' }\r\n    });\r\n    \r\n    // The signature from Umi is a Uint8Array, convert to base58 string for consistency\r\n    return bs58.encode(signature); \r\n  };\r\n\r\n  const onSubmit = async (values: FormValues) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(\"\");\r\n\r\n      const rpcEndpoint = isMainnet \r\n        ? process.env.NEXT_PUBLIC_SOLANA_RPC_URL \r\n        : process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET;\r\n\r\n      if (!rpcEndpoint) {\r\n        throw new Error(\"RPC endpoint not configured\");\r\n      }\r\n\r\n      // Create keypair from private key\r\n      const PAYER = Keypair.fromSecretKey(bs58.decode(values.privateKey));\r\n      \r\n      // Create RPC connection\r\n      const connection = createRpc(rpcEndpoint);\r\n\r\n      // Create mint\r\n    const mint = await createMint(\r\n        connection,\r\n        PAYER,\r\n        PAYER.publicKey,\r\n        null,\r\n        values.tokenDecimals\r\n      );\r\n\r\n      // Create metadata\r\n      const metadataTxId = await createMetadata(\r\n        connection,\r\n        PAYER,\r\n        mint,\r\n        {\r\n          name: values.tokenName,\r\n          symbol: values.tokenSymbol,\r\n          uri: values.tokenUri || \"\",\r\n        }\r\n      );\r\n\r\n      // Register mint for compression\r\n    const poolTxId = await createTokenPool(connection, PAYER, mint);\r\n\r\n      // Create associated token account\r\n    const ata = await getOrCreateAssociatedTokenAccount(\r\n        connection,\r\n        PAYER,\r\n        mint,\r\n        PAYER.publicKey\r\n    );\r\n\r\n      // Calculate supply with decimals\r\n      const supply = values.tokenSupply * Math.pow(10, values.tokenDecimals);\r\n\r\n      // Mint tokens\r\n    const mintToTxId = await mintTo(\r\n        connection,\r\n        PAYER,\r\n        mint,\r\n        ata.address,\r\n        PAYER.publicKey,\r\n        supply\r\n      );\r\n\r\n      setResult({\r\n        mint: mint.toBase58(),\r\n        poolTxId,\r\n        ata: ata.address.toBase58(),\r\n        mintToTxId,\r\n        metadataTxId,\r\n      });\r\n      setCurrentStage('success');\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError(err instanceof Error ? err.message : \"An error occurred\");\r\n      setCurrentStage('error');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage(\"input\");\r\n    setError(\"\");\r\n    setImagePreview(\"\");\r\n  };\r\n\r\n  // Add helper function to handle long text\r\n  const truncateText = (text: string, maxLength: number = 20) => {\r\n    if (text.length <= maxLength) return text;\r\n    return `${text.slice(0, maxLength)}...`;\r\n  };\r\n\r\n  // Add helper function to copy text\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n  };\r\n\r\n  // Add helper function to create Solscan link\r\n  const getSolscanUrl = (type: 'tx' | 'token' | 'account', id: string) => {\r\n    const cluster = isMainnet ? '' : '?cluster=devnet';\r\n    return `https://solscan.io/${type}/${id}${cluster}`;\r\n  };\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"w-full\">\r\n            <thead>\r\n              <tr className=\"border-b border-border\">\r\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Field</th>\r\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Value</th>\r\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Token Name</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"tokenName\")}</td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(form.getValues(\"tokenName\"))}\r\n                  >\r\n                    Copy\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Token Symbol</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"tokenSymbol\")}</td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(form.getValues(\"tokenSymbol\"))}\r\n                  >\r\n                    Copy\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Mint Address</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span>{truncateText(result?.mint || \"\")}</span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(result?.mint || \"\")}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(getSolscanUrl('token', result?.mint || \"\"), '_blank')}\r\n                  >\r\n                    View\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Pool Transaction</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span>{truncateText(result?.poolTxId || \"\")}</span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(result?.poolTxId || \"\")}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(getSolscanUrl('tx', result?.poolTxId || \"\"), '_blank')}\r\n                  >\r\n                    View\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Token Account</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span>{truncateText(result?.ata || \"\")}</span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(result?.ata || \"\")}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(getSolscanUrl('account', result?.ata || \"\"), '_blank')}\r\n                  >\r\n                    View\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Mint Transaction</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span>{truncateText(result?.mintToTxId || \"\")}</span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(result?.mintToTxId || \"\")}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(getSolscanUrl('tx', result?.mintToTxId || \"\"), '_blank')}\r\n                  >\r\n                    View\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"border-b border-border/50\">\r\n                <td className=\"py-3 px-4 text-sm\">Metadata Transaction</td>\r\n                <td className=\"py-3 px-4 text-sm font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span>{truncateText(result?.metadataTxId || \"\")}</span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(result?.metadataTxId || \"\")}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n                <td className=\"py-3 px-4 text-sm text-right\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => window.open(getSolscanUrl('tx', result?.metadataTxId || \"\"), '_blank')}\r\n                  >\r\n                    View\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex gap-4\">\r\n        <Button onClick={resetForm} className=\"flex-1\">\r\n          Create Another Token\r\n        </Button>\r\n        <Button \r\n          variant=\"outline\" \r\n          className=\"flex-1\"\r\n          onClick={() => {\r\n            const data = {\r\n              tokenName: form.getValues(\"tokenName\"),\r\n              tokenSymbol: form.getValues(\"tokenSymbol\"),\r\n              mintAddress: result?.mint,\r\n              poolTxId: result?.poolTxId,\r\n              tokenAccount: result?.ata,\r\n              mintTxId: result?.mintToTxId,\r\n              metadataTxId: result?.metadataTxId,\r\n            };\r\n            navigator.clipboard.writeText(JSON.stringify(data, null, 2));\r\n          }}\r\n        >\r\n          Copy All Data\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n        {error}\r\n      </div>\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render input form\r\n  const renderInputForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Label htmlFor=\"network-switch\">Network</Label>\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"text-sm text-muted-foreground\">Devnet</span>\r\n              <Switch\r\n                id=\"network-switch\"\r\n                checked={isMainnet}\r\n                onCheckedChange={setIsMainnet}\r\n                disabled={isSubmitting}\r\n              />\r\n              <span className=\"text-sm text-muted-foreground\">Mainnet</span>\r\n            </div>\r\n          </div>\r\n          <p className=\"text-xs text-muted-foreground mt-1\">\r\n            Select network to create token on\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"tokenName\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Token Name</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter token name\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"tokenSymbol\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Token Symbol</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter token symbol\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"tokenDecimals\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Decimals</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"9\"\r\n                    placeholder=\"Enter decimals\"\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(Number(e.target.value))}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"tokenSupply\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Total Supply</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    placeholder=\"Enter total supply\"\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(Number(e.target.value))}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"tokenDescription\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <FormLabel>Description</FormLabel>\r\n              <FormControl>\r\n                <Textarea\r\n                  placeholder=\"Enter token description\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"tokenImage\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <FormLabel>Token Image</FormLabel>\r\n              <FormControl>\r\n                <div className=\"flex items-center gap-4\">\r\n                  <Input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleImageChange}\r\n                    disabled={isSubmitting}\r\n                    className=\"hidden\"\r\n                    id=\"token-image\"\r\n                  />\r\n                  <label\r\n                    htmlFor=\"token-image\"\r\n                    className=\"flex items-center gap-2 cursor-pointer bg-background px-4 py-2 rounded-md hover:bg-accent\"\r\n                  >\r\n                    <Upload className=\"h-4 w-4\" />\r\n                    <span>Upload Image</span>\r\n                  </label>\r\n                  {imagePreview && (\r\n                    <img\r\n                      src={imagePreview}\r\n                      alt=\"Token preview\"\r\n                      className=\"w-12 h-12 rounded-full object-cover\"\r\n                    />\r\n                  )}\r\n                </div>\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"tokenUri\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <FormLabel>Token URI</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter token URI\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"privateKey\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <FormLabel>Private Key</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your private key\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <div className=\"mt-2 px-2 py-1.5 text-sm bg-yellow-100/20 border border-yellow-400/50 text-yellow-600 dark:text-yellow-400 rounded-md\">\r\n                ⚠️ <strong>Warning:</strong> Do not use your main wallet containing large amounts of money. Create a new wallet or use a separate wallet for this purpose to ensure asset safety.\r\n              </div>\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"w-full\"\r\n          disabled={isSubmitting}\r\n        >\r\n          {isSubmitting ? (\r\n            <>\r\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n              Creating Token on {isMainnet ? \"Mainnet\" : \"Devnet\"}...\r\n            </>\r\n          ) : (\r\n            `Create Token on ${isMainnet ? \"Mainnet\" : \"Devnet\"}`\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render based on current stage\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      default:\r\n        return renderInputForm();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle>Create Compressed Token</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/mint-cToken.tsx"
    }
  ]
}