{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "buildCurveAndCreateConfigByMarketCap-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config by Market Cap Form",
  "description": "A simple build curve and create config by market cap form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "meteora-dbc"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/buildCurveAndCreateConfigByMarketCap-form.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\r\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { DynamicBondingCurveClient } from \"@meteora-ag/dynamic-bonding-curve-sdk\";\r\nimport BN from \"bn.js\";\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\nenum FeeSchedulerMode {\r\n  Linear = 0,\r\n}\r\n\r\ninterface BuildCurveResult {\r\n  config: string;\r\n  signature: string;\r\n}\r\n\r\ntype FormValues = {\r\n  // Các tham số của buildCurveByMarketCapParam\r\n  totalTokenSupply: number;\r\n  initialMarketCap: number;\r\n  migrationMarketCap: number;\r\n  migrationOption: number;\r\n  tokenBaseDecimal: number;\r\n  tokenQuoteDecimal: number;\r\n\r\n  // Tham số của feeSchedulerParam\r\n  numberOfPeriod: number;\r\n  reductionFactor: number;\r\n  periodFrequency: number;\r\n  feeSchedulerMode: number;\r\n\r\n  // Các thông số khác\r\n  baseFeeBps: number;\r\n  dynamicFeeEnabled: boolean;\r\n  activationType: number;\r\n  collectFeeMode: number;\r\n  migrationFeeOption: number;\r\n  tokenType: number;\r\n\r\n  // Phân phối LP\r\n  partnerLpPercentage: number;\r\n  creatorLpPercentage: number;\r\n  partnerLockedLpPercentage: number;\r\n  creatorLockedLpPercentage: number;\r\n\r\n  // Địa chỉ\r\n  feeClaimer: string;\r\n  leftoverReceiver: string;\r\n  quoteMint: string;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate totalTokenSupply\r\n  if (!data.totalTokenSupply) {\r\n    errors.totalTokenSupply = {\r\n      type: \"required\",\r\n      message: \"Total token supply is required\",\r\n    };\r\n  } else if (data.totalTokenSupply <= 0) {\r\n    errors.totalTokenSupply = {\r\n      type: \"min\",\r\n      message: \"Total token supply must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate initialMarketCap\r\n  if (!data.initialMarketCap) {\r\n    errors.initialMarketCap = {\r\n      type: \"required\",\r\n      message: \"Initial market cap is required\",\r\n    };\r\n  } else if (data.initialMarketCap <= 0) {\r\n    errors.initialMarketCap = {\r\n      type: \"min\",\r\n      message: \"Initial market cap must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate migrationMarketCap\r\n  if (!data.migrationMarketCap) {\r\n    errors.migrationMarketCap = {\r\n      type: \"required\",\r\n      message: \"Migration market cap is required\",\r\n    };\r\n  } else if (data.migrationMarketCap <= 0) {\r\n    errors.migrationMarketCap = {\r\n      type: \"min\",\r\n      message: \"Migration market cap must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate tokenBaseDecimal\r\n  if (data.tokenBaseDecimal === undefined || data.tokenBaseDecimal === null) {\r\n    errors.tokenBaseDecimal = {\r\n      type: \"required\",\r\n      message: \"Token base decimal is required\",\r\n    };\r\n  } else if (data.tokenBaseDecimal < 0 || data.tokenBaseDecimal > 18) {\r\n    errors.tokenBaseDecimal = {\r\n      type: \"range\",\r\n      message: \"Token base decimal must be between 0 and 18\",\r\n    };\r\n  }\r\n\r\n  // Validate tokenQuoteDecimal\r\n  if (data.tokenQuoteDecimal === undefined || data.tokenQuoteDecimal === null) {\r\n    errors.tokenQuoteDecimal = {\r\n      type: \"required\",\r\n      message: \"Token quote decimal is required\",\r\n    };\r\n  } else if (data.tokenQuoteDecimal < 0 || data.tokenQuoteDecimal > 18) {\r\n    errors.tokenQuoteDecimal = {\r\n      type: \"range\",\r\n      message: \"Token quote decimal must be between 0 and 18\",\r\n    };\r\n  }\r\n\r\n  // Validate address fields\r\n  const validateAddress = (field: string, name: string) => {\r\n    if (!data[field]) {\r\n      errors[field] = {\r\n        type: \"required\",\r\n        message: `${name} is required`,\r\n      };\r\n    } else {\r\n      try {\r\n        new PublicKey(data[field]);\r\n      } catch (e) {\r\n        errors[field] = {\r\n          type: \"invalid\",\r\n          message: \"Invalid Solana address\",\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  validateAddress(\"feeClaimer\", \"Fee claimer address\");\r\n  validateAddress(\"leftoverReceiver\", \"Leftover receiver address\");\r\n  validateAddress(\"quoteMint\", \"Quote mint address\");\r\n\r\n  // Validate LP percentages\r\n  const validatePercentage = (field: string, name: string) => {\r\n    if (\r\n      data[field] === undefined ||\r\n      data[field] === null ||\r\n      data[field] === \"\"\r\n    ) {\r\n      errors[field] = {\r\n        type: \"required\",\r\n        message: `${name} is required`,\r\n      };\r\n    } else if (Number(data[field]) < 0 || Number(data[field]) > 100) {\r\n      errors[field] = {\r\n        type: \"range\",\r\n        message: `${name} must be between 0 and 100%`,\r\n      };\r\n    }\r\n  };\r\n\r\n  validatePercentage(\"partnerLpPercentage\", \"Partner LP percentage\");\r\n  validatePercentage(\"creatorLpPercentage\", \"Creator LP percentage\");\r\n  validatePercentage(\r\n    \"partnerLockedLpPercentage\",\r\n    \"Partner locked LP percentage\"\r\n  );\r\n  validatePercentage(\r\n    \"creatorLockedLpPercentage\",\r\n    \"Creator locked LP percentage\"\r\n  );\r\n\r\n  // Validate that percentages sum to 100\r\n  const totalPercentage =\r\n    Number(data.partnerLpPercentage || 0) +\r\n    Number(data.creatorLpPercentage || 0) +\r\n    Number(data.partnerLockedLpPercentage || 0) +\r\n    Number(data.creatorLockedLpPercentage || 0);\r\n\r\n  if (totalPercentage !== 100) {\r\n    errors.partnerLpPercentage = {\r\n      type: \"validate\",\r\n      message: \"Total LP percentage must be 100%\",\r\n    };\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default function BuildCurveAndCreateConfigByMarketCapForm({\r\n  onConfigCreated,\r\n}: {\r\n  onConfigCreated?: (configAddress: string) => void;\r\n}) {\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet } = useWallet();\r\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [result, setResult] = useState<BuildCurveResult | null>(null);\r\n  const [currentStage, setCurrentStage] = useState<\r\n    \"input\" | \"confirming\" | \"success\" | \"error\"\r\n  >(\"input\");\r\n  const [error, setError] = useState(\"\");\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState(\"devnet\");\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<FormValues>({\r\n    defaultValues: {\r\n      totalTokenSupply: 1000000000,\r\n      initialMarketCap: 98,\r\n      migrationMarketCap: 3200,\r\n      migrationOption: 0,\r\n      tokenBaseDecimal: 9,\r\n      tokenQuoteDecimal: 9,\r\n\r\n      numberOfPeriod: 0,\r\n      reductionFactor: 0,\r\n      periodFrequency: 0,\r\n      feeSchedulerMode: FeeSchedulerMode.Linear,\r\n\r\n      baseFeeBps: 2500000,\r\n      dynamicFeeEnabled: false,\r\n      activationType: 0,\r\n      collectFeeMode: 0,\r\n      migrationFeeOption: 0,\r\n      tokenType: 0,\r\n\r\n      partnerLpPercentage: 25,\r\n      creatorLpPercentage: 25,\r\n      partnerLockedLpPercentage: 25,\r\n      creatorLockedLpPercentage: 25,\r\n\r\n      feeClaimer: \"\",\r\n      leftoverReceiver: \"\",\r\n      quoteMint: \"So11111111111111111111111111111111111111112\", // SOL by default\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Chỉ render sau khi component được mount trên client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Cập nhật trạng thái network khi endpoint thay đổi\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes(\"devnet\") ? \"devnet\" : \"mainnet\");\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Tự động điền địa chỉ ví khi ví kết nối\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      form.setValue(\"feeClaimer\", publicKey.toString());\r\n      form.setValue(\"leftoverReceiver\", publicKey.toString());\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  // Xử lý khi form được gửi đi\r\n  const onSubmit = async (values: FormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage(\"confirming\");\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Creating configuration...\", {\r\n        id: \"build-curve-market-cap\",\r\n      });\r\n\r\n      try {\r\n        // Khởi tạo DBC client\r\n        const client = new DynamicBondingCurveClient(connection);\r\n\r\n        // Tạo keypair mới cho config\r\n        const configKeypair = Keypair.generate();\r\n\r\n        // Tạo các tham số cho hàm buildCurveAndCreateConfigByMarketCap\r\n        const params = {\r\n          buildCurveByMarketCapParam: {\r\n            totalTokenSupply: values.totalTokenSupply,\r\n            initialMarketCap: values.initialMarketCap,\r\n            migrationMarketCap: values.migrationMarketCap,\r\n            migrationOption: values.migrationOption,\r\n            tokenBaseDecimal: values.tokenBaseDecimal,\r\n            tokenQuoteDecimal: values.tokenQuoteDecimal,\r\n            feeSchedulerParam: {\r\n              numberOfPeriod: values.numberOfPeriod,\r\n              reductionFactor: values.reductionFactor,\r\n              periodFrequency: values.periodFrequency,\r\n              feeSchedulerMode: values.feeSchedulerMode,\r\n            },\r\n            baseFeeBps: values.baseFeeBps,\r\n            dynamicFeeEnabled: values.dynamicFeeEnabled,\r\n            activationType: values.activationType,\r\n            collectFeeMode: values.collectFeeMode,\r\n            migrationFeeOption: values.migrationFeeOption,\r\n            tokenType: values.tokenType,\r\n            lockedVesting: {\r\n              amountPerPeriod: new BN(\"0\"),\r\n              cliffDurationFromMigrationTime: new BN(\"0\"),\r\n              frequency: new BN(\"0\"),\r\n              numberOfPeriod: new BN(\"0\"),\r\n              cliffUnlockAmount: new BN(\"0\"),\r\n            },\r\n            partnerLpPercentage: values.partnerLpPercentage,\r\n            creatorLpPercentage: values.creatorLpPercentage,\r\n            partnerLockedLpPercentage: values.partnerLockedLpPercentage,\r\n            creatorLockedLpPercentage: values.creatorLockedLpPercentage,\r\n          },\r\n          feeClaimer: new PublicKey(values.feeClaimer),\r\n          leftoverReceiver: new PublicKey(values.leftoverReceiver),\r\n          payer: publicKey,\r\n          quoteMint: new PublicKey(values.quoteMint),\r\n          config: configKeypair.publicKey,\r\n        };\r\n\r\n        // Tạo transaction\r\n        const transaction =\r\n          await client.partners.buildCurveAndCreateConfigByMarketCap(params);\r\n\r\n        // Lấy blockhash gần nhất\r\n        const { blockhash, lastValidBlockHeight } =\r\n          await connection.getLatestBlockhash();\r\n        transaction.recentBlockhash = blockhash;\r\n        transaction.lastValidBlockHeight = lastValidBlockHeight;\r\n\r\n        // Đặt feePayer cho transaction\r\n        transaction.feePayer = publicKey;\r\n\r\n        // Ký giao dịch với configKeypair\r\n        transaction.partialSign(configKeypair);\r\n\r\n        // Gửi và ký giao dịch\r\n        const signature = await wallet.adapter.sendTransaction(\r\n          transaction,\r\n          connection\r\n        );\r\n\r\n        // Đợi xác nhận\r\n        await connection.confirmTransaction({\r\n          blockhash,\r\n          lastValidBlockHeight,\r\n          signature,\r\n        });\r\n\r\n        // Lưu kết quả\r\n        const configAddress = configKeypair.publicKey.toString();\r\n        setResult({\r\n          config: configAddress,\r\n          signature: signature,\r\n        });\r\n\r\n        // Gọi callback nếu được cung cấp\r\n        if (onConfigCreated) {\r\n          onConfigCreated(configAddress);\r\n        }\r\n\r\n        setCurrentStage(\"success\");\r\n\r\n        toast.success(\"Configuration created successfully!\", {\r\n          id: \"build-curve-market-cap\",\r\n          description: `Config: ${configAddress.slice(\r\n            0,\r\n            8\r\n          )}...${configAddress.slice(-8)}`,\r\n        });\r\n      } catch (transactionError: any) {\r\n        console.error(\"Transaction error: \", transactionError);\r\n        throw transactionError;\r\n      }\r\n    } catch (err: any) {\r\n      console.error(\"Error creating configuration:\", err);\r\n\r\n      setCurrentStage(\"error\");\r\n      setError(err.message || \"An unknown error occurred\");\r\n\r\n      // Kiểm tra nếu người dùng hủy/từ chối giao dịch\r\n      if (\r\n        err.message &&\r\n        (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))\r\n      ) {\r\n        toast.error(\"Transaction rejected\", {\r\n          id: \"build-curve-market-cap\",\r\n          description: \"You have rejected the transaction\",\r\n        });\r\n      } else {\r\n        toast.error(\"Cannot create configuration\", {\r\n          id: \"build-curve-market-cap\",\r\n          description: err.message,\r\n        });\r\n\r\n        // Nếu giao dịch thất bại do lỗi kết nối, thử chuyển sang RPC endpoint khác\r\n        if (\r\n          err.message?.includes(\"failed to fetch\") ||\r\n          err.message?.includes(\"timeout\") ||\r\n          err.message?.includes(\"429\") ||\r\n          err.message?.includes(\"503\")\r\n        ) {\r\n          switchToNextEndpoint();\r\n        }\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Chức năng mở explorer để xem giao dịch\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl =\r\n        network === \"devnet\"\r\n          ? \"https://explorer.solana.com/tx/\"\r\n          : \"https://solscan.io/tx/\";\r\n      window.open(\r\n        `${baseUrl}${result.signature}${\r\n          network === \"devnet\" ? \"?cluster=devnet\" : \"\"\r\n        }`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  // Chức năng mở explorer để xem cấu hình\r\n  const viewConfig = () => {\r\n    if (result?.config) {\r\n      const baseUrl =\r\n        network === \"devnet\"\r\n          ? \"https://explorer.solana.com/address/\"\r\n          : \"https://solscan.io/account/\";\r\n      window.open(\r\n        `${baseUrl}${result.config}${\r\n          network === \"devnet\" ? \"?cluster=devnet\" : \"\"\r\n        }`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage(\"input\");\r\n    setError(\"\");\r\n  };\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Market parameters</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"totalTokenSupply\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Total token supply</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"1000000000\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"initialMarketCap\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Initial market cap</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"98\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"migrationMarketCap\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Migration market cap</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"3200\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"migrationOption\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Migration option</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"tokenBaseDecimal\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Token base decimal</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"9\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"tokenQuoteDecimal\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Token quote decimal</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"9\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Fee parameters</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"baseFeeBps\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Base fee (BPS)</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"2500000\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"dynamicFeeEnabled\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md p-4\">\r\n                  <FormControl>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"h-4 w-4 mt-1\"\r\n                      checked={field.value}\r\n                      onChange={field.onChange}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <div className=\"space-y-1 leading-none\">\r\n                    <FormLabel>Enable dynamic fee</FormLabel>\r\n                  </div>\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-4\">\r\n          <div className=\"font-medium\">LP distribution</div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"partnerLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Partner LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"creatorLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Creator LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"partnerLockedLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Partner locked LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"creatorLockedLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Creator locked LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Total LP percentage must be 100%. These ratios determine how token\r\n            LP is distributed.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Address</h3>\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"feeClaimer\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Fee claimer address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter fee claimer address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"leftoverReceiver\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Leftover receiver address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter leftover receiver address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"quoteMint\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Quote mint address</FormLabel>\r\n                  <FormControl>\r\n                    <Select\r\n                      onValueChange={field.onChange}\r\n                      defaultValue={field.value}\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      <SelectTrigger className=\"w-full\">\r\n                        <SelectValue placeholder=\"Select quote mint address\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"So11111111111111111111111111111111111111112\">\r\n                          <div className=\"flex items-center\">\r\n                            <img\r\n                              src=\"/crypto-logos/solana-logo.svg\"\r\n                              alt=\"SOL\"\r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            SOL\r\n                          </div>\r\n                        </SelectItem>\r\n                        <SelectItem value=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\">\r\n                          <div className=\"flex items-center\">\r\n                            <img\r\n                              src=\"/crypto-logos/usd-coin-usdc-logo.svg\"\r\n                              alt=\"USDC\"\r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            USDC\r\n                          </div>\r\n                        </SelectItem>\r\n                        <SelectItem value=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\">\r\n                          <div className=\"flex items-center\">\r\n                            <img\r\n                              src=\"/crypto-logos/tether-usdt-logo.svg\"\r\n                              alt=\"USDT\"\r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            USDT\r\n                          </div>\r\n                        </SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === \"mainnet\" ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Creating...\r\n                  </>\r\n                ) : (\r\n                  \"Create configuration by market cap\"\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-center\">Configuration created!</h3>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">\r\n          Configuration address:\r\n        </div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.config}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">\r\n          Transaction signature:\r\n        </div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button variant=\"outline\" onClick={viewConfig} className=\"flex-1\">\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View configuration\r\n        </Button>\r\n\r\n        <Button variant=\"outline\" onClick={viewExplorer} className=\"flex-1\">\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View transaction\r\n        </Button>\r\n      </div>\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create new configuration\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <svg\r\n          className=\"h-10 w-10 text-red-600\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M6 18L18 6M6 6l12 12\"\r\n          />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Failed to create configuration</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        {error || \"An error occurred during configuration creation.\"}\r\n      </p>\r\n      <Button\r\n        onClick={() => {\r\n          setCurrentStage(\"input\");\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render confirmation view\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Confirming</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please wait while your transaction is being processed...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  // Render dựa trên stage hiện tại\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case \"success\":\r\n        return renderSuccess();\r\n      case \"error\":\r\n        return renderError();\r\n      case \"confirming\":\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  // Tránh lỗi hydration\r\n  if (!mounted) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create configuration by market cap</CardTitle>\r\n          <CardDescription>\r\n            Build a non-decreasing configuration based on market cap\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Create configuration by market cap</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...\r\n              {publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Build a non-decreasing configuration based on market cap\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>{renderStageContent()}</CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/buildCurveAndCreateConfigByMarketCap-form.tsx"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphis/use-walletModal.ts"
    }
  ]
}