{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-card",
  "type": "registry:block",
  "description": "The TokenCard component is a card that shows a token's metatda, price, and price history.",
  "dependencies": [
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "skeleton",
    "card"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-card.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { ExternalLinkIcon } from \"lucide-react\";\r\n\r\nimport { formatUsd, shortAddress, cn } from \"@/lib/utils\";\r\nimport { SolAsset } from \"@/types/assets\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\n\r\nimport { TokenIcon } from \"@/components/ui/murphy/token-icon\";\r\nimport { Sparkline } from \"@/components/ui/murphy/sparkline\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\ntype TokenCardProps = {\r\n  asset: SolAsset | null;\r\n  chartData?: { timestamp: number; price: number }[];\r\n  size?: \"sm\" | \"md\";\r\n};\r\n\r\nconst TokenCard = ({ asset, chartData = [], size = \"md\" }: TokenCardProps) => {\r\n  if (!asset) {\r\n    return (\r\n      <Card className=\"w-full\">\r\n        <CardHeader className={cn(\"p-4\", size === \"md\" && \"p-6\")}>\r\n          <CardTitle className=\"flex items-center gap-3\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n            <Skeleton className=\"h-[48px] w-[48px] shrink-0 rounded-full\" />\r\n            <div className=\"flex w-full flex-col gap-2\">\r\n              <Skeleton className=\"h-[12px] w-4/5\" />\r\n              <Skeleton className=\"h-[12px] w-4/5\" />\r\n            </div>\r\n          </CardTitle>\r\n          <CardDescription className=\"sr-only\">Loading...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className={cn(\"p-5\", size === \"md\" && \"p-6\")}>\r\n          <Skeleton className=\"h-[88px] w-full\" />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\nconst href= asset.mint instanceof PublicKey ?`https://solscan.io/token/${asset.mint.toBase58()}`:`https://solscan.io/token/${asset}`\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader className={cn(\"p-4 pb-2\", size === \"md\" && \"p-6\")}>\r\n        <CardTitle\r\n          className={cn(\r\n            \"flex items-center gap-2 text-sm\",\r\n            size === \"md\" && \"text-lg\",\r\n          )}\r\n        >\r\n          <TokenIcon asset={asset} size={size === \"sm\" ? 32 : 48} />\r\n          <div className=\"flex flex-col\">\r\n            {asset.symbol}\r\n            <a\r\n              href={href}\r\n              className=\"inline-flex items-center gap-1 text-xs font-normal text-muted-foreground no-underline\"\r\n            >\r\n              <ExternalLinkIcon size={16} />\r\n              {shortAddress(asset.mint)}\r\n            </a>\r\n          </div>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className={cn(\"space-y-4 p-4 pb-0\", size === \"md\" && \"p-6\")}>\r\n        {asset.price && (\r\n          <p className={cn(\"text-xl\", size === \"md\" && \"text-4xl\")}>\r\n            {formatUsd(asset.price)}\r\n          </p>\r\n        )}\r\n        <Sparkline data={chartData} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport { TokenCard };\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-card.tsx"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\r\n\r\nexport type SolAsset = {\r\n  mint: PublicKey;\r\n  name: string;\r\n  symbol: string;\r\n  image: string;\r\n  decimals: number;\r\n  price: number;\r\n  userTokenAccount?: {\r\n    address: PublicKey;\r\n    amount: number;\r\n  };\r\n};\r\n\r\nexport type FetchWalletArgs = {\r\n  owner: PublicKey;\r\n  limit?: number;\r\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    }
  ]
}