{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "distribute-cToken",
  "type": "registry:block",
  "title": "Distribute cToken",
  "description": "A simple distribute cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/distribute-cToken.tsx",
      "content": "\"use client\";\n\nimport React, { useContext } from \"react\";\nimport { ComputeBudgetProgram, PublicKey, Transaction } from \"@solana/web3.js\";\nimport {\n  CompressedTokenProgram,\n  getTokenPoolInfos,\n  selectTokenPoolInfo,\n} from \"@lightprotocol/compressed-token\";\nimport {\n  bn,\n  calculateComputeUnitPrice,\n  createRpc,\n  selectStateTreeInfo,\n} from \"@lightprotocol/stateless.js\";\nimport { getAssociatedTokenAddress, getAccount, createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport { toast } from \"sonner\";\nimport QRCode from \"react-qr-code\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Form schema - no need for privateKey anymore\nconst formSchema = z.object({\n  mintAddress: z.string().min(1, \"Mint address is required\"),\n  recipients: z.string().min(1, \"Recipient list is required\"),\n  amount: z.number().min(1, \"Amount must be greater than 0\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function DistributeTokenForm({ className }: { className?: string }) {\n  // Use hook from wallet adapter\n  const { publicKey, signTransaction, connected } = useWallet();\n  const { connection } = useConnection();\n  const { endpoint } = useContext(ModalContext);\n  \n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [currentStage, setCurrentStage] = React.useState<'input' | 'success' | 'error'>('input');\n  const [error, setError] = React.useState(\"\");\n  const [result, setResult] = React.useState<{\n    txId: string;\n  } | null>(null);\n  const [isMainnet, setIsMainnet] = React.useState(true);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      mintAddress: \"\",\n      recipients: \"\",\n      amount: 100,\n    },\n  });\n\n  const onSubmit = async (values: FormValues) => {\n    try {\n      // Check if the wallet is connected\n      if (!connected || !publicKey || !signTransaction) {\n        toast.error(\"Please connect your wallet first\");\n        return;\n      }\n\n      setIsSubmitting(true);\n      setError(\"\");\n      setCurrentStage('input');\n\n      const rpcEndpoint = isMainnet \n        ? process.env.NEXT_PUBLIC_SOLANA_RPC_URL \n        : process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET;\n\n      if (!rpcEndpoint) {\n        throw new Error(\"RPC endpoint is not configured\");\n      }\n      \n      // Create RPC connection\n      const connection = createRpc(rpcEndpoint);\n\n      // Convert mint address\n      const mintAddress = new PublicKey(values.mintAddress);\n      \n      // Convert recipient list\n      const airDropAddresses = values.recipients.split(',')\n        .map(address => address.trim())\n        .filter(address => address.length > 0)\n        .map(address => new PublicKey(address));\n\n      if (airDropAddresses.length === 0) {\n        throw new Error(\"No valid recipient addresses\");\n      }\n\n      // 1. Find Associated Token Account address\n      const ataAddress = await getAssociatedTokenAddress(mintAddress, publicKey);\n\n      // 2. Check if ATA already exists\n      let ataExists = false;\n      try {\n        await getAccount(connection, ataAddress);\n        ataExists = true;\n      } catch (e) {\n        // ATA doesn't exist\n        ataExists = false;\n      }\n\n      // 3. If not, create ATA with a separate transaction\n      if (!ataExists) {\n        console.log(\"Creating new Associated Token Account...\");\n        const createAtaTx = new Transaction();\n        createAtaTx.add(\n          createAssociatedTokenAccountInstruction(\n            publicKey, // payer\n            ataAddress, // ATA address\n            publicKey, // owner\n            mintAddress // token mint\n          )\n        );\n        \n        createAtaTx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n        createAtaTx.feePayer = publicKey;\n        \n        const signedCreateAtaTx = await signTransaction(createAtaTx);\n        const createAtaTxId = await connection.sendRawTransaction(signedCreateAtaTx.serialize());\n        await connection.confirmTransaction({\n          signature: createAtaTxId,\n          blockhash: (await connection.getLatestBlockhash()).blockhash,\n          lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight,\n        });\n        console.log(\"ATA created with tx ID:\", createAtaTxId);\n      }\n\n      // Select new tree for each transaction\n  const activeStateTrees = await connection.getStateTreeInfos();\n  const treeInfo = selectStateTreeInfo(activeStateTrees);\n\n      // Select token pool info\n  const infos = await getTokenPoolInfos(connection, mintAddress);\n  const info = selectTokenPoolInfo(infos);\n\n      const amount = bn(values.amount);\n\n  const instructions = [];\n      // Adjust compute units based on the number of recipients\n      const computeUnits = 120000 + (airDropAddresses.length > 1 ? 10000 * (airDropAddresses.length - 1) : 0);\n      \n  instructions.push(\n        ComputeBudgetProgram.setComputeUnitLimit({ units: computeUnits }),\n    ComputeBudgetProgram.setComputeUnitPrice({\n          microLamports: calculateComputeUnitPrice(20000, computeUnits),\n    })\n  );\n\n  const compressInstruction = await CompressedTokenProgram.compress({\n        payer: publicKey,\n        owner: publicKey,\n        source: ataAddress,\n    toAddress: airDropAddresses,\n    amount: airDropAddresses.map(() => amount),\n    mint: mintAddress,\n    tokenPoolInfo: info,\n    outputStateTreeInfo: treeInfo,\n  });\n  instructions.push(compressInstruction);\n\n      // Sign and send transaction with connected wallet\n      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n      \n      // Create transaction and add instructions\n      const transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      \n      // Set blockhash and feePayer information\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = publicKey;\n      \n      console.log(\"Signing transaction...\");\n      \n      try {\n        // Sign transaction with connected wallet\n        const signedTx = await signTransaction(transaction);\n        \n        console.log(\"Sending transaction...\");\n        const txId = await connection.sendRawTransaction(signedTx.serialize());\n        \n        // Wait for confirmation\n        await connection.confirmTransaction({\n          signature: txId,\n          blockhash,\n          lastValidBlockHeight,\n        });\n        \n        console.log(\"Transaction confirmed:\", txId);\n        \n        setResult({\n          txId\n        });\n        setCurrentStage('success');\n        \n        toast.success(\"Distribution successful!\", {\n          description: `Transaction: ${txId}`\n        });\n      } catch (signError: any) {\n        console.error('Error signing transaction:', signError);\n        \n        // Analyze error if user canceled the transaction\n        if (signError.message && signError.message.includes(\"canceled\")) {\n          toast.error(\"Transaction canceled\", {\n            description: \"You canceled the transaction\"\n          });\n          setError(\"You canceled the transaction\");\n        } else {\n          toast.error(\"Error signing transaction\", {\n            description: signError.message || \"Unable to sign transaction\"\n          });\n          setError(`Error signing transaction: ${signError.message}`);\n        }\n        \n        setCurrentStage('error');\n        throw signError;\n      }\n    } catch (err) {\n      console.error(err);\n      setError(err instanceof Error ? err.message : \"An error occurred\");\n      setCurrentStage('error');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n  };\n\n  // Add helper function to handle long text\n  const truncateText = (text: string, maxLength: number = 20) => {\n    if (text.length <= maxLength) return text;\n    return `${text.slice(0, maxLength)}...`;\n  };\n\n  // Add helper function to copy text\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard\");\n  };\n\n  // Add helper function to create Solscan link\n  const getSolscanUrl = (type: 'tx' | 'token' | 'account', id: string) => {\n    const cluster = isMainnet ? '' : '?cluster=devnet';\n    return `https://solscan.io/${type}/${id}${cluster}`;\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4\">\n      <div className=\"bg-secondary/50 rounded-lg p-4\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Field</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Value</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Token Address</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(form.getValues(\"mintAddress\") || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(form.getValues(\"mintAddress\"))}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('token', form.getValues(\"mintAddress\")), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Amount Per Recipient</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"amount\")}</td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(form.getValues(\"amount\").toString())}\n                  >\n                    Copy\n                  </Button>\n                </td>\n              </tr>\n              <tr className=\"border-b border-border/50\">\n                <td className=\"py-3 px-4 text-sm\">Transaction ID</td>\n                <td className=\"py-3 px-4 text-sm font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <span>{truncateText(result?.txId || \"\")}</span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(result?.txId || \"\")}\n                    >\n                      Copy\n                    </Button>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4 text-sm text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(getSolscanUrl('tx', result?.txId || \"\"), '_blank')}\n                  >\n                    View\n                  </Button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <Button onClick={resetForm} className=\"flex-1\">\n          Distribute More Tokens\n        </Button>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" className=\"flex-1\">\n              Generate QR Code\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>QR Code to Claim Token</DialogTitle>\n            </DialogHeader>\n            <div className=\"flex flex-col items-center justify-center p-4\">\n              <QRCode\n                value={JSON.stringify({\n                  mintAddress: form.getValues(\"mintAddress\"),\n                  amount: form.getValues(\"amount\"),\n                  type: \"compressed-token-claim\",\n                  timestamp: new Date().toISOString(),\n                })}\n                size={250}\n                level=\"H\"\n                fgColor=\"#000\"\n                bgColor=\"#fff\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-4\">\n                Recipients can scan this QR code to claim tokens\n              </p>\n              <div className=\"flex flex-col items-center mt-2 w-full\">\n                <p className=\"text-xs text-muted-foreground\">Token: {truncateText(form.getValues(\"mintAddress\"), 10)}</p>\n                <p className=\"text-xs text-muted-foreground\">Amount: {form.getValues(\"amount\")}</p>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n        <Button \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={() => {\n            const data = {\n              mintAddress: form.getValues(\"mintAddress\"),\n              amount: form.getValues(\"amount\"),\n              recipients: form.getValues(\"recipients\").split(',').map(addr => addr.trim()),\n              txId: result?.txId,\n            };\n            copyToClipboard(JSON.stringify(data, null, 2));\n          }}\n        >\n          Copy All Data\n        </Button>\n      </div>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4\">\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\n        {error}\n      </div>\n      <Button onClick={resetForm} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render input form\n  const renderInputForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"network-switch\">Network</Label>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Devnet</span>\n              <Switch\n                id=\"network-switch\"\n                checked={isMainnet}\n                disabled={false}\n                onCheckedChange={setIsMainnet}\n              />\n              <span className=\"text-sm text-muted-foreground\">Mainnet</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Select the network you want to use for token processing\n          </p>\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"mintAddress\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Token Address</FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter token address (e.g., BJA...)\"\n                  {...field}\n                  disabled={isSubmitting || !connected}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recipients\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Recipients</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Enter addresses, separated by commas (e.g., BJA...,EDF...)\"\n                  {...field}\n                  disabled={isSubmitting || !connected}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0 min-h-[100px]\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"amount\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Token Amount (per recipient)</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  placeholder=\"Enter token amount\"\n                  {...field}\n                  onChange={(e) => field.onChange(Number(e.target.value))}\n                  disabled={isSubmitting || !connected}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"pt-2\">\n          {!connected ? (\n            <ConnectWalletButton className=\"w-full\" />\n          ) : (\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSubmitting || !form.formState.isValid}\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Distributing Tokens...\n                </>\n              ) : (\n                \"Distribute Tokens\"\n              )}\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      default:\n        return renderInputForm();\n    }\n  };\n\n  return (\n    <Card className={className || \"w-full\"}>\n      <CardHeader>\n        <CardTitle>Compressed Token Distribution</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/distribute-cToken.tsx"
    }
  ]
}