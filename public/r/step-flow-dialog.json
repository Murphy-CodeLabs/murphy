{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "step-flow-dialog",
  "type": "registry:block",
  "title": "Modal for guiding users through multi-step flows (e.g. Mint → Verify → Confirm).",
  "dependencies": [],
  "registryDependencies": [
    "dialog",
    "button",
    "txn-progress-steps"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Txn-Feedback/step-flow-dialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { TxnProgressSteps } from \"./txn-progress-steps\"\r\nimport type { TxnStep } from \"@/types/transaction\"\r\n\r\ninterface StepFlowDialogProps {\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n  title: string\r\n  description?: string\r\n  steps: TxnStep[]\r\n  currentStep: number\r\n  onNext?: () => Promise<void> | void\r\n  onPrevious?: () => void\r\n  onCancel?: () => void\r\n  nextButtonText?: string\r\n  previousButtonText?: string\r\n  cancelButtonText?: string\r\n  isLoading?: boolean\r\n  canGoNext?: boolean\r\n  canGoPrevious?: boolean\r\n  showCancel?: boolean\r\n}\r\n\r\nexport function StepFlowDialog({\r\n  open,\r\n  onOpenChange,\r\n  title,\r\n  description,\r\n  steps,\r\n  currentStep,\r\n  onNext,\r\n  onPrevious,\r\n  onCancel,\r\n  nextButtonText = \"Next\",\r\n  previousButtonText = \"Previous\",\r\n  cancelButtonText = \"Cancel\",\r\n  isLoading = false,\r\n  canGoNext = true,\r\n  canGoPrevious = true,\r\n  showCancel = true,\r\n}: StepFlowDialogProps) {\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n  const handleNext = async () => {\r\n    if (!onNext || isProcessing) return\r\n    setIsProcessing(true)\r\n    try {\r\n      await onNext()\r\n    } catch (error) {\r\n      console.error(\"Step failed:\", error)\r\n    } finally {\r\n      setIsProcessing(false)\r\n    }\r\n  }\r\n\r\n  const isLastStep = currentStep === steps.length - 1\r\n  const isFirstStep = currentStep === 0\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-lg\">\r\n        <DialogHeader>\r\n          <DialogTitle>{title}</DialogTitle>\r\n          {description && <DialogDescription>{description}</DialogDescription>}\r\n        </DialogHeader>\r\n\r\n        <div className=\"py-6\">\r\n          <TxnProgressSteps\r\n            steps={steps}\r\n            orientation=\"vertical\"\r\n            className=\"mb-6\"\r\n          />\r\n\r\n          {steps[currentStep] && (\r\n            <div className=\"p-4 bg-muted rounded-lg\">\r\n              <h4 className=\"font-medium text-foreground mb-2\">\r\n                {steps[currentStep].title}\r\n              </h4>\r\n              {steps[currentStep].description && (\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {steps[currentStep].description}\r\n                </p>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex justify-between\">\r\n          <div className=\"flex space-x-2\">\r\n            {showCancel && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                onClick={onCancel}\r\n                disabled={isProcessing || isLoading}\r\n              >\r\n                {cancelButtonText}\r\n              </Button>\r\n            )}\r\n            {!isFirstStep && canGoPrevious && (\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={onPrevious}\r\n                disabled={isProcessing || isLoading}\r\n              >\r\n                {previousButtonText}\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex space-x-2\">\r\n            {!isLastStep && (\r\n              <Button\r\n                onClick={handleNext}\r\n                disabled={!canGoNext || isProcessing || isLoading}\r\n              >\r\n                {isProcessing || isLoading ? \"Processing...\" : nextButtonText}\r\n              </Button>\r\n            )}\r\n            {isLastStep && (\r\n              <Button\r\n                onClick={() => onOpenChange(false)}\r\n                disabled={isProcessing || isLoading}\r\n              >\r\n                Done\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "components/ui/murphy/Txn-Feedback/step-flow-dialog.tsx"
    }
  ]
}