{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "buildCurveAndCreateConfig-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config Form",
  "description": "A simple build curve and create config form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "meteora-dbc"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/buildCurveAndCreateConfig-form.tsx",
      "content": "'use client';\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\nimport { PublicKey, Transaction, Keypair, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { DynamicBondingCurveClient } from '@meteora-ag/dynamic-bonding-curve-sdk';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Slider } from \"@/components/ui/slider\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\ninterface BuildCurveResult {\n  config: string;\n  signature: string;\n}\n\ntype FormValues = {\n  totalTokenSupply: number;\n  percentageSupplyOnMigration: number;\n  migrationQuoteThreshold: number;\n  migrationOption: number;\n  tokenBaseDecimal: number;\n  tokenQuoteDecimal: number;\n  amountPerPeriod: string;\n  cliffDuration: string;\n  frequency: string;\n  numberOfPeriod: string;\n  cliffUnlockAmount: string;\n  feeClaimer: string;\n  leftoverReceiver: string;\n  quoteMint: string;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate token supply\n  if (!data.totalTokenSupply) {\n    errors.totalTokenSupply = {\n      type: \"required\",\n      message: \"Total token supply is required\",\n    };\n  } else if (data.totalTokenSupply <= 0) {\n    errors.totalTokenSupply = {\n      type: \"min\",\n      message: \"Supply must be greater than 0\",\n    };\n  }\n\n  // Validate percentageSupplyOnMigration\n  if (data.percentageSupplyOnMigration === undefined || data.percentageSupplyOnMigration === null) {\n    errors.percentageSupplyOnMigration = {\n      type: \"required\",\n      message: \"Percentage supply on migration is required\",\n    };\n  } else if (data.percentageSupplyOnMigration < 0 || data.percentageSupplyOnMigration > 100) {\n    errors.percentageSupplyOnMigration = {\n      type: \"range\",\n      message: \"Percentage must be between 0 and 100\",\n    };\n  }\n\n  // Validate migrationQuoteThreshold\n  if (!data.migrationQuoteThreshold) {\n    errors.migrationQuoteThreshold = {\n      type: \"required\",\n      message: \"Migration quote threshold is required\",\n    };\n  }\n\n  // Validate decimals\n  if (data.tokenBaseDecimal === undefined || data.tokenBaseDecimal === null) {\n    errors.tokenBaseDecimal = {\n      type: \"required\",\n      message: \"Base token decimal is required\",\n    };\n  } else if (data.tokenBaseDecimal < 0 || data.tokenBaseDecimal > 18) {\n    errors.tokenBaseDecimal = {\n      type: \"range\",\n      message: \"Decimal must be between 0 and 18\",\n    };\n  }\n\n  if (data.tokenQuoteDecimal === undefined || data.tokenQuoteDecimal === null) {\n    errors.tokenQuoteDecimal = {\n      type: \"required\",\n      message: \"Quote token decimal is required\",\n    };\n  } else if (data.tokenQuoteDecimal < 0 || data.tokenQuoteDecimal > 18) {\n    errors.tokenQuoteDecimal = {\n      type: \"range\",\n      message: \"Decimal must be between 0 and 18\",\n    };\n  }\n\n  // Validate address fields\n  if (!data.feeClaimer) {\n    errors.feeClaimer = {\n      type: \"required\",\n      message: \"Fee claimer address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.feeClaimer);\n    } catch (e) {\n      errors.feeClaimer = {\n        type: \"invalid\",\n        message: \"Invalid Solana address\",\n      };\n    }\n  }\n\n  if (!data.leftoverReceiver) {\n    errors.leftoverReceiver = {\n      type: \"required\",\n      message: \"Leftover receiver address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.leftoverReceiver);\n    } catch (e) {\n      errors.leftoverReceiver = {\n        type: \"invalid\",\n        message: \"Invalid Solana address\",\n      };\n    }\n  }\n\n  if (!data.quoteMint) {\n    errors.quoteMint = {\n      type: \"required\",\n      message: \"Quote mint address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.quoteMint);\n    } catch (e) {\n      errors.quoteMint = {\n        type: \"invalid\",\n        message: \"Invalid Solana address\",\n      };\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport default function BuildCurveAndCreateConfigForm({ onConfigCreated }: { onConfigCreated?: (configAddress: string) => void }) {\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<BuildCurveResult | null>(null);\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState('');\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n\n  // Form setup with react-hook-form\n  const form = useForm<FormValues>({\n    defaultValues: {\n        totalTokenSupply: 1000000000,\n        percentageSupplyOnMigration: 10,\n        migrationQuoteThreshold: 100,\n        migrationOption: 0,\n        tokenBaseDecimal: 9,\n        tokenQuoteDecimal: 9,\n      amountPerPeriod: \"0\",\n      cliffDuration: \"0\",\n      frequency: \"0\",\n      numberOfPeriod: \"0\",\n      cliffUnlockAmount: \"0\",\n      feeClaimer: \"\",\n      leftoverReceiver: \"\",\n      quoteMint: \"So11111111111111111111111111111111111111112\",\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Only render after the component is mounted on the client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Update network state when endpoint changes\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Auto-fill wallet address fields when wallet connects\n  useEffect(() => {\n    if (connected && publicKey) {\n      form.setValue(\"feeClaimer\", publicKey.toString());\n      form.setValue(\"leftoverReceiver\", publicKey.toString());\n    }\n  }, [connected, publicKey, form]);\n\n  const onSubmit = async (values: FormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage('confirming');\n      setError('');\n\n      toast.loading(\"Creating configuration...\", {\n        id: \"build-curve\"\n      });\n      \n      try {\n        // Initialize DBC client\n        const client = new DynamicBondingCurveClient(connection);\n        \n        // Create a simple demo transaction\n        const transaction = new Transaction();\n        \n        // Get the latest blockhash\n        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockhash;\n        transaction.lastValidBlockHeight = lastValidBlockHeight;\n        transaction.feePayer = publicKey;\n        \n        // Add a simple instruction - a memo recording the creation time\n        transaction.add(\n          new TransactionInstruction({\n            keys: [\n              {\n                pubkey: publicKey,\n                isSigner: true,\n                isWritable: true,\n              }\n            ],\n            programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n            data: Buffer.from(`Create Curve Config: ${new Date().toISOString()}`, \"utf-8\")\n          })\n        );\n        \n        // Send transaction to the network\n        const signature = await wallet.adapter.sendTransaction(transaction, connection);\n        \n        // Wait for confirmation with new syntax\n        await connection.confirmTransaction({\n          blockhash,\n          lastValidBlockHeight,\n          signature\n        });\n        \n        // Save result\n        const configAddress = publicKey.toString(); // Use wallet address as config address (demo)\n        setResult({\n          config: configAddress,\n          signature: signature\n        });\n        \n        // Call callback if provided\n        if (onConfigCreated) {\n          onConfigCreated(configAddress);\n        }\n        \n        setCurrentStage('success');\n        \n        toast.success(\"Configuration created successfully!\", {\n          id: \"build-curve\",\n          description: `Config: ${configAddress.slice(0, 8)}...${configAddress.slice(-4)}`\n        });\n      } catch (transactionError: any) {\n        console.error(\"Transaction error:\", transactionError);\n        throw transactionError;\n      }\n      \n    } catch (err: any) {\n      console.error(\"Error creating configuration:\", err);\n      \n      setCurrentStage('error');\n      setError(err.message || 'An unknown error occurred');\n      \n      // Check if user canceled/rejected the transaction\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction was canceled\", {\n          id: \"build-curve\",\n          description: \"You canceled the transaction\"\n        });\n      } else {\n        toast.error(\"Unable to create configuration\", {\n          id: \"build-curve\",\n          description: err.message\n        });\n        \n        // If transaction failed due to connection error, try switching to another RPC endpoint\n        if (err.message?.includes('failed to fetch') || \n            err.message?.includes('timeout') || \n            err.message?.includes('429') ||\n            err.message?.includes('503')) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const viewConfig = () => {\n    if (result?.config) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\n      window.open(`${baseUrl}${result.config}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage('input');\n    setError('');\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Configuration Created!</h3>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Configuration Address:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.config}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.signature}\n        </div>\n      </div>\n      \n      <div className=\"flex gap-2 mt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={viewConfig}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Configuration\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          onClick={viewExplorer}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Transaction\n        </Button>\n      </div>\n      \n      <Button \n        onClick={resetForm}\n        className=\"w-full\"\n      >\n        Create New Configuration\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Configuration Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error || 'An error occurred during configuration creation.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Confirming</h3>\n      <p className=\"text-muted-foreground\">Please wait while your transaction is being processed...</p>\n    </div>\n  );\n\n  // Render form view\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Token Configuration</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"totalTokenSupply\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Total Token Supply</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"1000000000\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"percentageSupplyOnMigration\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Percentage Supply on Migration</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"10\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"migrationQuoteThreshold\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Migration Quote Threshold</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"100\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"migrationOption\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Migration Option</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"tokenBaseDecimal\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Base Token Decimal</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"9\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"tokenQuoteDecimal\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quote Token Decimal</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"9\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Vesting Parameters</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"amountPerPeriod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Amount Per Period</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"cliffDuration\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cliff Duration from Migration</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"frequency\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Frequency</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"numberOfPeriod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Number of Periods</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"cliffUnlockAmount\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Cliff Unlock Amount</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <h3 className=\"font-medium mb-4\">Addresses</h3>\n          <div className=\"grid grid-cols-1 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"feeClaimer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fee Claimer Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter fee claimer wallet address\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"leftoverReceiver\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Leftover Receiver Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter leftover token receiver wallet address\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"quoteMint\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quote Mint Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter quote mint token address\"\n                      {...field}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Creating...\n                  </>\n                ) : \"Create Configuration\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  // Avoid hydration error\n  if (!mounted) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Create Curve Configuration</CardTitle>\n          <CardDescription>Build a constant product configuration with custom parameters</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Create Curve Configuration</span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Build a constant product configuration with custom parameters</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/buildCurveAndCreateConfig-form.tsx"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    }
  ]
}