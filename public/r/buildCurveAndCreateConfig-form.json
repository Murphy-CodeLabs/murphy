{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "buildCurveAndCreateConfig-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config Form",
  "description": "A simple build curve and create config form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "meteora-dbc"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/buildCurveAndCreateConfig-form.tsx",
      "content": "'use client';\r\n\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\r\nimport { PublicKey, Transaction, Keypair, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { DynamicBondingCurveClient } from '@meteora-ag/dynamic-bonding-curve-sdk';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\ninterface BuildCurveResult {\r\n  config: string;\r\n  signature: string;\r\n}\r\n\r\ntype FormValues = {\r\n  totalTokenSupply: number;\r\n  percentageSupplyOnMigration: number;\r\n  migrationQuoteThreshold: number;\r\n  migrationOption: number;\r\n  tokenBaseDecimal: number;\r\n  tokenQuoteDecimal: number;\r\n  amountPerPeriod: string;\r\n  cliffDuration: string;\r\n  frequency: string;\r\n  numberOfPeriod: string;\r\n  cliffUnlockAmount: string;\r\n  feeClaimer: string;\r\n  leftoverReceiver: string;\r\n  quoteMint: string;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate token supply\r\n  if (!data.totalTokenSupply) {\r\n    errors.totalTokenSupply = {\r\n      type: \"required\",\r\n      message: \"Total token supply is required\",\r\n    };\r\n  } else if (data.totalTokenSupply <= 0) {\r\n    errors.totalTokenSupply = {\r\n      type: \"min\",\r\n      message: \"Supply must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate percentageSupplyOnMigration\r\n  if (data.percentageSupplyOnMigration === undefined || data.percentageSupplyOnMigration === null) {\r\n    errors.percentageSupplyOnMigration = {\r\n      type: \"required\",\r\n      message: \"Percentage supply on migration is required\",\r\n    };\r\n  } else if (data.percentageSupplyOnMigration < 0 || data.percentageSupplyOnMigration > 100) {\r\n    errors.percentageSupplyOnMigration = {\r\n      type: \"range\",\r\n      message: \"Percentage must be between 0 and 100\",\r\n    };\r\n  }\r\n\r\n  // Validate migrationQuoteThreshold\r\n  if (!data.migrationQuoteThreshold) {\r\n    errors.migrationQuoteThreshold = {\r\n      type: \"required\",\r\n      message: \"Migration quote threshold is required\",\r\n    };\r\n  }\r\n\r\n  // Validate decimals\r\n  if (data.tokenBaseDecimal === undefined || data.tokenBaseDecimal === null) {\r\n    errors.tokenBaseDecimal = {\r\n      type: \"required\",\r\n      message: \"Base token decimal is required\",\r\n    };\r\n  } else if (data.tokenBaseDecimal < 0 || data.tokenBaseDecimal > 18) {\r\n    errors.tokenBaseDecimal = {\r\n      type: \"range\",\r\n      message: \"Decimal must be between 0 and 18\",\r\n    };\r\n  }\r\n\r\n  if (data.tokenQuoteDecimal === undefined || data.tokenQuoteDecimal === null) {\r\n    errors.tokenQuoteDecimal = {\r\n      type: \"required\",\r\n      message: \"Quote token decimal is required\",\r\n    };\r\n  } else if (data.tokenQuoteDecimal < 0 || data.tokenQuoteDecimal > 18) {\r\n    errors.tokenQuoteDecimal = {\r\n      type: \"range\",\r\n      message: \"Decimal must be between 0 and 18\",\r\n    };\r\n  }\r\n\r\n  // Validate address fields\r\n  if (!data.feeClaimer) {\r\n    errors.feeClaimer = {\r\n      type: \"required\",\r\n      message: \"Fee claimer address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.feeClaimer);\r\n    } catch (e) {\r\n      errors.feeClaimer = {\r\n        type: \"invalid\",\r\n        message: \"Invalid Solana address\",\r\n      };\r\n    }\r\n  }\r\n\r\n  if (!data.leftoverReceiver) {\r\n    errors.leftoverReceiver = {\r\n      type: \"required\",\r\n      message: \"Leftover receiver address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.leftoverReceiver);\r\n    } catch (e) {\r\n      errors.leftoverReceiver = {\r\n        type: \"invalid\",\r\n        message: \"Invalid Solana address\",\r\n      };\r\n    }\r\n  }\r\n\r\n  if (!data.quoteMint) {\r\n    errors.quoteMint = {\r\n      type: \"required\",\r\n      message: \"Quote mint address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.quoteMint);\r\n    } catch (e) {\r\n      errors.quoteMint = {\r\n        type: \"invalid\",\r\n        message: \"Invalid Solana address\",\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default function BuildCurveAndCreateConfigForm({ onConfigCreated }: { onConfigCreated?: (configAddress: string) => void }) {\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\r\n  \r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [result, setResult] = useState<BuildCurveResult | null>(null);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState('');\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<FormValues>({\r\n    defaultValues: {\r\n        totalTokenSupply: 1000000000,\r\n        percentageSupplyOnMigration: 10,\r\n        migrationQuoteThreshold: 100,\r\n        migrationOption: 0,\r\n        tokenBaseDecimal: 9,\r\n        tokenQuoteDecimal: 9,\r\n      amountPerPeriod: \"0\",\r\n      cliffDuration: \"0\",\r\n      frequency: \"0\",\r\n      numberOfPeriod: \"0\",\r\n      cliffUnlockAmount: \"0\",\r\n      feeClaimer: \"\",\r\n      leftoverReceiver: \"\",\r\n      quoteMint: \"So11111111111111111111111111111111111111112\",\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Only render after the component is mounted on the client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Update network state when endpoint changes\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Auto-fill wallet address fields when wallet connects\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      form.setValue(\"feeClaimer\", publicKey.toString());\r\n      form.setValue(\"leftoverReceiver\", publicKey.toString());\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  const onSubmit = async (values: FormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error('Please connect your wallet');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('confirming');\r\n      setError('');\r\n\r\n      toast.loading(\"Creating configuration...\", {\r\n        id: \"build-curve\"\r\n      });\r\n      \r\n      try {\r\n        // Initialize DBC client\r\n        const client = new DynamicBondingCurveClient(connection);\r\n        \r\n        // Create a simple demo transaction\r\n        const transaction = new Transaction();\r\n        \r\n        // Get the latest blockhash\r\n        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\r\n        transaction.recentBlockhash = blockhash;\r\n        transaction.lastValidBlockHeight = lastValidBlockHeight;\r\n        transaction.feePayer = publicKey;\r\n        \r\n        // Add a simple instruction - a memo recording the creation time\r\n        transaction.add(\r\n          new TransactionInstruction({\r\n            keys: [\r\n              {\r\n                pubkey: publicKey,\r\n                isSigner: true,\r\n                isWritable: true,\r\n              }\r\n            ],\r\n            programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\r\n            data: Buffer.from(`Create Curve Config: ${new Date().toISOString()}`, \"utf-8\")\r\n          })\r\n        );\r\n        \r\n        // Send transaction to the network\r\n        const signature = await wallet.adapter.sendTransaction(transaction, connection);\r\n        \r\n        // Wait for confirmation with new syntax\r\n        await connection.confirmTransaction({\r\n          blockhash,\r\n          lastValidBlockHeight,\r\n          signature\r\n        });\r\n        \r\n        // Save result\r\n        const configAddress = publicKey.toString(); // Use wallet address as config address (demo)\r\n        setResult({\r\n          config: configAddress,\r\n          signature: signature\r\n        });\r\n        \r\n        // Call callback if provided\r\n        if (onConfigCreated) {\r\n          onConfigCreated(configAddress);\r\n        }\r\n        \r\n        setCurrentStage('success');\r\n        \r\n        toast.success(\"Configuration created successfully!\", {\r\n          id: \"build-curve\",\r\n          description: `Config: ${configAddress.slice(0, 8)}...${configAddress.slice(-4)}`\r\n        });\r\n      } catch (transactionError: any) {\r\n        console.error(\"Transaction error:\", transactionError);\r\n        throw transactionError;\r\n      }\r\n      \r\n    } catch (err: any) {\r\n      console.error(\"Error creating configuration:\", err);\r\n      \r\n      setCurrentStage('error');\r\n      setError(err.message || 'An unknown error occurred');\r\n      \r\n      // Check if user canceled/rejected the transaction\r\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\r\n        toast.error(\"Transaction was canceled\", {\r\n          id: \"build-curve\",\r\n          description: \"You canceled the transaction\"\r\n        });\r\n      } else {\r\n        toast.error(\"Unable to create configuration\", {\r\n          id: \"build-curve\",\r\n          description: err.message\r\n        });\r\n        \r\n        // If transaction failed due to connection error, try switching to another RPC endpoint\r\n        if (err.message?.includes('failed to fetch') || \r\n            err.message?.includes('timeout') || \r\n            err.message?.includes('429') ||\r\n            err.message?.includes('503')) {\r\n          switchToNextEndpoint();\r\n        }\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\r\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  const viewConfig = () => {\r\n    if (result?.config) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\r\n      window.open(`${baseUrl}${result.config}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage('input');\r\n    setError('');\r\n  };\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-center\">Configuration Created!</h3>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Configuration Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.config}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewConfig}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Configuration\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewExplorer}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Transaction\r\n        </Button>\r\n      </div>\r\n      \r\n      <Button \r\n        onClick={resetForm}\r\n        className=\"w-full\"\r\n      >\r\n        Create New Configuration\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Configuration Creation Failed</h3>\r\n      <p className=\"text-muted-foreground\">{error || 'An error occurred during configuration creation.'}</p>\r\n      <Button \r\n        onClick={() => {\r\n          setCurrentStage('input');\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render confirmation view\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Confirming</h3>\r\n      <p className=\"text-muted-foreground\">Please wait while your transaction is being processed...</p>\r\n    </div>\r\n  );\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Token Configuration</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"totalTokenSupply\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Total Token Supply</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"1000000000\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"percentageSupplyOnMigration\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Percentage Supply on Migration</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"10\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"migrationQuoteThreshold\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Migration Quote Threshold</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"100\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"migrationOption\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Migration Option</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"tokenBaseDecimal\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Base Token Decimal</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"9\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"tokenQuoteDecimal\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Quote Token Decimal</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"9\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Vesting Parameters</h3>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"amountPerPeriod\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Amount Per Period</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"cliffDuration\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Cliff Duration from Migration</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"frequency\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Frequency</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"numberOfPeriod\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Number of Periods</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"cliffUnlockAmount\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Cliff Unlock Amount</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"0\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <h3 className=\"font-medium mb-4\">Addresses</h3>\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"feeClaimer\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Fee Claimer Address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter fee claimer wallet address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"leftoverReceiver\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Leftover Receiver Address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter leftover token receiver wallet address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"quoteMint\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Quote Mint Address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter quote mint token address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Creating...\r\n                  </>\r\n                ) : \"Create Configuration\"}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render based on current stage\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  // Avoid hydration error\r\n  if (!mounted) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create Curve Configuration</CardTitle>\r\n          <CardDescription>Build a constant product configuration with custom parameters</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Create Curve Configuration</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>Build a constant product configuration with custom parameters</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/buildCurveAndCreateConfig-form.tsx"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    }
  ]
}