{
    "name": "hydra-fanout-form",
    "description": "Create and manage fanout wallets for multi-recipient distributions using Metaplex Hydra protocol with advanced member management and payout automation",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-hydra",
        "react-hook-form",
        "@hookform/resolvers",
        "zod",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "textarea",
        "switch",
        "label",
        "badge",
        "alert",
        "tabs",
        "select",
        "dialog",
        "separator"
    ],
    "files": [
        {
            "name": "hydra-fanout-form.tsx",
            "content": "'use client';\n\n// React v√† hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { \n  Loader2, \n  ExternalLink, \n  CheckCircle, \n  Plus, \n  X, \n  GitBranch, \n  Info,\n  Users,\n  Wallet,\n  Copy,\n  Eye\n} from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries for Hydra\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplHydra } from '@metaplex-foundation/mpl-hydra';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  some,\n  none,\n  percentAmount,\n} from '@metaplex-foundation/umi';\nimport {\n  createFanout,\n  addMemberToFanout,\n  distributeFanout,\n  FanoutMembershipModel,\n} from '@metaplex-foundation/mpl-hydra';\n\n// Types and interfaces\ninterface HydraFanoutResult {\n  fanoutAddress: string;\n  signature: string;\n  fanoutType: string;\n  totalMembers: number;\n}\n\ntype HydraFanoutFormValues = {\n  // Fanout Configuration\n  name: string;\n  description: string;\n  fanoutType: 'wallet' | 'token';\n  \n  // Token Configuration (for token fanouts)\n  tokenMint: string;\n  \n  // Members\n  members: Array<{\n    address: string;\n    shares: number;\n    name?: string;\n  }>;\n  \n  // Distribution Settings\n  membershipModel: 'wallet' | 'token';\n  totalShares: number;\n  \n  // Advanced Settings\n  requiresSignOff: boolean;\n  \n  // Payout Settings\n  autoDistribute: boolean;\n  distributionFrequency: 'manual' | 'daily' | 'weekly' | 'monthly';\n};\n\nexport interface HydraFanoutFormProps {\n  onFanoutCreated?: (fanoutAddress: string, signature: string, fanoutType: string) => void;\n  className?: string;\n}\n\n// Form validation resolver\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate basic fields\n  if (!data.name?.trim()) {\n    errors.name = { type: \"required\", message: \"Fanout name is required\" };\n  }\n\n  if (!data.description?.trim()) {\n    errors.description = { type: \"required\", message: \"Description is required\" };\n  }\n\n  // Validate token mint for token fanouts\n  if (data.fanoutType === 'token' && !data.tokenMint?.trim()) {\n    errors.tokenMint = {\n      type: \"required\",\n      message: \"Token mint address is required for token fanouts\"\n    };\n  } else if (data.fanoutType === 'token' && data.tokenMint?.trim()) {\n    try {\n      new PublicKey(data.tokenMint);\n    } catch {\n      errors.tokenMint = {\n        type: \"pattern\",\n        message: \"Invalid token mint address format\"\n      };\n    }\n  }\n\n  // Validate members\n  if (!data.members || data.members.length === 0) {\n    errors.members = {\n      type: \"required\",\n      message: \"At least one member is required\"\n    };\n  } else {\n    const totalShares = data.members.reduce((sum: number, member: any) => sum + (member.shares || 0), 0);\n    if (totalShares !== 100) {\n      errors.members = {\n        type: \"sum\",\n        message: \"Member shares must sum to 100%\"\n      };\n    }\n\n    data.members.forEach((member: any, index: number) => {\n      if (!member.address?.trim()) {\n        errors[`members.${index}.address`] = {\n          type: \"required\",\n          message: \"Member address is required\"\n        };\n      } else {\n        try {\n          new PublicKey(member.address);\n        } catch {\n          errors[`members.${index}.address`] = {\n            type: \"pattern\",\n            message: \"Invalid member address format\"\n          };\n        }\n      }\n\n      if (member.shares < 0 || member.shares > 100) {\n        errors[`members.${index}.shares`] = {\n          type: \"range\",\n          message: \"Member shares must be between 0 and 100\"\n        };\n      }\n    });\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors\n  };\n};\n\nexport default function HydraFanoutForm({\n  onFanoutCreated,\n  className\n}: HydraFanoutFormProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<HydraFanoutResult | null>(null);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form setup\n  const form = useForm<HydraFanoutFormValues>({\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      fanoutType: 'wallet',\n      tokenMint: \"\",\n      members: [\n        {\n          address: \"\",\n          shares: 100,\n          name: \"\",\n        }\n      ],\n      membershipModel: 'wallet',\n      totalShares: 100,\n      requiresSignOff: false,\n      autoDistribute: false,\n      distributionFrequency: 'manual',\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Effects\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Auto-fill creator address when wallet connects\n  useEffect(() => {\n    if (connected && publicKey && form.getValues(\"members\")[0].address === \"\") {\n      const members = form.getValues(\"members\");\n      members[0].address = publicKey.toString();\n      members[0].name = \"Creator\";\n      form.setValue(\"members\", members);\n    }\n  }, [connected, publicKey, form]);\n\n  // Submit handler\n  const onSubmit = async (values: HydraFanoutFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage(\"confirming\");\n      setError(\"\");\n\n      toast.loading(\"Creating Hydra Fanout...\", {\n        id: \"hydra-fanout-create\",\n      });\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI with Hydra\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplHydra());\n\n      // Create fanout signer\n      const fanoutSigner = generateSigner(umi);\n\n      // Determine membership model\n      const membershipModel = values.membershipModel === 'wallet' \n        ? FanoutMembershipModel.Wallet \n        : FanoutMembershipModel.Token;\n\n      // Create fanout instruction\n      const createFanoutIx = createFanout(umi, {\n        fanout: fanoutSigner,\n        authority: umi.identity,\n        name: values.name,\n        membershipModel,\n        totalShares: values.totalShares,\n        ...(values.fanoutType === 'token' && values.tokenMint ? {\n          mint: some(umiPublicKey(values.tokenMint))\n        } : { mint: none() })\n      });\n\n      // Execute fanout creation\n      const fanoutResult = await createFanoutIx.sendAndConfirm(umi);\n      const fanoutAddress = fanoutSigner.publicKey.toString();\n\n      // Add members to fanout\n      for (const member of values.members) {\n        if (member.address && member.shares > 0) {\n          const addMemberIx = addMemberToFanout(umi, {\n            fanout: fanoutSigner.publicKey,\n            membershipKey: umiPublicKey(member.address),\n            shares: member.shares,\n          });\n          \n          await addMemberIx.sendAndConfirm(umi);\n        }\n      }\n\n      const signature = typeof fanoutResult.signature === 'string'\n        ? fanoutResult.signature\n        : Buffer.from(fanoutResult.signature).toString('base64');\n\n      setResult({\n        fanoutAddress,\n        signature,\n        fanoutType: values.fanoutType,\n        totalMembers: values.members.length,\n      });\n\n      if (onFanoutCreated) {\n        onFanoutCreated(fanoutAddress, signature, values.fanoutType);\n      }\n\n      setCurrentStage(\"success\");\n\n      toast.success(\"Hydra Fanout created successfully!\", {\n        id: \"hydra-fanout-create\",\n        description: `Fanout: ${fanoutAddress.slice(0, 8)}...${fanoutAddress.slice(-8)}`,\n      });\n\n    } catch (err: any) {\n      console.error(\"Error creating hydra fanout:\", err);\n\n      setCurrentStage(\"error\");\n      setError(err.message || \"An unknown error occurred\");\n\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction rejected\", {\n          id: \"hydra-fanout-create\",\n          description: \"You have rejected the transaction\",\n        });\n      } else {\n        toast.error(\"Cannot create Hydra Fanout\", {\n          id: \"hydra-fanout-create\",\n          description: err.message,\n        });\n\n        if (err.message?.includes(\"failed to fetch\") ||\n          err.message?.includes(\"timeout\") ||\n          err.message?.includes(\"429\") ||\n          err.message?.includes(\"503\")) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Member management\n  const addMember = () => {\n    const currentMembers = form.getValues(\"members\");\n    form.setValue(\"members\", [\n      ...currentMembers,\n      { address: \"\", shares: 0, name: \"\" }\n    ]);\n  };\n\n  const removeMember = (index: number) => {\n    const currentMembers = form.getValues(\"members\");\n    if (currentMembers.length > 1) {\n      form.setValue(\"members\", currentMembers.filter((_, i) => i !== index));\n    }\n  };\n\n  // View functions\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/tx/\"\n        : \"https://solscan.io/tx/\";\n      window.open(\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const viewFanout = () => {\n    if (result?.fanoutAddress) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/address/\"\n        : \"https://solscan.io/account/\";\n      window.open(\n        `${baseUrl}${result.fanoutAddress}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n    setActiveTab(\"basic\");\n  };\n\n  // Calculate total shares\n  const totalShares = form.watch(\"members\").reduce((sum, member) => sum + (member.shares || 0), 0);\n\n  // Render functions\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n            <TabsTrigger value=\"members\">Members</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"basic\" className=\"space-y-6 mt-6\">\n            {/* Fanout Type Selection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Fanout Type</h3>\n              <FormField\n                control={form.control}\n                name=\"fanoutType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div \n                          className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                            field.value === 'wallet' ? 'border-primary bg-primary/5' : 'border-border'\n                          }`}\n                          onClick={() => field.onChange('wallet')}\n                        >\n                          <Wallet className=\"h-6 w-6 mb-2\" />\n                          <h4 className=\"font-medium\">Wallet Fanout</h4>\n                          <p className=\"text-sm text-muted-foreground\">Distribute SOL to multiple wallets</p>\n                        </div>\n                        <div \n                          className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                            field.value === 'token' ? 'border-primary bg-primary/5' : 'border-border'\n                          }`}\n                          onClick={() => field.onChange('token')}\n                        >\n                          <GitBranch className=\"h-6 w-6 mb-2\" />\n                          <h4 className=\"font-medium\">Token Fanout</h4>\n                          <p className=\"text-sm text-muted-foreground\">Distribute tokens to multiple wallets</p>\n                        </div>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Basic Fanout Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Fanout Details</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fanout Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"My Distribution Pool\" {...field} disabled={isSubmitting} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the purpose of this fanout...\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Token Mint (for token fanouts) */}\n              {form.watch(\"fanoutType\") === \"token\" && (\n                <FormField\n                  control={form.control}\n                  name=\"tokenMint\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Token Mint Address</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Token mint address for distribution\"\n                          {...field}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"members\" className=\"space-y-6 mt-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">Fanout Members</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addMember}\n                  disabled={isSubmitting}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Member\n                </Button>\n              </div>\n\n              {form.watch(\"members\").map((_, index) => (\n                <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Member {index + 1}</Label>\n                    {form.watch(\"members\").length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMember(index)}\n                        disabled={isSubmitting}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name={`members.${index}.name`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Member name\" {...field} disabled={isSubmitting} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name={`members.${index}.address`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Wallet Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Member wallet address\" {...field} disabled={isSubmitting} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name={`members.${index}.shares`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Share Percentage (%)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              ))}\n\n              {/* Total shares validation */}\n              <div className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Total Shares:</span>\n                  <span className={`text-sm font-medium ${\n                    totalShares === 100 ? 'text-green-600' : 'text-orange-600'\n                  }`}>\n                    {totalShares}%\n                  </span>\n                </div>\n                {totalShares !== 100 && (\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Total shares should equal 100% for proper distribution\n                  </p>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6 mt-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Fanout Settings</h3>\n\n              <FormField\n                control={form.control}\n                name=\"membershipModel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Membership Model</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select membership model\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"wallet\">Wallet-based</SelectItem>\n                        <SelectItem value=\"token\">Token-based</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"requiresSignOff\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <Label>Require Authority Sign-off</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Require authority approval for distributions\n                      </p>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <Separator />\n\n              <div className=\"space-y-4\">\n                <h4 className=\"text-md font-medium\">Distribution Settings</h4>\n                \n                <FormField\n                  control={form.control}\n                  name=\"autoDistribute\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <Label>Auto-distribute</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Automatically distribute funds based on schedule\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                {form.watch(\"autoDistribute\") && (\n                  <FormField\n                    control={form.control}\n                    name=\"distributionFrequency\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Distribution Frequency</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isSubmitting}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select frequency\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"manual\">Manual</SelectItem>\n                            <SelectItem value=\"daily\">Daily</SelectItem>\n                            <SelectItem value=\"weekly\">Weekly</SelectItem>\n                            <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertTitle>Hydra Fanout Features</AlertTitle>\n                <AlertDescription>\n                  Hydra fanouts enable automated distribution of SOL or tokens to multiple recipients \n                  based on predefined shares. Perfect for revenue sharing, team payouts, and community distributions.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Submit Button */}\n        <div className=\"pt-6\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2 mb-4\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Fanout Type</span>\n              <Badge variant=\"outline\">\n                {form.watch(\"fanoutType\")} fanout\n              </Badge>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Total Members</span>\n              <span className=\"font-medium\">{form.watch(\"members\").length}</span>\n            </div>\n            {connected && publicKey && (\n              <div className=\"flex justify-between items-center text-sm\">\n                <span>Wallet</span>\n                <span className=\"font-mono text-xs\">\n                  {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {!connected ? (\n            <ConnectWalletButton className=\"w-full\" />\n          ) : (\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSubmitting || totalShares !== 100}\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                <>\n                  <GitBranch className=\"mr-2 h-4 w-4\" />\n                  Create Hydra Fanout\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Hydra Fanout has been created successfully\n        </p>\n      </div>\n\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Fanout Address:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.fanoutAddress?.slice(0, 8)}...{result?.fanoutAddress?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => copyToClipboard(result?.fanoutAddress || \"\")}\n            >\n              <Copy className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Transaction:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={viewExplorer}\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Type:</span>\n          <Badge variant=\"outline\">{result?.fanoutType} fanout</Badge>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Members:</span>\n          <span className=\"text-sm font-medium\">{result?.totalMembers}</span>\n        </div>\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button onClick={viewFanout} variant=\"outline\" className=\"flex-1\">\n          <Eye className=\"h-4 w-4 mr-2\" />\n          View Fanout\n        </Button>\n        <Button onClick={resetForm} className=\"flex-1\">\n          Create Another\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <X className=\"h-10 w-10 text-red-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\n        <p className=\"text-muted-foreground\">\n          Failed to create Hydra Fanout\n        </p>\n      </div>\n\n      <div className=\"rounded-lg bg-red-50 p-4\">\n        <p className=\"text-sm text-red-600\">{error}</p>\n      </div>\n\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Hydra Fanout</h3>\n      <p className=\"text-muted-foreground\">\n        Please wait while your fanout is being created...\n      </p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case \"success\":\n        return renderSuccess();\n      case \"error\":\n        return renderError();\n      case \"confirming\":\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Hydra Fanout</CardTitle>\n          <CardDescription>\n            Create fanout wallets for multi-recipient distributions\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GitBranch className=\"h-5 w-5\" />\n              Hydra Fanout\n            </CardTitle>\n            <CardDescription>\n              Create fanout wallets for multi-recipient distributions\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {connected && publicKey && (\n              <Badge variant=\"outline\">\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n              </Badge>\n            )}\n            <Badge variant=\"outline\">{network}</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport { HydraFanoutForm };"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Hydra",
    "tags": [
        "fanout",
        "distribution",
        "multi-recipient",
        "payout",
        "metaplex",
        "hydra",
        "solana",
        "form",
        "revenue-sharing",
        "automated-distribution"
    ]
}