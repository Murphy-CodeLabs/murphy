{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hydra-fanout-form",
  "type": "registry:block",
  "title": "Hydra Fanout Form",
  "description": "Distribute SOL or SPL tokens to multiple recipients with advanced options.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "tabs",
    "switch",
    "label",
    "badge"
  ],
  "files": [
    {
      "path": "components/ui/murphy/hydra-fanout-form.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\nimport { PublicKey, SystemProgram, Transaction, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport { createTransferInstruction, getAssociatedTokenAddress, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\n\r\n// Icons\r\nimport {\r\n  Loader2,\r\n  Upload,\r\n  Plus,\r\n  X,\r\n  Copy,\r\n  ExternalLink,\r\n  Users,\r\n  Send,\r\n  Coins,\r\n  DollarSign,\r\n  Settings,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  FileText\r\n} from \"lucide-react\";\r\n\r\n// Notifications\r\nimport { toast } from \"sonner\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Types\r\ninterface HydraFanoutResult {\r\n  fanout: string;\r\n  distributionSignatures: string[];\r\n  totalRecipients: number;\r\n  totalAmount: number;\r\n  successfulTransfers: number;\r\n  failedTransfers: number;\r\n}\r\n\r\ninterface Recipient {\r\n  address: string;\r\n  amount: number;\r\n  share: number;\r\n}\r\n\r\ntype DistributionType = 'fixed' | 'percentage' | 'equal';\r\ntype TokenType = 'SOL' | 'SPL';\r\n\r\n// Form Schema\r\nconst formSchema = z.object({\r\n  distributionType: z.enum(['fixed', 'percentage', 'equal']),\r\n  tokenType: z.enum(['SOL', 'SPL']),\r\n  tokenMint: z.string(),\r\n  totalAmount: z.number().min(0, \"Amount must be non-negative\"),\r\n  recipients: z.array(z.object({\r\n    address: z.string(),\r\n    amount: z.number().min(0, \"Amount must be non-negative\"),\r\n    share: z.number().min(0).max(100),\r\n  })).min(1, \"At least one recipient is required\"),\r\n  batchSize: z.number().min(1).max(20),\r\n  delayBetweenBatches: z.number().min(0).max(5000),\r\n  enableFanout: z.boolean(),\r\n  fanoutName: z.string(),\r\n  csvData: z.string(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\ninterface HydraFanoutFormProps {\r\n  className?: string;\r\n  onDistributionComplete?: (result: HydraFanoutResult) => void;\r\n  defaultTokenType?: TokenType;\r\n}\r\n\r\nexport function HydraFanoutForm({\r\n  className,\r\n  onDistributionComplete,\r\n  defaultTokenType = 'SOL'\r\n}: HydraFanoutFormProps) {\r\n  // Hooks\r\n  const { publicKey, connected, wallet } = useWallet();\r\n  const { connection } = useConnection();\r\n  const { endpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [mounted, setMounted] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'processing' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [result, setResult] = useState<HydraFanoutResult | null>(null);\r\n  const [network, setNetwork] = useState<'devnet' | 'mainnet'>('devnet');\r\n  const [activeFormTab, setActiveFormTab] = useState(\"setup\");\r\n  const [progress, setProgress] = useState({ current: 0, total: 0 });\r\n\r\n  // Form\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      distributionType: 'fixed',\r\n      tokenType: defaultTokenType,\r\n      tokenMint: \"\",\r\n      totalAmount: 0,\r\n      recipients: [{ address: \"\", amount: 0, share: 0 }],\r\n      batchSize: 10,\r\n      delayBetweenBatches: 1000,\r\n      enableFanout: false,\r\n      fanoutName: \"\",\r\n      csvData: \"\",\r\n    },\r\n  });\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = (address: string, type: 'address' | 'tx' = 'address') => {\r\n    const baseUrl = network === 'devnet'\r\n      ? `https://explorer.solana.com/${type}/`\r\n      : `https://solscan.io/${type === 'address' ? 'account' : 'tx'}/`;\r\n    window.open(\r\n      `${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n      '_blank'\r\n    );\r\n  };\r\n\r\n  // Recipient management\r\n  const addRecipient = () => {\r\n    const currentRecipients = form.getValues('recipients');\r\n    form.setValue('recipients', [\r\n      ...currentRecipients,\r\n      { address: \"\", amount: 0, share: 0 }\r\n    ]);\r\n  };\r\n\r\n  const removeRecipient = (index: number) => {\r\n    const currentRecipients = form.getValues('recipients');\r\n    if (currentRecipients.length > 1) {\r\n      form.setValue('recipients', currentRecipients.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  // CSV import functionality\r\n  const handleCSVImport = (csvText: string) => {\r\n    if (!csvText || csvText.trim() === '') {\r\n      toast.error(\"Please enter CSV data\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const lines = csvText.trim().split('\\n');\r\n      const recipients: Recipient[] = [];\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i].trim();\r\n        if (!line) continue;\r\n\r\n        const parts = line.split(',').map(part => part.trim());\r\n        if (parts.length < 2) {\r\n          throw new Error(`Invalid CSV format at line ${i + 1}. Expected: address,amount`);\r\n        }\r\n\r\n        const address = parts[0];\r\n        const amount = parseFloat(parts[1]);\r\n\r\n        if (!address || isNaN(amount) || amount < 0) {\r\n          throw new Error(`Invalid data at line ${i + 1}`);\r\n        }\r\n\r\n        // Ensure all required properties are set\r\n        recipients.push({\r\n          address,\r\n          amount,\r\n          share: 0  // Default share value\r\n        });\r\n      }\r\n\r\n      if (recipients.length === 0) {\r\n        throw new Error(\"No valid recipients found in CSV\");\r\n      }\r\n\r\n      form.setValue('recipients', recipients);\r\n      form.setValue('csvData', ''); // Clear CSV data after import\r\n      toast.success(`Imported ${recipients.length} recipients from CSV`);\r\n    } catch (err: any) {\r\n      toast.error(\"CSV Import Error: \" + err.message);\r\n    }\r\n  };\r\n\r\n  // Calculate equal distribution\r\n  const calculateEqualDistribution = () => {\r\n    const totalAmount = form.getValues('totalAmount') || 0;\r\n    const recipients = form.getValues('recipients');\r\n    const amountPerRecipient = totalAmount / recipients.length;\r\n\r\n    const updatedRecipients = recipients.map(recipient => ({\r\n      ...recipient,\r\n      amount: amountPerRecipient\r\n    }));\r\n\r\n    form.setValue('recipients', updatedRecipients);\r\n  };\r\n\r\n  // Validate recipients\r\n  const validateRecipients = (recipients: Recipient[]): string | null => {\r\n    for (let i = 0; i < recipients.length; i++) {\r\n      const recipient = recipients[i];\r\n\r\n      // Validate address\r\n      if (!recipient.address || recipient.address.trim() === '') {\r\n        return `Address is required for recipient ${i + 1}`;\r\n      }\r\n\r\n      try {\r\n        new PublicKey(recipient.address);\r\n      } catch {\r\n        return `Invalid address at recipient ${i + 1}`;\r\n      }\r\n\r\n      // Validate amounts based on distribution type\r\n      const distributionType = form.getValues('distributionType');\r\n\r\n      if (distributionType === 'fixed' && (!recipient.amount || recipient.amount <= 0)) {\r\n        return `Invalid amount at recipient ${i + 1}`;\r\n      }\r\n\r\n      if (distributionType === 'percentage' && (!recipient.share || recipient.share <= 0)) {\r\n        return `Invalid share at recipient ${i + 1}`;\r\n      }\r\n    }\r\n\r\n    // Validate percentage totals\r\n    if (form.getValues('distributionType') === 'percentage') {\r\n      const totalShare = recipients.reduce((sum, r) => sum + (r.share || 0), 0);\r\n      if (Math.abs(totalShare - 100) > 0.01) {\r\n        return `Total shares must equal 100% (currently ${totalShare}%)`;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Create SOL transfer instruction\r\n  const createSOLTransferInstruction = (to: PublicKey, amount: number) => {\r\n    return SystemProgram.transfer({\r\n      fromPubkey: publicKey!,\r\n      toPubkey: to,\r\n      lamports: Math.floor(amount * LAMPORTS_PER_SOL),\r\n    });\r\n  };\r\n\r\n  // Create SPL token transfer instruction\r\n  const createSPLTransferInstruction = async (to: PublicKey, mint: PublicKey, amount: number) => {\r\n    const fromTokenAccount = await getAssociatedTokenAddress(mint, publicKey!);\r\n    const toTokenAccount = await getAssociatedTokenAddress(mint, to);\r\n\r\n    return createTransferInstruction(\r\n      fromTokenAccount,\r\n      toTokenAccount,\r\n      publicKey!,\r\n      Math.floor(amount * Math.pow(10, 9)), // Assuming 9 decimals\r\n    );\r\n  };\r\n\r\n  // Process batch distribution\r\n  const processBatch = async (recipients: Recipient[], batchIndex: number) => {\r\n    const transaction = new Transaction();\r\n    const values = form.getValues();\r\n\r\n    for (const recipient of recipients) {\r\n      const recipientPubkey = new PublicKey(recipient.address);\r\n\r\n      if (values.tokenType === 'SOL') {\r\n        const instruction = createSOLTransferInstruction(recipientPubkey, recipient.amount || 0);\r\n        transaction.add(instruction);\r\n      } else if (values.tokenType === 'SPL' && values.tokenMint) {\r\n        const mintPubkey = new PublicKey(values.tokenMint);\r\n        const instruction = await createSPLTransferInstruction(recipientPubkey, mintPubkey, recipient.amount || 0);\r\n        transaction.add(instruction);\r\n      }\r\n    }\r\n\r\n    // Get latest blockhash\r\n    const { blockhash } = await connection.getLatestBlockhash();\r\n    transaction.recentBlockhash = blockhash;\r\n    transaction.feePayer = publicKey!;\r\n\r\n    // Sign and send transaction\r\n    const signature = await wallet!.adapter.sendTransaction(transaction, connection);\r\n\r\n    // Wait for confirmation\r\n    await connection.confirmTransaction(signature);\r\n\r\n    return signature;\r\n  };\r\n\r\n  // Main submission handler\r\n  const onSubmit = async (values: FormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    // Validate recipients\r\n    const validationError = validateRecipients(values.recipients);\r\n    if (validationError) {\r\n      toast.error(validationError);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('confirming');\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Starting distribution...\", { id: \"distribution\" });\r\n\r\n      // Prepare recipients based on distribution type\r\n      let finalRecipients: Recipient[] = [...values.recipients];\r\n\r\n      if (values.distributionType === 'percentage') {\r\n        // Calculate amounts from percentages\r\n        finalRecipients = values.recipients.map(r => ({\r\n          ...r,\r\n          amount: (values.totalAmount * r.share) / 100\r\n        }));\r\n      } else if (values.distributionType === 'equal') {\r\n        // Calculate equal amounts\r\n        const amountPerRecipient = values.totalAmount / values.recipients.length;\r\n        finalRecipients = values.recipients.map(r => ({\r\n          ...r,\r\n          amount: amountPerRecipient\r\n        }));\r\n      }\r\n\r\n      // Process in batches\r\n      const signatures: string[] = [];\r\n      const batchSize = values.batchSize;\r\n      const batches = [];\r\n\r\n      for (let i = 0; i < finalRecipients.length; i += batchSize) {\r\n        batches.push(finalRecipients.slice(i, i + batchSize));\r\n      }\r\n\r\n      setCurrentStage('processing');\r\n      setProgress({ current: 0, total: batches.length });\r\n\r\n      let successfulTransfers = 0;\r\n      let failedTransfers = 0;\r\n\r\n      for (let i = 0; i < batches.length; i++) {\r\n        try {\r\n          const signature = await processBatch(batches[i], i);\r\n          signatures.push(signature);\r\n          successfulTransfers += batches[i].length;\r\n\r\n          setProgress({ current: i + 1, total: batches.length });\r\n\r\n          // Delay between batches\r\n          if (i < batches.length - 1 && values.delayBetweenBatches > 0) {\r\n            await new Promise(resolve => setTimeout(resolve, values.delayBetweenBatches));\r\n          }\r\n        } catch (err) {\r\n          console.error(`Batch ${i + 1} failed:`, err);\r\n          failedTransfers += batches[i].length;\r\n        }\r\n      }\r\n\r\n      // Set result\r\n      const totalAmount = finalRecipients.reduce((sum, r) => sum + (r.amount || 0), 0);\r\n      const result: HydraFanoutResult = {\r\n        fanout: values.enableFanout ? `fanout-${Date.now()}` : \"\",\r\n        distributionSignatures: signatures,\r\n        totalRecipients: finalRecipients.length,\r\n        totalAmount,\r\n        successfulTransfers,\r\n        failedTransfers\r\n      };\r\n\r\n      setResult(result);\r\n      setCurrentStage('success');\r\n\r\n      if (onDistributionComplete) {\r\n        onDistributionComplete(result);\r\n      }\r\n\r\n      toast.success(`Distribution completed! ${successfulTransfers}/${finalRecipients.length} successful`, {\r\n        id: \"distribution\"\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Distribution error:\", err);\r\n      setError(err.message || \"Distribution failed\");\r\n      setCurrentStage('error');\r\n\r\n      toast.error(\"Distribution failed\", {\r\n        id: \"distribution\",\r\n        description: err.message\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage('input');\r\n    setError(\"\");\r\n    setProgress({ current: 0, total: 0 });\r\n  };\r\n\r\n  // Render stages\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"text-center\">\r\n        <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\">\r\n          <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n        </div>\r\n        <h3 className=\"mt-2 text-lg font-semibold\">Distribution Completed!</h3>\r\n        <p className=\"text-muted-foreground\">Your tokens have been distributed</p>\r\n      </div>\r\n\r\n      {result && (\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <div className=\"space-y-3\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Total Recipients</Label>\r\n                <p className=\"text-sm\">{result.totalRecipients}</p>\r\n              </div>\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Total Amount</Label>\r\n                <p className=\"text-sm\">{result.totalAmount.toFixed(6)} {form.getValues('tokenType')}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Successful</Label>\r\n                <p className=\"text-sm text-green-600\">{result.successfulTransfers}</p>\r\n              </div>\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Failed</Label>\r\n                <p className=\"text-sm text-red-600\">{result.failedTransfers}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label className=\"text-sm font-medium\">Transactions ({result.distributionSignatures.length})</Label>\r\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\r\n                {result.distributionSignatures.map((sig, index) => (\r\n                  <div key={index} className=\"flex items-center gap-2\">\r\n                    <span className=\"text-xs font-mono\">\r\n                      {sig.slice(0, 8)}...{sig.slice(-8)}\r\n                    </span>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => viewInExplorer(sig, 'tx')}\r\n                    >\r\n                      <ExternalLink className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create New Distribution\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-6 w-6 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Distribution Failed</h3>\r\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n        <p className=\"text-sm\">{error}</p>\r\n      </div>\r\n      <Button onClick={() => setCurrentStage('input')} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderProcessing = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Processing Distribution</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Processing batch {progress.current} of {progress.total}...\r\n      </p>\r\n      <div className=\"w-full bg-secondary rounded-full h-2\">\r\n        <div\r\n          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\r\n          style={{ width: `${(progress.current / progress.total) * 100}%` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Preparing Distribution</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please confirm the transactions in your wallet...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        <Tabs value={activeFormTab} onValueChange={setActiveFormTab} className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"setup\">Setup</TabsTrigger>\r\n            <TabsTrigger value=\"recipients\">Recipients</TabsTrigger>\r\n            <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"setup\" className=\"space-y-4\">\r\n            {/* Distribution Type */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"distributionType\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Distribution Type</FormLabel>\r\n                  <FormControl>\r\n                    <Select value={field.value} onValueChange={field.onChange}>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Select distribution type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\r\n                        <SelectItem value=\"percentage\">Percentage</SelectItem>\r\n                        <SelectItem value=\"equal\">Equal Split</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* Token Type */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"tokenType\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Token Type</FormLabel>\r\n                  <FormControl>\r\n                    <Tabs value={field.value} onValueChange={field.onChange}>\r\n                      <TabsList className=\"grid w-full grid-cols-2\">\r\n                        <TabsTrigger value=\"SOL\">\r\n                          <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                          SOL\r\n                        </TabsTrigger>\r\n                        <TabsTrigger value=\"SPL\">\r\n                          <Coins className=\"h-4 w-4 mr-2\" />\r\n                          SPL Token\r\n                        </TabsTrigger>\r\n                      </TabsList>\r\n                    </Tabs>\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {/* SPL Token Mint */}\r\n            {form.watch('tokenType') === 'SPL' && (\r\n              <FormField\r\n                control={form.control}\r\n                name=\"tokenMint\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Token Mint Address</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Enter SPL token mint address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            )}\r\n\r\n            {/* Total Amount */}\r\n            {(form.watch('distributionType') === 'percentage' || form.watch('distributionType') === 'equal') && (\r\n              <FormField\r\n                control={form.control}\r\n                name=\"totalAmount\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Total Amount to Distribute</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        type=\"number\"\r\n                        step=\"0.000000001\"\r\n                        placeholder=\"0.0\"\r\n                        {...field}\r\n                        onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            )}\r\n\r\n            {/* Equal Distribution Helper */}\r\n            {form.watch('distributionType') === 'equal' && (\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                onClick={calculateEqualDistribution}\r\n                className=\"w-full\"\r\n              >\r\n                Calculate Equal Distribution\r\n              </Button>\r\n            )}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"recipients\" className=\"space-y-4\">\r\n            {/* CSV Import */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <Label className=\"text-base font-semibold\">CSV Import</Label>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"csvData\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>CSV Data (address,amount)</FormLabel>\r\n                    <FormControl>\r\n                      <Textarea\r\n                        placeholder=\"address1,100&#10;address2,200&#10;address3,150\"\r\n                        {...field}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                onClick={() => handleCSVImport(form.getValues('csvData') || '')}\r\n                className=\"w-full\"\r\n              >\r\n                <FileText className=\"h-4 w-4 mr-2\" />\r\n                Import from CSV\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Recipients List */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Recipients</Label>\r\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addRecipient}>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Recipient\r\n                </Button>\r\n              </div>\r\n\r\n              {form.watch('recipients').map((_, index) => (\r\n                <div key={index} className=\"border rounded-lg p-4 space-y-3\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>Recipient {index + 1}</Label>\r\n                    {form.watch('recipients').length > 1 && (\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeRecipient(index)}\r\n                      >\r\n                        <X className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n\r\n                  <FormField\r\n                    control={form.control}\r\n                    name={`recipients.${index}.address`}\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Address</FormLabel>\r\n                        <FormControl>\r\n                          <Input placeholder=\"Recipient wallet address\" {...field} />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  {form.watch('distributionType') === 'fixed' && (\r\n                    <FormField\r\n                      control={form.control}\r\n                      name={`recipients.${index}.amount`}\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Amount</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              type=\"number\"\r\n                              step=\"0.000000001\"\r\n                              placeholder=\"0.0\"\r\n                              {...field}\r\n                              onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  )}\r\n\r\n                  {form.watch('distributionType') === 'percentage' && (\r\n                    <FormField\r\n                      control={form.control}\r\n                      name={`recipients.${index}.share`}\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Share (%)</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              type=\"number\"\r\n                              min=\"0\"\r\n                              max=\"100\"\r\n                              step=\"0.01\"\r\n                              placeholder=\"0.0\"\r\n                              {...field}\r\n                              onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  )}\r\n\r\n                  {form.watch('distributionType') === 'equal' && (\r\n                    <div>\r\n                      <Label>Amount (calculated)</Label>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {((form.getValues('totalAmount') || 0) / form.getValues('recipients').length).toFixed(6)}\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"advanced\" className=\"space-y-4\">\r\n            {/* Batch Settings */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <Label className=\"text-base font-semibold\">Batch Settings</Label>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"batchSize\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Batch Size</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"1\"\r\n                          max=\"20\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseInt(e.target.value) || 10)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"delayBetweenBatches\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Delay (ms)</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"5000\"\r\n                          step=\"100\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseInt(e.target.value) || 1000)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Fanout Settings */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"enableFanout\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"flex items-center space-x-2\">\r\n                    <FormControl>\r\n                      <Switch\r\n                        checked={field.value}\r\n                        onCheckedChange={field.onChange}\r\n                      />\r\n                    </FormControl>\r\n                    <div className=\"space-y-1 leading-none\">\r\n                      <Label>Enable Hydra Fanout</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Create a reusable fanout for future distributions\r\n                      </p>\r\n                    </div>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              {form.watch('enableFanout') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"fanoutName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Fanout Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"My Distribution Fanout\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Network Info */}\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n          <div className=\"flex justify-between items-center text-sm\">\r\n            <span>Network</span>\r\n            <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n              {network}\r\n            </Badge>\r\n          </div>\r\n          {connected && publicKey && (\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Wallet</span>\r\n              <span className=\"font-mono text-xs\">\r\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"pt-2\">\r\n          {!connected ? (\r\n            <ConnectWalletButton className=\"w-full\" />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"w-full\"\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Processing Distribution...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Send className=\"mr-2 h-4 w-4\" />\r\n                  Start Distribution\r\n                </>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'processing':\r\n        return renderProcessing();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Hydra Fanout Distribution</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Users className=\"h-6 w-6\" />\r\n          Hydra Fanout Distribution\r\n        </CardTitle>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          Distribute tokens or SOL to multiple recipients efficiently\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default HydraFanoutForm;",
      "type": "registry:component",
      "target": "components/ui/murphy/hydra-fanout-form.tsx"
    }
  ]
}