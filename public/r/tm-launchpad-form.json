{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tm-launchpad-form",
  "type": "registry:block",
  "title": "Token Metadata Launchpad Form",
  "description": "Launchpad for minting tokens with metadata.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/tm-launchpad-form.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription\r\n} from \"@/components/ui/card\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport {\r\n  mplTokenMetadata,\r\n  createV1,\r\n  createFungible, // Fix: use createFungible instead of createFungibleV1\r\n  fetchMetadata,\r\n  TokenStandard\r\n} from '@metaplex-foundation/mpl-token-metadata';\r\nimport {\r\n  generateSigner,\r\n  percentAmount,\r\n  publicKey as umiPublicKey,\r\n  createGenericFile,\r\n  sol\r\n} from '@metaplex-foundation/umi';\r\n// Icons\r\nimport { Coins, FileImage, Users, Settings, Plus, X, Loader2 } from \"lucide-react\";\r\n\r\n// Notifications\r\nimport { toast } from \"sonner\";\r\n\r\n// Types\r\ninterface TMLaunchpadResult {\r\n  mint: string;\r\n  signature: string;\r\n  tokenType: string;\r\n}\r\n\r\nconst formSchema = z.object({\r\n  tokenType: z.enum(['fungible', 'nft', 'programmable-nft']),\r\n  name: z.string().min(1, \"Name is required\"),\r\n  symbol: z.string().min(1, \"Symbol is required\"),\r\n  description: z.string(),\r\n  image: z.string(),\r\n  externalUrl: z.string(),\r\n  decimals: z.number().min(0).max(9),\r\n  supply: z.number().min(1),\r\n\r\n  // NFT specific\r\n  attributes: z.array(z.object({\r\n    trait_type: z.string(),\r\n    value: z.string(),\r\n  })),\r\n  creators: z.array(z.object({\r\n    address: z.string(),\r\n    share: z.number().min(0).max(100),\r\n    verified: z.boolean(),\r\n  })),\r\n  sellerFeeBasisPoints: z.number().min(0).max(10000),\r\n  isMutable: z.boolean(),\r\n  collection: z.string(),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\ninterface TMLaunchpadFormProps {\r\n  className?: string;\r\n  onTokenCreated?: (result: TMLaunchpadResult) => void;\r\n}\r\n\r\nexport function TMLaunchpadForm({\r\n  className,\r\n  onTokenCreated\r\n}: TMLaunchpadFormProps) {\r\n  // State\r\n  const [mounted, setMounted] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"basic\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [result, setResult] = useState<TMLaunchpadResult | null>(null);\r\n\r\n  // Hooks\r\n  const { publicKey, connected } = useWallet();\r\n  const { connection } = useConnection();\r\n\r\n  // Form\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      tokenType: 'fungible',\r\n      name: \"\",\r\n      symbol: \"\",\r\n      description: \"\",\r\n      image: \"\",\r\n      externalUrl: \"\",\r\n      decimals: 9,\r\n      supply: 1000000,\r\n      sellerFeeBasisPoints: 500,\r\n      isMutable: true,\r\n      creators: [\r\n        {\r\n          address: \"\",\r\n          share: 100,\r\n          verified: true,\r\n        }\r\n      ],\r\n      attributes: [],\r\n      collection: \"\",\r\n    },\r\n  });\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      const creators = form.getValues(\"creators\");\r\n      if (creators && creators[0] && !creators[0].address) {\r\n        creators[0].address = publicKey.toString();\r\n        form.setValue(\"creators\", creators);\r\n      }\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  // Handlers\r\n  const onSubmit = async (values: FormValues) => {\r\n    if (!connected || !publicKey) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    // Validate creators share total\r\n    const totalShare = values.creators?.reduce((sum, creator) => sum + (creator.share || 0), 0) || 0;\r\n    if (values.creators && values.creators.length > 0 && totalShare !== 100) {\r\n      toast.error(\"Creator shares must total 100%\");\r\n      return;\r\n    }\r\n\r\n    // Validate fungible token fields\r\n    if (values.tokenType === 'fungible') {\r\n      if (!values.decimals && values.decimals !== 0) {\r\n        toast.error(\"Decimals is required for fungible tokens\");\r\n        return;\r\n      }\r\n      if (!values.supply) {\r\n        toast.error(\"Supply is required for fungible tokens\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Validate creator addresses\r\n    if (values.creators) {\r\n      for (let i = 0; i < values.creators.length; i++) {\r\n        const creator = values.creators[i];\r\n        if (!creator.address || creator.address.trim() === '') {\r\n          toast.error(`Creator ${i + 1} address is required`);\r\n          return;\r\n        }\r\n\r\n        // Simple Solana address validation (base58, length check)\r\n        const addressRegex = /^[1-9A-HJ-NP-Za-km-z]{32,44}$/;\r\n        if (!addressRegex.test(creator.address)) {\r\n          toast.error(`Creator ${i + 1} has invalid address format`);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('confirming');\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Creating token...\", { id: \"token-create\" });\r\n\r\n      // Create UMI instance\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity({\r\n          publicKey,\r\n          signTransaction: async (transaction) => {\r\n            // Fix: Use proper wallet adapter\r\n            const { signTransaction } = useWallet();\r\n            if (!signTransaction) throw new Error('Wallet does not support signing');\r\n            return signTransaction(transaction);\r\n          },\r\n          signAllTransactions: async (transactions) => {\r\n            const { signAllTransactions } = useWallet();\r\n            if (!signAllTransactions) throw new Error('Wallet does not support signing multiple transactions');\r\n            return signAllTransactions(transactions);\r\n          }\r\n        }))\r\n        .use(mplTokenMetadata());\r\n\r\n      // Generate mint keypair\r\n      const mint = generateSigner(umi);\r\n\r\n      // Prepare metadata\r\n      const metadata = {\r\n        name: values.name,\r\n        symbol: values.symbol,\r\n        description: values.description,\r\n        image: values.image,\r\n        external_url: values.externalUrl,\r\n        attributes: values.attributes || [],\r\n      };\r\n\r\n      // Prepare creators\r\n      const creators = values.creators?.map(creator => ({\r\n        address: umiPublicKey(creator.address),\r\n        verified: creator.verified,\r\n        share: creator.share,\r\n      })) || [];\r\n\r\n      let signature: string;\r\n\r\n      if (values.tokenType === 'fungible') {\r\n        // Create fungible token - Fix: use createFungible instead of createFungibleV1\r\n        const createResult = await createFungible(umi, {\r\n          mint,\r\n          name: values.name,\r\n          symbol: values.symbol,\r\n          uri: values.image, // For demo, using image as URI\r\n          sellerFeeBasisPoints: percentAmount(values.sellerFeeBasisPoints / 100),\r\n          decimals: values.decimals,\r\n          creators: creators.length > 0 ? creators : undefined,\r\n          isMutable: values.isMutable,\r\n        }).sendAndConfirm(umi);\r\n\r\n        signature = createResult.signature.toString();\r\n      } else {\r\n        // Create NFT or Programmable NFT\r\n        const createResult = await createV1(umi, {\r\n          mint,\r\n          name: values.name,\r\n          symbol: values.symbol,\r\n          uri: values.image, // For demo, using image as URI\r\n          sellerFeeBasisPoints: percentAmount(values.sellerFeeBasisPoints / 100),\r\n          creators: creators.length > 0 ? creators : undefined,\r\n          isMutable: values.isMutable,\r\n          isCollection: false,\r\n          tokenStandard: values.tokenType === 'programmable-nft' ? TokenStandard.ProgrammableNonFungible : TokenStandard.NonFungible,\r\n        }).sendAndConfirm(umi);\r\n\r\n        signature = createResult.signature.toString();\r\n      }\r\n\r\n      const result: TMLaunchpadResult = {\r\n        mint: mint.publicKey.toString(),\r\n        signature,\r\n        tokenType: values.tokenType\r\n      };\r\n\r\n      setResult(result);\r\n      setCurrentStage('success');\r\n\r\n      if (onTokenCreated) {\r\n        onTokenCreated(result);\r\n      }\r\n\r\n      toast.success(\"Token created successfully!\", { id: \"token-create\" });\r\n\r\n    } catch (error: any) {\r\n      console.error(\"Error creating token:\", error);\r\n      setError(error.message || \"Failed to create token\");\r\n      setCurrentStage('error');\r\n      toast.error(\"Failed to create token\", {\r\n        id: \"token-create\",\r\n        description: error.message\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Add creator\r\n  const addCreator = () => {\r\n    const currentCreators = form.getValues(\"creators\") || [];\r\n    form.setValue(\"creators\", [\r\n      ...currentCreators,\r\n      { address: \"\", share: 0, verified: false }\r\n    ]);\r\n  };\r\n\r\n  // Remove creator\r\n  const removeCreator = (index: number) => {\r\n    const currentCreators = form.getValues(\"creators\") || [];\r\n    if (currentCreators.length > 1) {\r\n      form.setValue(\"creators\", currentCreators.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  // Add attribute\r\n  const addAttribute = () => {\r\n    const currentAttributes = form.getValues(\"attributes\") || [];\r\n    form.setValue(\"attributes\", [\r\n      ...currentAttributes,\r\n      { trait_type: \"\", value: \"\" }\r\n    ]);\r\n  };\r\n\r\n  // Remove attribute\r\n  const removeAttribute = (index: number) => {\r\n    const currentAttributes = form.getValues(\"attributes\") || [];\r\n    form.setValue(\"attributes\", currentAttributes.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage('input');\r\n    setError(\"\");\r\n    setActiveTab(\"basic\");\r\n  };\r\n\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\">\r\n        <Coins className=\"h-6 w-6 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Token Created Successfully!</h3>\r\n      <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-sm\">Mint:</span>\r\n            <span className=\"text-sm font-mono\">{result?.mint}</span>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <span className=\"text-sm\">Type:</span>\r\n            <span className=\"text-sm\">{result?.tokenType}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create Another Token\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-6 w-6 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Creation Failed</h3>\r\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n        <p className=\"text-sm\">{error}</p>\r\n      </div>\r\n      <Button onClick={() => setCurrentStage('input')} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Creating Token</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please wait while your token is being created...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Token Metadata Launchpad</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center p-6\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return (\r\n          <Form {...form}>\r\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n                <TabsList className=\"grid w-full grid-cols-3\">\r\n                  <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\r\n                  <TabsTrigger value=\"creators\">Creators</TabsTrigger>\r\n                  <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\r\n                </TabsList>\r\n\r\n                <TabsContent value=\"basic\" className=\"space-y-6 mt-6\">\r\n                  {/* Token Type Selection */}\r\n                  <div className=\"space-y-4\">\r\n                    <h3 className=\"text-lg font-semibold\">Token Type</h3>\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"tokenType\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormControl>\r\n                            <div className=\"grid grid-cols-3 gap-4\">\r\n                              <div\r\n                                className={`border rounded-lg p-4 cursor-pointer transition-colors ${field.value === 'fungible' ? 'border-primary bg-primary/5' : 'border-border'\r\n                                  }`}\r\n                                onClick={() => field.onChange('fungible')}\r\n                              >\r\n                                <Coins className=\"h-6 w-6 mb-2\" />\r\n                                <h4 className=\"font-medium\">Fungible Token</h4>\r\n                              </div>\r\n                              <div\r\n                                className={`border rounded-lg p-4 cursor-pointer transition-colors ${field.value === 'nft' ? 'border-primary bg-primary/5' : 'border-border'\r\n                                  }`}\r\n                                onClick={() => field.onChange('nft')}\r\n                              >\r\n                                <FileImage className=\"h-6 w-6 mb-2\" />\r\n                                <h4 className=\"font-medium\">NFT</h4>\r\n                              </div>\r\n                              <div\r\n                                className={`border rounded-lg p-4 cursor-pointer transition-colors ${field.value === 'programmable-nft' ? 'border-primary bg-primary/5' : 'border-border'\r\n                                  }`}\r\n                                onClick={() => field.onChange('programmable-nft')}\r\n                              >\r\n                                <Settings className=\"h-6 w-6 mb-2\" />\r\n                                <h4 className=\"font-medium\">Programmable NFT</h4>\r\n                              </div>\r\n                            </div>\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Basic Token Information */}\r\n                  <div className=\"space-y-4\">\r\n                    <h3 className=\"text-lg font-semibold\">Token Details</h3>\r\n\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"name\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Token Name</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"My Awesome Token\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name=\"symbol\"\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Symbol</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"MAT\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"description\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Description</FormLabel>\r\n                          <FormControl>\r\n                            <Textarea\r\n                              placeholder=\"Describe your token...\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"image\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Image URL</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              placeholder=\"https://example.com/image.png\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    {/* Fungible Token specific fields */}\r\n                    {form.watch(\"tokenType\") === \"fungible\" && (\r\n                      <div className=\"grid grid-cols-2 gap-4\">\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"decimals\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Decimals</FormLabel>\r\n                              <FormControl>\r\n                                <Input\r\n                                  type=\"number\"\r\n                                  min=\"0\"\r\n                                  max=\"9\"\r\n                                  {...field}\r\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                                />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n\r\n                        <FormField\r\n                          control={form.control}\r\n                          name=\"supply\"\r\n                          render={({ field }) => (\r\n                            <FormItem>\r\n                              <FormLabel>Supply</FormLabel>\r\n                              <FormControl>\r\n                                <Input\r\n                                  type=\"number\"\r\n                                  min=\"1\"\r\n                                  {...field}\r\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                                />\r\n                              </FormControl>\r\n                              <FormMessage />\r\n                            </FormItem>\r\n                          )}\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* NFT specific fields */}\r\n                    {(form.watch(\"tokenType\") === \"nft\" || form.watch(\"tokenType\") === \"programmable-nft\") && (\r\n                      <div className=\"space-y-4\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <Label>Attributes</Label>\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={addAttribute}\r\n                          >\r\n                            <Plus className=\"h-4 w-4 mr-2\" />\r\n                            Add Attribute\r\n                          </Button>\r\n                        </div>\r\n\r\n                        {form.watch(\"attributes\")?.map((_, index) => (\r\n                          <div key={index} className=\"flex gap-2 items-end\">\r\n                            <FormField\r\n                              control={form.control}\r\n                              name={`attributes.${index}.trait_type`}\r\n                              render={({ field }) => (\r\n                                <FormItem className=\"flex-1\">\r\n                                  <FormLabel>Trait</FormLabel>\r\n                                  <FormControl>\r\n                                    <Input placeholder=\"Color\" {...field} />\r\n                                  </FormControl>\r\n                                  <FormMessage />\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n                            <FormField\r\n                              control={form.control}\r\n                              name={`attributes.${index}.value`}\r\n                              render={({ field }) => (\r\n                                <FormItem className=\"flex-1\">\r\n                                  <FormLabel>Value</FormLabel>\r\n                                  <FormControl>\r\n                                    <Input placeholder=\"Blue\" {...field} />\r\n                                  </FormControl>\r\n                                  <FormMessage />\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => removeAttribute(index)}\r\n                            >\r\n                              <X className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"creators\" className=\"space-y-6 mt-6\">\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <h3 className=\"text-lg font-semibold\">Creator Information</h3>\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={addCreator}\r\n                      >\r\n                        <Plus className=\"h-4 w-4 mr-2\" />\r\n                        Add Creator\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {/* Creator cards với layout mở rộng */}\r\n                    <div className=\"space-y-4\">\r\n                      {form.watch(\"creators\")?.map((_, index) => (\r\n                        <div key={index} className=\"border rounded-lg p-6 space-y-4 min-w-full\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <Label className=\"text-base font-medium\">Creator {index + 1}</Label>\r\n                            {(form.watch(\"creators\")?.length || 0) > 1 && (\r\n                              <Button\r\n                                type=\"button\"\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => removeCreator(index)}\r\n                              >\r\n                                <X className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n\r\n                          {/* Address field - full width */}\r\n                          <FormField\r\n                            control={form.control}\r\n                            name={`creators.${index}.address`}\r\n                            render={({ field }) => (\r\n                              <FormItem className=\"w-full\">\r\n                                <FormLabel>Creator Address</FormLabel>\r\n                                <FormControl>\r\n                                  <Input\r\n                                    placeholder=\"Creator wallet address\"\r\n                                    {...field}\r\n                                    className=\"w-full\"\r\n                                  />\r\n                                </FormControl>\r\n                                <FormMessage />\r\n                              </FormItem>\r\n                            )}\r\n                          />\r\n\r\n                          {/* Share và Verified - side by side với spacing tốt hơn */}\r\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 items-end\">\r\n                            <FormField\r\n                              control={form.control}\r\n                              name={`creators.${index}.share`}\r\n                              render={({ field }) => (\r\n                                <FormItem className=\"md:col-span-2\">\r\n                                  <FormLabel>Share Percentage (%)</FormLabel>\r\n                                  <FormControl>\r\n                                    <Input\r\n                                      type=\"number\"\r\n                                      min=\"0\"\r\n                                      max=\"100\"\r\n                                      step=\"0.01\"\r\n                                      placeholder=\"0.00\"\r\n                                      {...field}\r\n                                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                                      className=\"w-full\"\r\n                                    />\r\n                                  </FormControl>\r\n                                  <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                    Percentage of royalties for this creator\r\n                                  </p>\r\n                                  <FormMessage />\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n\r\n                            <FormField\r\n                              control={form.control}\r\n                              name={`creators.${index}.verified`}\r\n                              render={({ field }) => (\r\n                                <FormItem className=\"flex flex-col space-y-2\">\r\n                                  <FormLabel>Verification Status</FormLabel>\r\n                                  <div className=\"flex items-center space-x-3 h-10\">\r\n                                    <FormControl>\r\n                                      <Switch\r\n                                        checked={field.value}\r\n                                        onCheckedChange={field.onChange}\r\n                                      />\r\n                                    </FormControl>\r\n                                    <Label className=\"text-sm\">\r\n                                      {field.value ? 'Verified' : 'Unverified'}\r\n                                    </Label>\r\n                                  </div>\r\n                                </FormItem>\r\n                              )}\r\n                            />\r\n                          </div>\r\n\r\n                          {/* Summary info */}\r\n                          <div className=\"bg-secondary/30 rounded-md p-3 mt-4\">\r\n                            <div className=\"flex justify-between items-center text-sm\">\r\n                              <span className=\"text-muted-foreground\">Creator Summary:</span>\r\n                              <span className=\"font-medium\">\r\n                                {form.watch(`creators.${index}.share`) || 0}% share,\r\n                                {form.watch(`creators.${index}.verified`) ? ' Verified' : ' Unverified'}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n\r\n                    {/* Total share validation */}\r\n                    <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"text-sm font-medium\">Total Creator Shares:</span>\r\n                        <span className={`text-sm font-medium ${(form.watch(\"creators\")?.reduce((sum, creator) => sum + (creator.share || 0), 0) || 0) === 100\r\n                          ? 'text-green-600'\r\n                          : 'text-orange-600'\r\n                          }`}>\r\n                          {form.watch(\"creators\")?.reduce((sum, creator) => sum + (creator.share || 0), 0) || 0}%\r\n                        </span>\r\n                      </div>\r\n                      {(form.watch(\"creators\")?.reduce((sum, creator) => sum + (creator.share || 0), 0) || 0) !== 100 && (\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          Total shares should equal 100% for proper royalty distribution\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"advanced\" className=\"space-y-6 mt-6\">\r\n                  <div className=\"space-y-4\">\r\n                    <h3 className=\"text-lg font-semibold\">Advanced Settings</h3>\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"sellerFeeBasisPoints\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Seller Fee (Basis Points)</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              type=\"number\"\r\n                              min=\"0\"\r\n                              max=\"10000\"\r\n                              {...field}\r\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                            />\r\n                          </FormControl>\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            500 = 5%. Maximum is 10000 (100%)\r\n                          </p>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"isMutable\"\r\n                      render={({ field }) => (\r\n                        <FormItem className=\"flex items-center space-x-2\">\r\n                          <FormControl>\r\n                            <Switch\r\n                              checked={field.value}\r\n                              onCheckedChange={field.onChange}\r\n                            />\r\n                          </FormControl>\r\n                          <div className=\"space-y-1 leading-none\">\r\n                            <Label>Mutable</Label>\r\n                            <p className=\"text-sm text-muted-foreground\">\r\n                              Allow metadata to be updated after creation\r\n                            </p>\r\n                          </div>\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"collection\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Collection (Optional)</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              placeholder=\"Collection mint address\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"externalUrl\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>External URL (Optional)</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              placeholder=\"https://yourproject.com\"\r\n                              {...field}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </TabsContent>\r\n              </Tabs>\r\n\r\n              {/* Submit Button */}\r\n              <div className=\"pt-6\">\r\n                {!connected ? (\r\n                  <ConnectWalletButton className=\"w-full\" />\r\n                ) : (\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"w-full\"\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    {isSubmitting ? (\r\n                      <>\r\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                        Creating...\r\n                      </>\r\n                    ) : (\r\n                      \"Create Token\"\r\n                    )}\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </Form>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Coins className=\"h-6 w-6\" />\r\n          Token Metadata Launchpad\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Create tokens with rich metadata using Metaplex Token Metadata standard\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default TMLaunchpadForm;",
      "type": "registry:component",
      "target": "components/ui/murphy/tm-launchpad-form.tsx"
    }
  ]
}