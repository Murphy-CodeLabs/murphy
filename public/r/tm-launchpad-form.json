{
    "name": "tm-launchpad-form",
    "description": "A comprehensive launchpad form for creating and launching fungible tokens on Solana using the Metaplex Token-Metadata standard, with shadcn UI styling.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-token-metadata",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "badge",
        "dialog",
        "label",
        "textarea"
    ],
    "files": [
        {
            "name": "tm-launchpad-form.tsx",
            "content": "'use client';\n\n// React vÃ  hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, RefreshCw, Copy } from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata, createFungible } from '@metaplex-foundation/mpl-token-metadata';\nimport { generateSigner, publicKey, percentAmount } from '@metaplex-foundation/umi';\n\ninterface TMLaunchpadResult {\n  mint: string;\n  signature: string;\n}\n\ntype TMLaunchpadFormValues = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  supply: number;\n  uri: string;\n  description: string;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  if (!data.name) errors.name = { type: \"required\", message: \"Token name is required\" };\n  if (!data.symbol) errors.symbol = { type: \"required\", message: \"Token symbol is required\" };\n  if (data.decimals === undefined || data.decimals < 0 || data.decimals > 18) errors.decimals = { type: \"pattern\", message: \"Decimals must be between 0 and 18\" };\n  if (data.supply === undefined || data.supply <= 0) errors.supply = { type: \"min\", message: \"Supply must be greater than 0\" };\n  if (!data.uri) {\n    errors.uri = { type: \"required\", message: \"Metadata URI is required\" };\n  } else {\n    try {\n      new URL(data.uri);\n    } catch (e) {\n      errors.uri = { type: \"pattern\", message: \"Invalid URI format\" };\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport default function TMLaunchpadForm({\n  onTokenCreated,\n  className\n}: {\n  onTokenCreated?: (mint: string) => void;\n  className?: string;\n}) {\n  const { connection } = useConnection();\n  const { publicKey: walletPublicKey, connected, wallet } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<TMLaunchpadResult | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n\n  const form = useForm<TMLaunchpadFormValues>({\n    defaultValues: {\n      name: \"\",\n      symbol: \"\",\n      decimals: 9,\n      supply: 1000000,\n      uri: \"\",\n      description: \"\",\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  const onSubmit = async (values: TMLaunchpadFormValues) => {\n    if (!connected || !walletPublicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      toast.loading(\"Launching your token...\", { id: \"tm-launchpad\" });\n\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity({\n          publicKey: walletPublicKey,\n          signTransaction: wallet.adapter.signTransaction,\n          signAllTransactions: wallet.adapter.signAllTransactions\n        }))\n        .use(mplTokenMetadata());\n\n      const mint = generateSigner(umi);\n\n      const createResult = await createFungible(umi, {\n        mint,\n        name: values.name,\n        symbol: values.symbol,\n        uri: values.uri,\n        sellerFeeBasisPoints: percentAmount(0),\n        decimals: values.decimals,\n      }).sendAndConfirm(umi);\n\n      const signatureStr = typeof createResult.signature === 'string'\n        ? createResult.signature\n        : Buffer.from(createResult.signature).toString('base64');\n\n      setResult({\n        mint: mint.publicKey.toString(),\n        signature: signatureStr\n      });\n\n      if (onTokenCreated) {\n        onTokenCreated(mint.publicKey.toString());\n      }\n\n      toast.success(\"Token launched successfully!\", {\n        id: \"tm-launchpad\",\n        description: `Mint: ${mint.publicKey.toString().slice(0, 8)}...`\n      });\n\n    } catch (err: any) {\n      console.error(\"Error launching token:\", err);\n      toast.error(\"Cannot launch token\", {\n        id: \"tm-launchpad\",\n        description: err.message\n      });\n\n      if (err.message.includes('failed to fetch') ||\n        err.message.includes('timeout') ||\n        err.message.includes('429') ||\n        err.message.includes('503')) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = (type: 'tx' | 'address', value: string) => {\n    const baseUrl = network === 'devnet' ? `https://explorer.solana.com/${type}/` : `https://solscan.io/${type === 'address' ? 'token' : 'tx'}/`;\n    window.open(`${baseUrl}${value}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Token Metadata Launchpad</CardTitle>\n          <CardDescription>Launch a new fungible token on Solana</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Token Launched!</h3>\n\n      <div className=\"space-y-2\">\n        <Label>Token Mint Address</Label>\n        <div className=\"flex items-center gap-2 bg-secondary/60 rounded p-2\">\n          <span className=\"text-sm font-mono break-all\">{result?.mint}</span>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(result?.mint || '')}><Copy className=\"h-3 w-3\" /></Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label>Transaction Signature</Label>\n        <div className=\"flex items-center gap-2 bg-secondary/60 rounded p-2\">\n          <span className=\"text-sm font-mono break-all\">{result?.signature}</span>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(result?.signature || '')}><Copy className=\"h-3 w-3\" /></Button>\n        </div>\n      </div>\n\n      <div className=\"flex gap-2 mt-4\">\n        <Button variant=\"outline\" onClick={() => viewExplorer('address', result?.mint || '')} className=\"flex-1\"><ExternalLink className=\"h-4 w-4 mr-2\" />View Token</Button>\n        <Button variant=\"outline\" onClick={() => viewExplorer('tx', result?.signature || '')} className=\"flex-1\"><ExternalLink className=\"h-4 w-4 mr-2\" />View Transaction</Button>\n      </div>\n\n      <Button onClick={resetForm} className=\"w-full\"><RefreshCw className=\"h-4 w-4 mr-2\" />Launch Another Token</Button>\n    </div>\n  );\n\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Token Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"My Awesome Token\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"symbol\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Symbol</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"MAT\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"decimals\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Decimals</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" max=\"18\" placeholder=\"9\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value) || 0)} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"supply\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Total Supply</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"1\" placeholder=\"1000000\" {...field} onChange={(e) => field.onChange(parseInt(e.target.value) || 0)} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"uri\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Metadata URI</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/token.json\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">URI to metadata JSON (image, description, etc.)</p>\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Description (Optional)</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"A brief description of your token.\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>{network}</Badge>\n            </div>\n          </div>\n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"h-4 w-4 animate-spin mr-2\" />Launching...</> : \"Launch Token\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Token Metadata Launchpad</span>\n          {connected && walletPublicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">{walletPublicKey.toString().slice(0, 4)}...{walletPublicKey.toString().slice(-4)}</Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Launch a new fungible token on Solana</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {result ? renderSuccess() : renderForm()}\n      </CardContent>\n    </Card>\n  );\n}\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Token-Metadata",
    "tags": [
        "token",
        "fungible",
        "launchpad",
        "create",
        "metaplex",
        "token-metadata",
        "solana",
        "form"
    ]
}