{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "compressed-nft-viewer",
  "type": "registry:block",
  "title": "Compressed NFT Viewer",
  "description": "View and search compressed NFTs on Solana.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/compressed-nft-viewer.tsx",
      "content": "'use client';\r\n\r\n// React v√† hooks\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Solana\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/components/ui/tabs\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\n\r\n// Icons and notifications\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, Search, TreePine, Archive, Info, Copy } from \"lucide-react\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\ninterface DASApiResponse {\r\n  id: string;\r\n  interface: string;\r\n  ownership: {\r\n    frozen: boolean;\r\n    delegated: boolean;\r\n    delegate?: string;\r\n    ownership_model: string;\r\n    owner: string;\r\n  };\r\n  supply: {\r\n    print_max_supply: number;\r\n    print_current_supply: number;\r\n    edition_nonce: number;\r\n  };\r\n  mutable: boolean;\r\n  burnt: boolean;\r\n  mint_extensions?: any;\r\n  compression: {\r\n    eligible: boolean;\r\n    compressed: boolean;\r\n    data_hash: string;\r\n    creator_hash: string;\r\n    asset_hash: string;\r\n    tree: string;\r\n    seq: number;\r\n    leaf_id: number;\r\n  };\r\n  grouping: Array<{\r\n    group_key: string;\r\n    group_value: string;\r\n  }>;\r\n  royalty: {\r\n    royalty_model: string;\r\n    target?: string;\r\n    percent: number;\r\n    basis_points: number;\r\n    primary_sale_happened: boolean;\r\n    locked: boolean;\r\n  };\r\n  creators: Array<{\r\n    address: string;\r\n    share: number;\r\n    verified: boolean;\r\n  }>;\r\n  content: {\r\n    $schema: string;\r\n    json_uri: string;\r\n    files: Array<{\r\n      uri: string;\r\n      mime: string;\r\n    }>;\r\n    metadata: {\r\n      attributes: Array<{\r\n        trait_type: string;\r\n        value: string;\r\n      }>;\r\n      description: string;\r\n      name: string;\r\n      symbol: string;\r\n      image?: string;\r\n      external_url?: string;\r\n    };\r\n    links: {\r\n      external_url?: string;\r\n      image?: string;\r\n    };\r\n  };\r\n}\r\ninterface DASApiError {\r\n  code: number;\r\n  message: string;\r\n  data?: any;\r\n}\r\ninterface CompressedNFTData {\r\n  assetId: string;\r\n  tree: string;\r\n  leafIndex: number;\r\n  proof: string[];\r\n  metadata?: {\r\n    name: string;\r\n    symbol: string;\r\n    uri: string;\r\n    creators?: Array<{\r\n      address: string;\r\n      verified: boolean;\r\n      share: number;\r\n    }>;\r\n  };\r\n  owner: string;\r\n  compressed: boolean;\r\n  readable: boolean;\r\n}\r\n\r\ninterface CompressedNFTMetadata {\r\n  name: string;\r\n  description?: string;\r\n  image?: string;\r\n  external_url?: string;\r\n  attributes?: Array<{\r\n    trait_type: string;\r\n    value: string | number;\r\n  }>;\r\n  properties?: {\r\n    category?: string;\r\n    creators?: Array<{\r\n      address: string;\r\n      share: number;\r\n    }>;\r\n  };\r\n}\r\n\r\ntype CompressedNFTFormValues = {\r\n  assetId: string;\r\n  treeAddress: string;\r\n  leafIndex: number;\r\n};\r\nconst DAS_API_ENDPOINTS = {\r\n  mainnet: [\r\n    'https://mainnet.helius-rpc.com/?api-key=YOUR_HELIUS_API_KEY',\r\n    'https://rpc.simplehash.com/solana-mainnet',\r\n    'https://solana-mainnet.g.alchemy.com/v2/YOUR_ALCHEMY_API_KEY',\r\n  ],\r\n  devnet: [\r\n    'https://devnet.helius-rpc.com/?api-key=YOUR_HELIUS_API_KEY',\r\n    'https://rpc.simplehash.com/solana-devnet',\r\n    'https://solana-devnet.g.alchemy.com/v2/YOUR_ALCHEMY_API_KEY',\r\n  ],\r\n};\r\nconst getDASApiUrl = (network: string) => {\r\n  if (network === 'mainnet') {\r\n    return 'https://mainnet.helius-rpc.com/?api-key=demo'; // Replace with your API key\r\n  }\r\n  return 'https://devnet.helius-rpc.com/?api-key=demo'; // Replace with your API key\r\n};\r\n\r\n// DAS API method for getting asset by ID\r\nconst callDASApi = async (method: string, params: any, network: string) => {\r\n  const url = getDASApiUrl(network);\r\n\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      jsonrpc: '2.0',\r\n      id: 'compressed-nft-viewer',\r\n      method,\r\n      params,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`DAS API request failed: ${response.status} ${response.statusText}`);\r\n  }\r\n\r\n  const result = await response.json();\r\n\r\n  if (result.error) {\r\n    throw new Error(`DAS API error: ${result.error.message}`);\r\n  }\r\n\r\n  return result.result;\r\n};\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate asset ID (if provided)\r\n  if (data.assetId && data.assetId.trim()) {\r\n    try {\r\n      new PublicKey(data.assetId);\r\n    } catch (e) {\r\n      errors.assetId = {\r\n        type: \"pattern\",\r\n        message: \"Invalid asset ID format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate tree address (if provided)\r\n  if (data.treeAddress && data.treeAddress.trim()) {\r\n    try {\r\n      new PublicKey(data.treeAddress);\r\n    } catch (e) {\r\n      errors.treeAddress = {\r\n        type: \"pattern\",\r\n        message: \"Invalid tree address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate leaf index\r\n  if (data.leafIndex !== undefined && data.leafIndex < 0) {\r\n    errors.leafIndex = {\r\n      type: \"min\",\r\n      message: \"Leaf index must be 0 or greater\",\r\n    };\r\n  }\r\n\r\n  // Either assetId OR (treeAddress + leafIndex) is required\r\n  if (!data.assetId || data.assetId.trim().length === 0) {\r\n    if (!data.treeAddress || data.treeAddress.trim().length === 0) {\r\n      errors.treeAddress = {\r\n        type: \"required\",\r\n        message: \"Tree address is required when Asset ID is not provided\",\r\n      };\r\n    }\r\n    if (data.leafIndex === undefined || data.leafIndex === \"\") {\r\n      errors.leafIndex = {\r\n        type: \"required\",\r\n        message: \"Leaf index is required when Asset ID is not provided\",\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport interface CompressedNFTViewerProps {\r\n  assetId?: string;\r\n  treeAddress?: string;\r\n  leafIndex?: number;\r\n  className?: string;\r\n}\r\n\r\nexport default function CompressedNFTViewer({\r\n  assetId: propAssetId,\r\n  treeAddress: propTreeAddress,\r\n  leafIndex: propLeafIndex,\r\n  className\r\n}: CompressedNFTViewerProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet } = useWallet();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'loading' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [cnftData, setCnftData] = useState<CompressedNFTData | null>(null);\r\n  const [cnftMetadata, setCnftMetadata] = useState<CompressedNFTMetadata | null>(null);\r\n  const [isLoadingMetadata, setIsLoadingMetadata] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"by-asset-id\");\r\n\r\n  // Form setup\r\n  const form = useForm<CompressedNFTFormValues>({\r\n    defaultValues: {\r\n      assetId: propAssetId || \"\",\r\n      treeAddress: propTreeAddress || \"\",\r\n      leafIndex: propLeafIndex || 0,\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Fetch metadata when CNFT data is loaded\r\n  useEffect(() => {\r\n    if (cnftData?.metadata?.uri) {\r\n      fetchMetadata(cnftData.metadata.uri);\r\n    } else {\r\n      setCnftMetadata(null);\r\n    }\r\n  }, [cnftData]);\r\n\r\n  const fetchMetadata = async (uri: string) => {\r\n    try {\r\n      setIsLoadingMetadata(true);\r\n\r\n      // Handle IPFS URIs\r\n      let metadataUrl = uri;\r\n      if (uri.startsWith('ipfs://')) {\r\n        metadataUrl = uri.replace('ipfs://', 'https://ipfs.io/ipfs/');\r\n      }\r\n\r\n      const response = await fetch(metadataUrl, {\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        },\r\n        mode: 'cors'\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load metadata: ${response.status}`);\r\n      }\r\n\r\n      const metadata = await response.json();\r\n\r\n      // Transform metadata to our format\r\n      const transformedMetadata: CompressedNFTMetadata = {\r\n        name: metadata.name || cnftData?.metadata?.name || \"Compressed NFT\",\r\n        description: metadata.description || \"\",\r\n        image: metadata.image || metadata.image_url || \"\",\r\n        external_url: metadata.external_url || \"\",\r\n        attributes: metadata.attributes || [],\r\n        properties: metadata.properties || {},\r\n      };\r\n\r\n      setCnftMetadata(transformedMetadata);\r\n    } catch (err: any) {\r\n      console.error(\"Error loading metadata:\", err);\r\n\r\n      // Enhanced fallback for various error types\r\n      if (err.message.includes('CORS') || err.message.includes('Failed to fetch')) {\r\n        toast.warning(\"Unable to load metadata due to CORS restrictions\");\r\n        setCnftMetadata({\r\n          name: cnftData?.metadata?.name || \"Compressed NFT\",\r\n          description: \"Metadata could not be loaded due to CORS restrictions. This is common with decentralized storage.\",\r\n          image: \"https://via.placeholder.com/300x300/6b7280/ffffff?text=CORS+Error\",\r\n          attributes: [\r\n            {\r\n              trait_type: \"Status\",\r\n              value: \"CORS Blocked\"\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        toast.error(\"Failed to load metadata\", {\r\n          description: err.message\r\n        });\r\n\r\n        // Fallback metadata\r\n        setCnftMetadata({\r\n          name: cnftData?.metadata?.name || \"Compressed NFT\",\r\n          description: \"Failed to load metadata\",\r\n          image: \"https://via.placeholder.com/300x300/ef4444/ffffff?text=Load+Error\",\r\n        });\r\n      }\r\n    } finally {\r\n      setIsLoadingMetadata(false);\r\n    }\r\n  };\r\n\r\n  const getCompressedNFTByAssetId = async (assetId: string) => {\r\n    try {\r\n      console.log(`Fetching compressed NFT by asset ID: ${assetId}`);\r\n\r\n      // Call DAS API to get asset by ID\r\n      const dasResult: DASApiResponse = await callDASApi(\r\n        'getAsset',\r\n        { id: assetId },\r\n        network\r\n      );\r\n\r\n      // Check if asset is compressed\r\n      if (!dasResult.compression || !dasResult.compression.compressed) {\r\n        throw new Error('Asset is not a compressed NFT');\r\n      }\r\n\r\n      // Transform DAS response to our format\r\n      const compressedNFTData: CompressedNFTData = {\r\n        assetId: dasResult.id,\r\n        tree: dasResult.compression.tree,\r\n        leafIndex: dasResult.compression.leaf_id,\r\n        proof: [], // Proof would need separate API call\r\n        metadata: {\r\n          name: dasResult.content.metadata.name,\r\n          symbol: dasResult.content.metadata.symbol,\r\n          uri: dasResult.content.json_uri,\r\n          creators: dasResult.creators?.map(creator => ({\r\n            address: creator.address,\r\n            verified: creator.verified,\r\n            share: creator.share,\r\n          })) || [],\r\n        },\r\n        owner: dasResult.ownership.owner,\r\n        compressed: dasResult.compression.compressed,\r\n        readable: true,\r\n      };\r\n\r\n      return compressedNFTData;\r\n    } catch (error: any) {\r\n      console.error(\"Error fetching compressed NFT:\", error);\r\n\r\n      // If DAS API fails, provide helpful error message\r\n      if (error.message.includes('DAS API')) {\r\n        throw new Error(`DAS API error: ${error.message}. Please check your API key and network settings.`);\r\n      }\r\n\r\n      if (error.message.includes('not a compressed NFT')) {\r\n        throw new Error('The provided asset ID is not a compressed NFT');\r\n      }\r\n\r\n      throw new Error(`Unable to retrieve compressed NFT: ${error.message}`);\r\n    }\r\n  };\r\n  // Add missing functions and render after getCompressedNFTByAssetId function:\r\n\r\n  const getCompressedNFTByTreeAndLeaf = async (treeAddress: string, leafIndex: number) => {\r\n    try {\r\n      console.log(`Fetching compressed NFT by tree: ${treeAddress}, leaf: ${leafIndex}`);\r\n\r\n      // Call DAS API to get assets by tree\r\n      const dasResult = await callDASApi(\r\n        'getAssetsByTree',\r\n        {\r\n          tree: treeAddress,\r\n          limit: 1000,\r\n          page: 1,\r\n        },\r\n        network\r\n      );\r\n\r\n      // Find the asset with matching leaf index\r\n      const matchingAsset = dasResult.items?.find((asset: DASApiResponse) =>\r\n        asset.compression.leaf_id === leafIndex\r\n      );\r\n\r\n      if (!matchingAsset) {\r\n        throw new Error(`No compressed NFT found at leaf index ${leafIndex} in tree ${treeAddress}`);\r\n      }\r\n\r\n      // Use the asset ID to get full details\r\n      return await getCompressedNFTByAssetId(matchingAsset.id);\r\n    } catch (error: any) {\r\n      console.error(\"Error fetching compressed NFT by tree:\", error);\r\n\r\n      if (error.message.includes('DAS API')) {\r\n        throw new Error(`DAS API error: ${error.message}. Please check your API key and network settings.`);\r\n      }\r\n\r\n      throw new Error(`Unable to retrieve compressed NFT: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const getAssetProof = async (assetId: string) => {\r\n    try {\r\n      const proofResult = await callDASApi(\r\n        'getAssetProof',\r\n        { id: assetId },\r\n        network\r\n      );\r\n\r\n      return {\r\n        root: proofResult.root,\r\n        proof: proofResult.proof,\r\n        node_index: proofResult.node_index,\r\n        leaf: proofResult.leaf,\r\n        tree_id: proofResult.tree_id,\r\n      };\r\n    } catch (error: any) {\r\n      console.warn(\"Could not fetch asset proof:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (values: CompressedNFTFormValues) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(null);\r\n      setCnftData(null);\r\n      setCurrentStage('loading');\r\n\r\n      let data: CompressedNFTData;\r\n\r\n      if (values.assetId && values.assetId.trim()) {\r\n        // Search by Asset ID\r\n        data = await getCompressedNFTByAssetId(values.assetId);\r\n\r\n        // Try to fetch proof\r\n        const proof = await getAssetProof(values.assetId);\r\n        if (proof) {\r\n          data.proof = proof.proof;\r\n        }\r\n      } else {\r\n        // Search by Tree Address + Leaf Index\r\n        data = await getCompressedNFTByTreeAndLeaf(values.treeAddress, values.leafIndex);\r\n\r\n        // Try to fetch proof\r\n        const proof = await getAssetProof(data.assetId);\r\n        if (proof) {\r\n          data.proof = proof.proof;\r\n        }\r\n      }\r\n\r\n      setCnftData(data);\r\n      setCurrentStage('success');\r\n\r\n      toast.success(\"Compressed NFT found!\", {\r\n        description: `Found via DAS API: ${data.assetId.slice(0, 8)}...`\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Get Compressed NFT error:\", err);\r\n      setError(err.message);\r\n      setCurrentStage('error');\r\n\r\n      // Enhanced error handling for DAS API issues\r\n      if (err.message.includes('DAS API')) {\r\n        toast.error(\"DAS API Error\", {\r\n          description: \"Please check your API key configuration or try again later\"\r\n        });\r\n      } else if (err.message.includes('not a compressed NFT')) {\r\n        toast.error(\"Invalid Asset\", {\r\n          description: \"The provided asset ID is not a compressed NFT\"\r\n        });\r\n      } else {\r\n        toast.error(\"Failed to fetch Compressed NFT\", {\r\n          description: err.message\r\n        });\r\n      }\r\n\r\n      // If query fails due to connection error, try switching to another endpoint\r\n      if (err.message.includes('failed to fetch') ||\r\n        err.message.includes('timeout') ||\r\n        err.message.includes('429') ||\r\n        err.message.includes('503')) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = () => {\r\n    if (cnftData?.assetId) {\r\n      const baseUrl = network === 'devnet'\r\n        ? 'https://explorer.solana.com/address/'\r\n        : 'https://solscan.io/account/';\r\n      window.open(\r\n        `${baseUrl}${cnftData.assetId}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n        '_blank'\r\n      );\r\n    }\r\n  };\r\n\r\n  const viewTreeInExplorer = () => {\r\n    if (cnftData?.tree) {\r\n      const baseUrl = network === 'devnet'\r\n        ? 'https://explorer.solana.com/address/'\r\n        : 'https://solscan.io/account/';\r\n      window.open(\r\n        `${baseUrl}${cnftData.tree}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n        '_blank'\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setCnftData(null);\r\n    setCnftMetadata(null);\r\n    setError(null);\r\n    setCurrentStage('input');\r\n  };\r\n\r\n  // Render functions\r\n  const renderForm = () => (\r\n    <div className=\"space-y-4\">\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-2\">\r\n          <TabsTrigger value=\"by-asset-id\">By Asset ID</TabsTrigger>\r\n          <TabsTrigger value=\"by-tree-leaf\">By Tree & Leaf</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n            <TabsContent value=\"by-asset-id\" className=\"space-y-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"assetId\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                    <FormLabel>Asset ID</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder=\"Enter compressed NFT asset ID\"\r\n                        {...field}\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                    <p className=\"text-xs text-muted-foreground mt-1\">\r\n                      The unique identifier for the compressed NFT\r\n                    </p>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"by-tree-leaf\" className=\"space-y-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"treeAddress\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                    <FormLabel>Merkle Tree Address</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder=\"Enter merkle tree address\"\r\n                        {...field}\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"leafIndex\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                    <FormLabel>Leaf Index</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        placeholder=\"0\"\r\n                        {...field}\r\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                    <p className=\"text-xs text-muted-foreground mt-1\">\r\n                      The position of the NFT in the merkle tree\r\n                    </p>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </TabsContent>\r\n\r\n            <Alert>\r\n              <Info className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                <strong>DAS API Integration:</strong> This viewer uses the Digital Asset Standard (DAS) API.\r\n                For production use, configure your API keys for Helius, Alchemy, or other DAS providers.\r\n                <br />\r\n                <span className=\"text-xs mt-1 block\">\r\n                  Current configuration uses demo endpoints with rate limits.\r\n                </span>\r\n              </AlertDescription>\r\n            </Alert>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n                <div className=\"flex justify-between items-center text-sm\">\r\n                  <span>Network</span>\r\n                  <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                    {network}\r\n                  </Badge>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"pt-2\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting ? (\r\n                    <>\r\n                      <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                      Searching...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Search className=\"h-4 w-4 mr-2\" />\r\n                      View Compressed NFT\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Form>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      {isLoadingMetadata ? (\r\n        <div className=\"flex flex-col items-center justify-center py-8\">\r\n          <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\r\n          <p className=\"mt-4 text-muted-foreground\">Loading compressed NFT metadata...</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"mx-auto flex flex-col items-center justify-center\">\r\n            {cnftMetadata?.image ? (\r\n              <div className=\"relative w-48 h-48 mb-4\">\r\n                <img\r\n                  src={cnftMetadata.image}\r\n                  alt={cnftMetadata.name || \"Compressed NFT Image\"}\r\n                  className=\"w-full h-full object-cover rounded-lg\"\r\n                  onError={(e) => {\r\n                    e.currentTarget.src = \"https://via.placeholder.com/300?text=Image+Not+Available\";\r\n                  }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div className=\"w-48 h-48 flex items-center justify-center bg-secondary/50 rounded-lg mb-4\">\r\n                <TreePine className=\"h-12 w-12 text-muted-foreground\" />\r\n              </div>\r\n            )}\r\n\r\n            <h3 className=\"text-xl font-bold text-center flex items-center gap-2\">\r\n              <TreePine className=\"h-5 w-5\" />\r\n              {cnftMetadata?.name || cnftData?.metadata?.name || \"Compressed NFT\"}\r\n            </h3>\r\n\r\n            {cnftMetadata?.description && (\r\n              <p className=\"text-sm text-muted-foreground text-center mt-2 max-w-sm\">\r\n                {cnftMetadata.description.length > 140\r\n                  ? `${cnftMetadata.description.substring(0, 140)}...`\r\n                  : cnftMetadata.description}\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"space-y-2 mt-4\">\r\n            <div className=\"bg-secondary/50 rounded-lg p-3 space-y-2\">\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span className=\"text-muted-foreground\">Asset ID</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.assetId}</span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(cnftData?.assetId || \"\")}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span className=\"text-muted-foreground\">Owner</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.owner}</span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(cnftData?.owner || \"\")}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span className=\"text-muted-foreground\">Merkle Tree</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.tree}</span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(cnftData?.tree || \"\")}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span className=\"text-muted-foreground\">Leaf Index</span>\r\n                <span className=\"font-medium\">{cnftData?.leafIndex}</span>\r\n              </div>\r\n\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span className=\"text-muted-foreground\">Compressed</span>\r\n                <Badge variant={cnftData?.compressed ? \"default\" : \"secondary\"}>\r\n                  {cnftData?.compressed ? \"Yes\" : \"No\"}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n\r\n            {cnftMetadata?.attributes && cnftMetadata.attributes.length > 0 && (\r\n              <div className=\"bg-secondary/50 rounded-lg p-3\">\r\n                <h4 className=\"text-sm font-medium mb-2\">Attributes</h4>\r\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n                  {cnftMetadata.attributes.map((attr, index) => (\r\n                    <div key={index} className=\"flex justify-between\">\r\n                      <span className=\"text-muted-foreground\">{attr.trait_type}</span>\r\n                      <span className=\"font-medium\">{attr.value}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {cnftData?.proof && cnftData.proof.length > 0 && (\r\n              <div className=\"bg-secondary/50 rounded-lg p-3\">\r\n                <h4 className=\"text-sm font-medium mb-2\">Merkle Proof</h4>\r\n                <div className=\"space-y-1 text-xs\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-muted-foreground\">Proof Length</span>\r\n                    <span>{cnftData.proof.length}</span>\r\n                  </div>\r\n                  <div className=\"max-h-32 overflow-y-auto\">\r\n                    {cnftData.proof.map((proof, index) => (\r\n                      <div key={index} className=\"flex justify-between items-center py-1\">\r\n                        <span className=\"text-muted-foreground\">Proof {index + 1}</span>\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <span className=\"font-mono text-xs truncate max-w-[120px]\">{proof}</span>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => copyToClipboard(proof)}\r\n                          >\r\n                            <Copy className=\"h-3 w-3\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex gap-2 mt-6\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={viewInExplorer}\r\n              className=\"flex-1\"\r\n            >\r\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n              View Asset\r\n            </Button>\r\n\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={viewTreeInExplorer}\r\n              className=\"flex-1\"\r\n            >\r\n              <TreePine className=\"h-4 w-4 mr-2\" />\r\n              View Tree\r\n            </Button>\r\n          </div>\r\n\r\n          <Button\r\n            onClick={resetForm}\r\n            className=\"w-full\"\r\n          >\r\n            <Search className=\"h-4 w-4 mr-2\" />\r\n            Search Another\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <Archive className=\"h-10 w-10 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Compressed NFT Not Found</h3>\r\n      <p className=\"text-muted-foreground\">{error || 'Unable to retrieve compressed NFT information. Please check the details and try again.'}</p>\r\n      <Button\r\n        onClick={() => {\r\n          setCurrentStage('input');\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderLoading = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Fetching Compressed NFT</h3>\r\n      <p className=\"text-muted-foreground\">Please wait while we retrieve the compressed NFT information...</p>\r\n    </div>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'loading':\r\n        return renderLoading();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>View Compressed NFT</CardTitle>\r\n          <CardDescription>\r\n            Lookup and display information of compressed NFTs on Solana\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span className=\"flex items-center gap-2\">\r\n            <TreePine className=\"h-5 w-5\" />\r\n            View Compressed NFT\r\n          </span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Lookup and display information of compressed NFTs on Solana using DAS API\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Remove the named export and use only default export\r\n// export { CompressedNFTViewer };\r\n\r\nexport { CompressedNFTViewer };",
      "type": "registry:component",
      "target": "components/ui/murphy/compressed-nft-viewer.tsx"
    }
  ]
}