{
    "name": "compressed-nft-viewer",
    "description": "A Solana compressed NFT lookup component with shadcn UI styling, supporting search by asset ID or tree/leaf index.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-bubblegum",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "tabs",
        "alert",
        "badge",
        "dialog"
    ],
    "files": [
        {
            "name": "compressed-nft-viewer.tsx",
            "content": "'use client';\n\n// React v√† hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, Search, TreePine, Archive, Info, Copy } from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries for Compressed NFTs\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplBubblegum } from '@metaplex-foundation/mpl-bubblegum';\nimport {\n  getLeafAssetId,\n  parseLeafFromMintToCollectionV1Transaction\n} from '@metaplex-foundation/mpl-bubblegum';\nimport {\n  publicKey as umiPublicKey,\n} from '@metaplex-foundation/umi';\n\ninterface CompressedNFTData {\n  assetId: string;\n  tree: string;\n  leafIndex: number;\n  proof: string[];\n  metadata?: {\n    name: string;\n    symbol: string;\n    uri: string;\n    creators?: Array<{\n      address: string;\n      verified: boolean;\n      share: number;\n    }>;\n  };\n  owner: string;\n  compressed: boolean;\n  readable: boolean;\n}\n\ninterface CompressedNFTMetadata {\n  name: string;\n  description?: string;\n  image?: string;\n  external_url?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  properties?: {\n    category?: string;\n    creators?: Array<{\n      address: string;\n      share: number;\n    }>;\n  };\n}\n\ntype CompressedNFTFormValues = {\n  assetId: string;\n  treeAddress: string;\n  leafIndex: number;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate asset ID (if provided)\n  if (data.assetId && data.assetId.trim()) {\n    try {\n      new PublicKey(data.assetId);\n    } catch (e) {\n      errors.assetId = {\n        type: \"pattern\",\n        message: \"Invalid asset ID format\",\n      };\n    }\n  }\n\n  // Validate tree address (if provided)\n  if (data.treeAddress && data.treeAddress.trim()) {\n    try {\n      new PublicKey(data.treeAddress);\n    } catch (e) {\n      errors.treeAddress = {\n        type: \"pattern\",\n        message: \"Invalid tree address format\",\n      };\n    }\n  }\n\n  // Validate leaf index\n  if (data.leafIndex !== undefined && data.leafIndex < 0) {\n    errors.leafIndex = {\n      type: \"min\",\n      message: \"Leaf index must be 0 or greater\",\n    };\n  }\n\n  // Either assetId OR (treeAddress + leafIndex) is required\n  if (!data.assetId || data.assetId.trim().length === 0) {\n    if (!data.treeAddress || data.treeAddress.trim().length === 0) {\n      errors.treeAddress = {\n        type: \"required\",\n        message: \"Tree address is required when Asset ID is not provided\",\n      };\n    }\n    if (data.leafIndex === undefined || data.leafIndex === \"\") {\n      errors.leafIndex = {\n        type: \"required\",\n        message: \"Leaf index is required when Asset ID is not provided\",\n      };\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport interface CompressedNFTViewerProps {\n  assetId?: string;\n  treeAddress?: string;\n  leafIndex?: number;\n  className?: string;\n}\n\nexport default function CompressedNFTViewer({\n  assetId: propAssetId,\n  treeAddress: propTreeAddress,\n  leafIndex: propLeafIndex,\n  className\n}: CompressedNFTViewerProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'loading' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [cnftData, setCnftData] = useState<CompressedNFTData | null>(null);\n  const [cnftMetadata, setCnftMetadata] = useState<CompressedNFTMetadata | null>(null);\n  const [isLoadingMetadata, setIsLoadingMetadata] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"by-asset-id\");\n\n  // Form setup\n  const form = useForm<CompressedNFTFormValues>({\n    defaultValues: {\n      assetId: propAssetId || \"\",\n      treeAddress: propTreeAddress || \"\",\n      leafIndex: propLeafIndex || 0,\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Fetch metadata when CNFT data is loaded\n  useEffect(() => {\n    if (cnftData?.metadata?.uri) {\n      fetchMetadata(cnftData.metadata.uri);\n    } else {\n      setCnftMetadata(null);\n    }\n  }, [cnftData]);\n\n  const fetchMetadata = async (uri: string) => {\n    try {\n      setIsLoadingMetadata(true);\n\n      const response = await fetch(uri, {\n        headers: {\n          'Accept': 'application/json',\n        },\n        mode: 'cors'\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to load metadata: ${response.status}`);\n      }\n\n      const metadata = await response.json();\n      setCnftMetadata(metadata);\n    } catch (err: any) {\n      console.error(\"Error loading metadata:\", err);\n\n      // Fallback for CORS issues\n      if (err.message.includes('CORS') || err.message.includes('Failed to fetch')) {\n        toast.warning(\"Unable to load metadata due to CORS restrictions\");\n        setCnftMetadata({\n          name: cnftData?.metadata?.name || \"Compressed NFT\",\n          description: \"Metadata could not be loaded due to CORS restrictions\",\n        });\n      } else {\n        toast.error(\"Failed to load metadata\", {\n          description: err.message\n        });\n      }\n    } finally {\n      setIsLoadingMetadata(false);\n    }\n  };\n\n  const getCompressedNFTByAssetId = async (assetId: string) => {\n    try {\n      // Initialize UMI\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(mplBubblegum());\n\n      // For demonstration, we'll simulate getting compressed NFT data\n      // In real implementation, you'd need to use DAS API or indexer\n      const mockData: CompressedNFTData = {\n        assetId,\n        tree: \"11111111111111111111111111111111\", // Mock tree address\n        leafIndex: 0,\n        proof: [],\n        metadata: {\n          name: \"Compressed NFT\",\n          symbol: \"CNFT\",\n          uri: \"https://example.com/metadata.json\",\n          creators: [\n            {\n              address: publicKey?.toString() || \"11111111111111111111111111111111\",\n              verified: true,\n              share: 100,\n            }\n          ]\n        },\n        owner: publicKey?.toString() || \"11111111111111111111111111111111\",\n        compressed: true,\n        readable: true,\n      };\n\n      return mockData;\n    } catch (error: any) {\n      console.error(\"Error fetching compressed NFT:\", error);\n      throw new Error(`Unable to retrieve compressed NFT: ${error.message}`);\n    }\n  };\n\n  const getCompressedNFTByTreeAndLeaf = async (treeAddress: string, leafIndex: number) => {\n    try {\n      // Initialize UMI\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(mplBubblegum());\n\n      // Generate asset ID from tree and leaf index\n      const treePublicKey = umiPublicKey(treeAddress);\n      const assetId = getLeafAssetId(treePublicKey, BigInt(leafIndex));\n\n      // Get compressed NFT data\n      return await getCompressedNFTByAssetId(assetId.toString());\n    } catch (error: any) {\n      console.error(\"Error fetching compressed NFT by tree:\", error);\n      throw new Error(`Unable to retrieve compressed NFT: ${error.message}`);\n    }\n  };\n\n  const onSubmit = async (values: CompressedNFTFormValues) => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setCnftData(null);\n      setCurrentStage('loading');\n\n      let data: CompressedNFTData;\n\n      if (values.assetId && values.assetId.trim()) {\n        // Search by Asset ID\n        data = await getCompressedNFTByAssetId(values.assetId);\n      } else {\n        // Search by Tree Address + Leaf Index\n        data = await getCompressedNFTByTreeAndLeaf(values.treeAddress, values.leafIndex);\n      }\n\n      setCnftData(data);\n      setCurrentStage('success');\n\n      toast.success(\"Compressed NFT found!\", {\n        description: `Asset: ${data.assetId.slice(0, 8)}...`\n      });\n\n    } catch (err: any) {\n      console.error(\"Get Compressed NFT error:\", err);\n      setError(err.message);\n      setCurrentStage('error');\n\n      toast.error(\"Failed to fetch Compressed NFT\", {\n        description: err.message\n      });\n\n      // If query fails due to connection error, try switching to another endpoint\n      if (err.message.includes('failed to fetch') ||\n        err.message.includes('timeout') ||\n        err.message.includes('429') ||\n        err.message.includes('503')) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Helper functions\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n\n  const viewInExplorer = () => {\n    if (cnftData?.assetId) {\n      const baseUrl = network === 'devnet'\n        ? 'https://explorer.solana.com/address/'\n        : 'https://solscan.io/account/';\n      window.open(\n        `${baseUrl}${cnftData.assetId}${network === 'devnet' ? '?cluster=devnet' : ''}`,\n        '_blank'\n      );\n    }\n  };\n\n  const viewTreeInExplorer = () => {\n    if (cnftData?.tree) {\n      const baseUrl = network === 'devnet'\n        ? 'https://explorer.solana.com/address/'\n        : 'https://solscan.io/account/';\n      window.open(\n        `${baseUrl}${cnftData.tree}${network === 'devnet' ? '?cluster=devnet' : ''}`,\n        '_blank'\n      );\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setCnftData(null);\n    setCnftMetadata(null);\n    setError(null);\n    setCurrentStage('input');\n  };\n\n  // Render functions\n  const renderForm = () => (\n    <div className=\"space-y-4\">\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"by-asset-id\">By Asset ID</TabsTrigger>\n          <TabsTrigger value=\"by-tree-leaf\">By Tree & Leaf</TabsTrigger>\n        </TabsList>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <TabsContent value=\"by-asset-id\" className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"assetId\"\n                render={({ field }) => (\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                    <FormLabel>Asset ID</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter compressed NFT asset ID\"\n                        {...field}\n                        disabled={isSubmitting}\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      The unique identifier for the compressed NFT\n                    </p>\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"by-tree-leaf\" className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"treeAddress\"\n                render={({ field }) => (\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                    <FormLabel>Merkle Tree Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter merkle tree address\"\n                        {...field}\n                        disabled={isSubmitting}\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"leafIndex\"\n                render={({ field }) => (\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                    <FormLabel>Leaf Index</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"0\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        disabled={isSubmitting}\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      The position of the NFT in the merkle tree\n                    </p>\n                  </FormItem>\n                )}\n              />\n            </TabsContent>\n\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription>\n                Compressed NFTs are stored in Merkle Trees and require either the Asset ID or both Tree Address and Leaf Index to retrieve.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span>Network</span>\n                  <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                    {network}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"pt-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isSubmitting}\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                      Searching...\n                    </>\n                  ) : (\n                    <>\n                      <Search className=\"h-4 w-4 mr-2\" />\n                      View Compressed NFT\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </Tabs>\n    </div>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      {isLoadingMetadata ? (\n        <div className=\"flex flex-col items-center justify-center py-8\">\n          <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n          <p className=\"mt-4 text-muted-foreground\">Loading compressed NFT metadata...</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"mx-auto flex flex-col items-center justify-center\">\n            {cnftMetadata?.image ? (\n              <div className=\"relative w-48 h-48 mb-4\">\n                <img\n                  src={cnftMetadata.image}\n                  alt={cnftMetadata.name || \"Compressed NFT Image\"}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                  onError={(e) => {\n                    e.currentTarget.src = \"https://via.placeholder.com/300?text=Image+Not+Available\";\n                  }}\n                />\n              </div>\n            ) : (\n              <div className=\"w-48 h-48 flex items-center justify-center bg-secondary/50 rounded-lg mb-4\">\n                <TreePine className=\"h-12 w-12 text-muted-foreground\" />\n              </div>\n            )}\n\n            <h3 className=\"text-xl font-bold text-center flex items-center gap-2\">\n              <TreePine className=\"h-5 w-5\" />\n              {cnftMetadata?.name || cnftData?.metadata?.name || \"Compressed NFT\"}\n            </h3>\n\n            {cnftMetadata?.description && (\n              <p className=\"text-sm text-muted-foreground text-center mt-2 max-w-sm\">\n                {cnftMetadata.description.length > 140\n                  ? `${cnftMetadata.description.substring(0, 140)}...`\n                  : cnftMetadata.description}\n              </p>\n            )}\n          </div>\n\n          <div className=\"space-y-2 mt-4\">\n            <div className=\"bg-secondary/50 rounded-lg p-3 space-y-2\">\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Asset ID</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.assetId}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(cnftData?.assetId || \"\")}\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Owner</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.owner}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(cnftData?.owner || \"\")}\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Merkle Tree</span>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-mono text-xs truncate max-w-[200px]\">{cnftData?.tree}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(cnftData?.tree || \"\")}\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Leaf Index</span>\n                <span className=\"font-medium\">{cnftData?.leafIndex}</span>\n              </div>\n\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Compressed</span>\n                <Badge variant={cnftData?.compressed ? \"default\" : \"secondary\"}>\n                  {cnftData?.compressed ? \"Yes\" : \"No\"}\n                </Badge>\n              </div>\n            </div>\n\n            {cnftMetadata?.attributes && cnftMetadata.attributes.length > 0 && (\n              <div className=\"bg-secondary/50 rounded-lg p-3\">\n                <h4 className=\"text-sm font-medium mb-2\">Attributes</h4>\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  {cnftMetadata.attributes.map((attr, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{attr.trait_type}</span>\n                      <span className=\"font-medium\">{attr.value}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {cnftData?.metadata?.creators && cnftData.metadata.creators.length > 0 && (\n              <div className=\"bg-secondary/50 rounded-lg p-3\">\n                <h4 className=\"text-sm font-medium mb-2\">Creators</h4>\n                <div className=\"space-y-1 text-xs\">\n                  {cnftData.metadata.creators.map((creator, index) => (\n                    <div key={index} className=\"flex justify-between items-center\">\n                      <span className=\"font-mono truncate\">{creator.address.slice(0, 8)}...{creator.address.slice(-4)}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <span>{creator.share}%</span>\n                        {creator.verified && (\n                          <Badge variant=\"outline\" className=\"px-1 py-0 text-xs\">\n                            Verified\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex gap-2 mt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={viewInExplorer}\n              className=\"flex-1\"\n            >\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              View Asset\n            </Button>\n\n            <Button\n              variant=\"outline\"\n              onClick={viewTreeInExplorer}\n              className=\"flex-1\"\n            >\n              <TreePine className=\"h-4 w-4 mr-2\" />\n              View Tree\n            </Button>\n          </div>\n\n          <Button\n            onClick={resetForm}\n            className=\"w-full\"\n          >\n            <Search className=\"h-4 w-4 mr-2\" />\n            Search Another\n          </Button>\n        </>\n      )}\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <Archive className=\"h-10 w-10 text-red-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Compressed NFT Not Found</h3>\n      <p className=\"text-muted-foreground\">{error || 'Unable to retrieve compressed NFT information. Please check the details and try again.'}</p>\n      <Button\n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  const renderLoading = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Fetching Compressed NFT</h3>\n      <p className=\"text-muted-foreground\">Please wait while we retrieve the compressed NFT information...</p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'loading':\n        return renderLoading();\n      default:\n        return renderForm();\n    }\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>View Compressed NFT</CardTitle>\n          <CardDescription>\n            Lookup and display information of compressed NFTs on Solana\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span className=\"flex items-center gap-2\">\n            <TreePine className=\"h-5 w-5\" />\n            View Compressed NFT\n          </span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>\n          Lookup and display information of compressed NFTs on Solana\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport { CompressedNFTViewer };\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Bubblegum",
    "tags": [
        "nft",
        "compressed-nft",
        "cnft",
        "viewer",
        "lookup",
        "metaplex",
        "bubblegum",
        "solana"
    ]
}