{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "claim-cToken",
  "type": "registry:block",
  "title": "Claim cToken",
  "description": "A simple claim cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/claim-cToken.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useContext } from \"react\";\r\nimport {\r\n    bn,\r\n    buildAndSignTx,\r\n    sendAndConfirmTx,\r\n    dedupeSigner,\r\n    Rpc,\r\n    createRpc,\r\n  } from \"@lightprotocol/stateless.js\";\r\n  import { ComputeBudgetProgram, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\r\n  import {\r\n    CompressedTokenProgram,\r\n    getTokenPoolInfos,\r\n    selectMinCompressedTokenAccountsForTransfer,\r\n    selectTokenPoolInfosForDecompression,\r\n  } from \"@lightprotocol/compressed-token\";\r\n  import { getAssociatedTokenAddress, createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\r\n  import bs58 from \"bs58\";\r\n  import { useForm } from \"react-hook-form\";\r\n  import { zodResolver } from \"@hookform/resolvers/zod\";\r\n  import * as z from \"zod\";\r\n  import { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\n  import { toast } from \"sonner\";\r\n\r\n  import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\n  import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\r\n  import { Input } from \"@/components/ui/input\";\r\n  import { Button } from \"@/components/ui/button\";\r\n  import { Loader2 } from \"lucide-react\";\r\n  import { Switch } from \"@/components/ui/switch\";\r\n  import { Label } from \"@/components/ui/label\";\r\n  import { ConnectWalletButton } from \"./connect-wallet-button\";\r\n  import { ModalContext } from \"@/components/providers/wallet-provider\";\r\n  import { QrScannerComponent } from \"./QrScannerComponent\";\r\n  import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\n  import { Alert, AlertDescription } from \"@/components/ui/alert\";\r\n  \r\n  // Form schema\r\n  const formSchema = z.object({\r\n    mintAddress: z.string().min(1, \"Mint address is required\"),\r\n    amount: z.number().min(1, \"Amount must be greater than 0\"),\r\n  });\r\n\r\n  type FormValues = z.infer<typeof formSchema>;\r\n\r\n  // Add this data type at the top of the file or just before the component\r\n  interface QrResult {\r\n    getText(): string;\r\n  }\r\n\r\n  export function ClaimTokenForm({ className }: { className?: string }) {\r\n    // Use hook from wallet adapter\r\n    const { publicKey, signTransaction, sendTransaction, connected } = useWallet();\r\n    const { connection } = useConnection();\r\n    const { endpoint } = useContext(ModalContext);\r\n    \r\n    const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n    const [currentStage, setCurrentStage] = React.useState<'input' | 'success' | 'error'>('input');\r\n    const [error, setError] = React.useState(\"\");\r\n    const [result, setResult] = React.useState<{\r\n      txId: string;\r\n      ata: string;\r\n    } | null>(null);\r\n    const [showScanner, setShowScanner] = React.useState(false);\r\n    const [isMainnet, setIsMainnet] = React.useState(true);\r\n\r\n    const form = useForm<FormValues>({\r\n      resolver: zodResolver(formSchema),\r\n      defaultValues: {\r\n        mintAddress: \"\",\r\n        amount: 100,\r\n      },\r\n    });\r\n\r\n    const onSubmit = async (values: FormValues) => {\r\n      try {\r\n        // Check if the wallet is connected\r\n        if (!connected || !publicKey || !signTransaction) {\r\n          toast.error(\"Please connect your wallet first\");\r\n          return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        setError(\"\");\r\n        setCurrentStage('input');\r\n\r\n        const rpcEndpoint = isMainnet \r\n          ? process.env.NEXT_PUBLIC_SOLANA_RPC_URL \r\n          : process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET;\r\n\r\n        if (!rpcEndpoint) {\r\n          throw new Error(\"RPC endpoint is not configured\");\r\n        }\r\n        \r\n        // Create RPC connection\r\n        const connection = createRpc(rpcEndpoint);\r\n\r\n        // Convert mint address\r\n        const mint = new PublicKey(values.mintAddress);\r\n        const amount = values.amount;\r\n\r\n        // 1. Find Associated Token Account address\r\n        const ataAddress = await getAssociatedTokenAddress(mint, publicKey);\r\n\r\n        // 2. Check if ATA already exists\r\n        const ataInfo = await connection.getAccountInfo(ataAddress);\r\n\r\n        // 3. If not, create ATA with a separate transaction\r\n        if (!ataInfo) {\r\n          console.log(\"Creating new Associated Token Account...\");\r\n          const createAtaTx = new Transaction();\r\n          createAtaTx.add(\r\n            createAssociatedTokenAccountInstruction(\r\n              publicKey, // payer\r\n              ataAddress, // ATA address\r\n              publicKey, // owner\r\n              mint // token mint\r\n            )\r\n          );\r\n          \r\n          createAtaTx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\r\n          createAtaTx.feePayer = publicKey;\r\n          \r\n          const signedCreateAtaTx = await signTransaction(createAtaTx);\r\n          const createAtaTxId = await connection.sendRawTransaction(signedCreateAtaTx.serialize());\r\n          \r\n          await connection.confirmTransaction({\r\n            signature: createAtaTxId,\r\n            blockhash: (await connection.getLatestBlockhash()).blockhash,\r\n            lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight,\r\n          });\r\n          console.log(\"ATA created with tx ID:\", createAtaTxId);\r\n        }\r\n\r\n        // 4. Get compressed token accounts\r\n        const compressedTokenAccounts =\r\n          await connection.getCompressedTokenAccountsByOwner(publicKey, {\r\n            mint,\r\n          });\r\n\r\n        if (!compressedTokenAccounts.items.length) {\r\n          throw new Error(\"No compressed tokens found in account\");\r\n        }\r\n\r\n        // 5. Select compressed token account for transfer\r\n        const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\r\n          compressedTokenAccounts.items,\r\n          bn(amount)\r\n        );\r\n\r\n        // 6. Get validity proof\r\n        const proof = await connection.getValidityProof(\r\n          inputAccounts.map((account) => account.compressedAccount.hash)\r\n        );\r\n\r\n        // 7. Get token pool information\r\n        const tokenPoolInfos = await getTokenPoolInfos(connection, mint);\r\n\r\n        // 8. Select token pool info for decompression\r\n        const selectedTokenPoolInfos = selectTokenPoolInfosForDecompression(\r\n          tokenPoolInfos,\r\n          amount\r\n        );\r\n\r\n        // 9. Build instruction\r\n        const ix = await CompressedTokenProgram.decompress({\r\n          payer: publicKey,\r\n          inputCompressedTokenAccounts: inputAccounts,\r\n          toAddress: ataAddress,\r\n          amount,\r\n          tokenPoolInfos: selectedTokenPoolInfos,\r\n          recentInputStateRootIndices: proof.rootIndices,\r\n          recentValidityProof: proof.compressedProof,\r\n        });\r\n\r\n        // 10. Sign and send transaction using connected wallet\r\n        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\r\n        \r\n        // Create transaction and add instructions\r\n        const transaction = new Transaction();\r\n        transaction.add(ComputeBudgetProgram.setComputeUnitLimit({ units: 300_000 }));\r\n        transaction.add(ix);\r\n        \r\n        // Set blockhash and feePayer information\r\n        transaction.recentBlockhash = blockhash;\r\n        transaction.feePayer = publicKey;\r\n        \r\n        console.log(\"Signing transaction...\");\r\n        \r\n        try {\r\n          // Sign transaction using connected wallet\r\n          const signedTx = await signTransaction(transaction);\r\n          \r\n          console.log(\"Sending transaction...\");\r\n          const txId = await connection.sendRawTransaction(signedTx.serialize());\r\n          \r\n          // Wait for confirmation\r\n          await connection.confirmTransaction({\r\n            signature: txId,\r\n            blockhash,\r\n            lastValidBlockHeight,\r\n          });\r\n          \r\n          console.log(\"Transaction confirmed:\", txId);\r\n          \r\n          setResult({\r\n            txId,\r\n            ata: ataAddress.toBase58()\r\n          });\r\n          setCurrentStage('success');\r\n          \r\n          toast.success(\"Decompression successful!\", {\r\n            description: `Transaction: ${txId}`\r\n          });\r\n        } catch (signError: any) {\r\n          console.error('Error signing transaction:', signError);\r\n          \r\n          // Analyze error if user canceled the transaction\r\n          if (signError.message && signError.message.includes(\"canceled\")) {\r\n            toast.error(\"Transaction canceled\", {\r\n              description: \"You canceled the transaction\"\r\n            });\r\n            setError(\"You canceled the transaction\");\r\n          } else {\r\n            toast.error(\"Error signing transaction\", {\r\n              description: signError.message || \"Unable to sign transaction\"\r\n            });\r\n            setError(`Error signing transaction: ${signError.message}`);\r\n          }\r\n          \r\n          setCurrentStage('error');\r\n          throw signError;\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        setCurrentStage('error');\r\n      } finally {\r\n        setIsSubmitting(false);\r\n      }\r\n    };\r\n\r\n    // Reset form\r\n    const resetForm = () => {\r\n      form.reset();\r\n      setResult(null);\r\n      setCurrentStage(\"input\");\r\n      setError(\"\");\r\n    };\r\n\r\n    // Add helper function to handle long text\r\n    const truncateText = (text: string, maxLength: number = 20) => {\r\n      if (text.length <= maxLength) return text;\r\n      return `${text.slice(0, maxLength)}...`;\r\n    };\r\n\r\n    // Add helper function to copy text\r\n    const copyToClipboard = (text: string) => {\r\n      navigator.clipboard.writeText(text);\r\n      toast.success(\"Copied to clipboard\");\r\n    };\r\n\r\n    // Add helper function to create Solscan link\r\n    const getSolscanUrl = (type: 'tx' | 'token' | 'account', id: string) => {\r\n      const cluster = isMainnet ? '' : '?cluster=devnet';\r\n      return `https://solscan.io/${type}/${id}${cluster}`;\r\n    };\r\n\r\n    // Add function to handle successful QR scan\r\n    const handleScan = (data: string) => {\r\n      try {\r\n        console.log(\"QR data received:\", data);\r\n\r\n        // Try parsing JSON data\r\n        let parsedData;\r\n        try {\r\n          parsedData = JSON.parse(data);\r\n        } catch (e) {\r\n          // If not JSON, check if it's simple text\r\n          if (data.includes(\"mintAddress\")) {\r\n            // Extract information from text string\r\n            const mintMatch = data.match(/mintAddress[=:]\\s*[\"']?([^\"',}&\\s]+)/i);\r\n            const amountMatch = data.match(/amount[=:]\\s*[\"']?([0-9]+)/i);\r\n            \r\n            if (mintMatch) {\r\n              parsedData = {\r\n                mintAddress: mintMatch[1],\r\n                amount: amountMatch ? parseInt(amountMatch[1]) : 100\r\n              };\r\n            }\r\n          }\r\n        }\r\n\r\n        // Check if data is compressed token data\r\n        if (parsedData && parsedData.mintAddress) {\r\n          // Check Solana address format\r\n          try {\r\n            new PublicKey(parsedData.mintAddress);\r\n          } catch (e) {\r\n            toast.error(\"Invalid token address\");\r\n            return;\r\n          }\r\n\r\n          // Check type to confirm this is a compressed token QR code\r\n          if (parsedData.type === \"compressed-token-claim\" || !parsedData.type) {\r\n            form.setValue(\"mintAddress\", parsedData.mintAddress);\r\n            if (parsedData.amount && !isNaN(Number(parsedData.amount))) {\r\n              form.setValue(\"amount\", Number(parsedData.amount));\r\n            }\r\n            \r\n            setShowScanner(false);\r\n            toast.success(\"QR code scanned successfully\", {\r\n              description: `Token: ${parsedData.mintAddress.slice(0, 6)}...${parsedData.mintAddress.slice(-4)}`\r\n            });\r\n          } else {\r\n            toast.error(\"QR code is not a compressed token\");\r\n          }\r\n        } else {\r\n          toast.error(\"QR code does not contain valid token information\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"QR processing error:\", error);\r\n        toast.error(\"Unable to process QR code\");\r\n      }\r\n    };\r\n\r\n    // Render success view\r\n    const renderSuccess = () => (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full\">\r\n              <thead>\r\n                <tr className=\"border-b border-border\">\r\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Field</th>\r\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Value</th>\r\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr className=\"border-b border-border/50\">\r\n                  <td className=\"py-3 px-4 text-sm\">Token Address</td>\r\n                  <td className=\"py-3 px-4 text-sm font-medium\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span>{truncateText(form.getValues(\"mintAddress\") || \"\")}</span>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => copyToClipboard(form.getValues(\"mintAddress\"))}\r\n                      >\r\n                        Copy\r\n                      </Button>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"py-3 px-4 text-sm text-right\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => window.open(getSolscanUrl('token', form.getValues(\"mintAddress\")), '_blank')}\r\n                    >\r\n                      View\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"border-b border-border/50\">\r\n                  <td className=\"py-3 px-4 text-sm\">Token Account</td>\r\n                  <td className=\"py-3 px-4 text-sm font-medium\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span>{truncateText(result?.ata || \"\")}</span>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => copyToClipboard(result?.ata || \"\")}\r\n                      >\r\n                        Copy\r\n                      </Button>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"py-3 px-4 text-sm text-right\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => window.open(getSolscanUrl('account', result?.ata || \"\"), '_blank')}\r\n                    >\r\n                      View\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"border-b border-border/50\">\r\n                  <td className=\"py-3 px-4 text-sm\">Amount</td>\r\n                  <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"amount\")}</td>\r\n                  <td className=\"py-3 px-4 text-sm text-right\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => copyToClipboard(form.getValues(\"amount\").toString())}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"border-b border-border/50\">\r\n                  <td className=\"py-3 px-4 text-sm\">Transaction ID</td>\r\n                  <td className=\"py-3 px-4 text-sm font-medium\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span>{truncateText(result?.txId || \"\")}</span>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => copyToClipboard(result?.txId || \"\")}\r\n                      >\r\n                        Copy\r\n                      </Button>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"py-3 px-4 text-sm text-right\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => window.open(getSolscanUrl('tx', result?.txId || \"\"), '_blank')}\r\n                    >\r\n                      View\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex gap-4\">\r\n          <Button onClick={resetForm} className=\"flex-1\">\r\n            Claim More Tokens\r\n          </Button>\r\n          <Button \r\n            variant=\"outline\" \r\n            className=\"flex-1\"\r\n            onClick={() => {\r\n              const data = {\r\n                mintAddress: form.getValues(\"mintAddress\"),\r\n                amount: form.getValues(\"amount\"),\r\n                ata: result?.ata,\r\n                txId: result?.txId,\r\n              };\r\n              copyToClipboard(JSON.stringify(data, null, 2));\r\n            }}\r\n          >\r\n            Copy All Data\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    // Render error view\r\n    const renderError = () => (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n          {error}\r\n        </div>\r\n        <Button onClick={resetForm} className=\"w-full\">\r\n          Try Again\r\n        </Button>\r\n      </div>\r\n    );\r\n\r\n    // Render input form\r\n    const renderInputForm = () => (\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"network-switch\">Network</Label>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-sm text-muted-foreground\">Devnet</span>\r\n                <Switch\r\n                  id=\"network-switch\"\r\n                  checked={isMainnet}\r\n                  disabled={false}\r\n                  onCheckedChange={setIsMainnet}\r\n                />\r\n                <span className=\"text-sm text-muted-foreground\">Mainnet</span>\r\n              </div>\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground mt-1\">\r\n              Select the network you want to use to process tokens\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end mb-2\">\r\n            <Dialog open={showScanner} onOpenChange={setShowScanner}>\r\n              <DialogTrigger asChild>\r\n                <Button variant=\"outline\" size=\"sm\">\r\n                  Scan QR Code\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"w-full max-w-md\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Scan QR Code</DialogTitle>\r\n                </DialogHeader>\r\n                <div className=\"w-full py-2\">\r\n                  <QrScannerComponent\r\n                    onScan={handleScan}\r\n                    stopScanning={!showScanner}\r\n                  />\r\n                </div>\r\n                <div className=\"bg-muted p-3 rounded-md text-sm\">\r\n                  Bring the QR code into the camera's view to automatically fill in the token information\r\n                </div>\r\n                \r\n                <Alert className=\"mt-2 bg-yellow-500/10 text-yellow-600 border-yellow-200\">\r\n                  <AlertDescription className=\"text-xs\">\r\n                    Note: After a successful scan, you still need to press the \"Decompress Tokens\" button to confirm\r\n                  </AlertDescription>\r\n                </Alert>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"mintAddress\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Token Address</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter token address (e.g., BJA...)\"\r\n                    {...field}\r\n                    disabled={isSubmitting || !connected}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"amount\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Token Amount</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    placeholder=\"Enter the amount of tokens to decompress\"\r\n                    {...field}\r\n                    onChange={(e) => field.onChange(Number(e.target.value))}\r\n                    disabled={isSubmitting || !connected}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting || !form.formState.isValid}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Decompressing Tokens...\r\n                  </>\r\n                ) : (\r\n                  \"Decompress Tokens\"\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    );\r\n\r\n    // Render based on current stage\r\n    const renderStageContent = () => {\r\n      switch (currentStage) {\r\n        case 'success':\r\n          return renderSuccess();\r\n        case 'error':\r\n          return renderError();\r\n        default:\r\n          return renderInputForm();\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Card className={className || \"w-full\"}>\r\n        <CardHeader>\r\n          <CardTitle>Decompress Tokens</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {renderStageContent()}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }",
      "type": "registry:component",
      "target": "components/ui/murphy/claim-cToken.tsx"
    },
    {
      "path": "components/ui/murphy/QrScannerComponent.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { CameraIcon, FlipHorizontalIcon, ScanLine } from \"lucide-react\";\r\n\r\nexport const QrScannerComponent = ({ \r\n  onScan, \r\n  stopScanning \r\n}: { \r\n  onScan: (data: string) => void, \r\n  stopScanning: boolean \r\n}) => {\r\n  const [isScanning, setIsScanning] = useState(false);\r\n  const [facingMode, setFacingMode] = useState<\"environment\" | \"user\">(\"environment\");\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n  \r\n  // Set interval ID for scanning\r\n  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Start camera\r\n  useEffect(() => {\r\n    const startCamera = async () => {\r\n      try {\r\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n          toast.error(\"Browser does not support camera\");\r\n          return;\r\n        }\r\n\r\n        if (streamRef.current) {\r\n          streamRef.current.getTracks().forEach(track => track.stop());\r\n        }\r\n\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: { facingMode }\r\n        });\r\n        \r\n        streamRef.current = stream;\r\n        \r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = stream;\r\n          videoRef.current.onloadedmetadata = () => {\r\n            videoRef.current?.play();\r\n            setIsScanning(true);\r\n            startScanning();\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error opening camera:\", error);\r\n        toast.error(\"Cannot open camera, please grant access\");\r\n      }\r\n    };\r\n\r\n    const startScanning = () => {\r\n      if (scanIntervalRef.current) {\r\n        clearInterval(scanIntervalRef.current);\r\n      }\r\n\r\n      scanIntervalRef.current = setInterval(() => {\r\n        scanQRCode();\r\n      }, 500); // Scan every 500ms\r\n    };\r\n\r\n    if (!stopScanning) {\r\n      startCamera();\r\n    }\r\n\r\n    return () => {\r\n      if (streamRef.current) {\r\n        streamRef.current.getTracks().forEach(track => track.stop());\r\n      }\r\n      if (scanIntervalRef.current) {\r\n        clearInterval(scanIntervalRef.current);\r\n      }\r\n      setIsScanning(false);\r\n    };\r\n  }, [stopScanning, facingMode]);\r\n\r\n  // QR code scanning function\r\n  const scanQRCode = async () => {\r\n    if (!isScanning || !videoRef.current || !canvasRef.current) return;\r\n\r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    \r\n    if (!context || video.videoWidth === 0) return;\r\n\r\n    // Set canvas size to match video\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    \r\n    // Draw the current frame from video to canvas\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n    \r\n    try {\r\n      // Use BarcodeDetector library if supported by the browser\r\n      if ('BarcodeDetector' in window) {\r\n        const barcodeDetector = new (window as any).BarcodeDetector({\r\n          formats: ['qr_code']\r\n        });\r\n        \r\n        const barcodes = await barcodeDetector.detect(canvas);\r\n        \r\n        if (barcodes.length > 0) {\r\n          // QR code found\r\n          const qrData = barcodes[0].rawValue;\r\n          if (qrData) {\r\n            clearInterval(scanIntervalRef.current!);\r\n            onScan(qrData);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error scanning QR code:\", error);\r\n    }\r\n  };\r\n\r\n  // Toggle camera\r\n  const toggleCamera = () => {\r\n    setFacingMode(prev => prev === \"environment\" ? \"user\" : \"environment\");\r\n  };\r\n\r\n  // Simulated QR code for testing\r\n  const handleTestQR = () => {\r\n    const testData = JSON.stringify({\r\n      mintAddress: \"BJAGZ5GqDxm7bPSDDjM473XCkPFvewtXJHkMnY3KFM7Z\",\r\n      amount: 100,\r\n      type: \"compressed-token-claim\",\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    onScan(testData);\r\n    toast.success(\"Test QR code scanned\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center w-full\">\r\n      <div className=\"relative w-full max-w-[300px] h-[300px] bg-black mx-auto overflow-hidden rounded-lg\">\r\n        <video \r\n          ref={videoRef} \r\n          className=\"absolute top-0 left-0 w-full h-full object-cover\"\r\n          playsInline\r\n        />\r\n        <canvas \r\n          ref={canvasRef} \r\n          className=\"hidden\"\r\n        />\r\n        {isScanning && (\r\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\r\n            <div className=\"w-48 h-48 border-2 border-primary border-dashed opacity-70 rounded-md\"></div>\r\n            <ScanLine className=\"absolute text-primary animate-pulse w-44 h-44\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"mt-4 flex gap-2\">\r\n        <Button \r\n          variant=\"outline\" \r\n          size=\"sm\" \r\n          className=\"flex gap-1 items-center\" \r\n          onClick={toggleCamera}\r\n        >\r\n          <FlipHorizontalIcon className=\"w-4 h-4\" />\r\n          <span>Switch camera</span>\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"secondary\" \r\n          size=\"sm\" \r\n          className=\"flex gap-1 items-center\" \r\n          onClick={handleTestQR}\r\n        >\r\n          <span>QR Test</span>\r\n        </Button>\r\n      </div>\r\n      \r\n      <p className=\"text-xs text-center text-muted-foreground mt-2\">\r\n        {isScanning ? \"Place the QR code within the frame to scan\" : \"Initializing camera...\"}\r\n      </p>\r\n    </div>\r\n  );\r\n};",
      "type": "registry:component",
      "target": "components/ui/murphy/QrScannerComponent.tsx"
    }
  ]
}