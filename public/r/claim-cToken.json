{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "claim-cToken",
  "type": "registry:block",
  "title": "Claim cToken",
  "description": "A simple claim cToken form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@lightprotocol/stateless.js",
    "@lightprotocol/compressed-token"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/claim-cToken.tsx",
      "content": "\"use client\";\n\nimport React, { useContext } from \"react\";\nimport {\n    bn,\n    buildAndSignTx,\n    sendAndConfirmTx,\n    dedupeSigner,\n    Rpc,\n    createRpc,\n  } from \"@lightprotocol/stateless.js\";\n  import { ComputeBudgetProgram, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\n  import {\n    CompressedTokenProgram,\n    getTokenPoolInfos,\n    selectMinCompressedTokenAccountsForTransfer,\n    selectTokenPoolInfosForDecompression,\n  } from \"@lightprotocol/compressed-token\";\n  import { getAssociatedTokenAddress, createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\n  import bs58 from \"bs58\";\n  import { useForm } from \"react-hook-form\";\n  import { zodResolver } from \"@hookform/resolvers/zod\";\n  import * as z from \"zod\";\n  import { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\n  import { toast } from \"sonner\";\n\n  import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n  import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n  import { Input } from \"@/components/ui/input\";\n  import { Button } from \"@/components/ui/button\";\n  import { Loader2 } from \"lucide-react\";\n  import { Switch } from \"@/components/ui/switch\";\n  import { Label } from \"@/components/ui/label\";\n  import { ConnectWalletButton } from \"./connect-wallet-button\";\n  import { ModalContext } from \"@/components/providers/wallet-provider\";\n  import { QrScannerComponent } from \"./QrScannerComponent\";\n  import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n  import { Alert, AlertDescription } from \"@/components/ui/alert\";\n  \n  // Form schema\n  const formSchema = z.object({\n    mintAddress: z.string().min(1, \"Mint address is required\"),\n    amount: z.number().min(1, \"Amount must be greater than 0\"),\n  });\n\n  type FormValues = z.infer<typeof formSchema>;\n\n  // Add this data type at the top of the file or just before the component\n  interface QrResult {\n    getText(): string;\n  }\n\n  export function ClaimTokenForm({ className }: { className?: string }) {\n    // Use hook from wallet adapter\n    const { publicKey, signTransaction, sendTransaction, connected } = useWallet();\n    const { connection } = useConnection();\n    const { endpoint } = useContext(ModalContext);\n    \n    const [isSubmitting, setIsSubmitting] = React.useState(false);\n    const [currentStage, setCurrentStage] = React.useState<'input' | 'success' | 'error'>('input');\n    const [error, setError] = React.useState(\"\");\n    const [result, setResult] = React.useState<{\n      txId: string;\n      ata: string;\n    } | null>(null);\n    const [showScanner, setShowScanner] = React.useState(false);\n    const [isMainnet, setIsMainnet] = React.useState(true);\n\n    const form = useForm<FormValues>({\n      resolver: zodResolver(formSchema),\n      defaultValues: {\n        mintAddress: \"\",\n        amount: 100,\n      },\n    });\n\n    const onSubmit = async (values: FormValues) => {\n      try {\n        // Check if the wallet is connected\n        if (!connected || !publicKey || !signTransaction) {\n          toast.error(\"Please connect your wallet first\");\n          return;\n        }\n\n        setIsSubmitting(true);\n        setError(\"\");\n        setCurrentStage('input');\n\n        const rpcEndpoint = isMainnet \n          ? process.env.NEXT_PUBLIC_SOLANA_RPC_URL \n          : process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET;\n\n        if (!rpcEndpoint) {\n          throw new Error(\"RPC endpoint is not configured\");\n        }\n        \n        // Create RPC connection\n        const connection = createRpc(rpcEndpoint);\n\n        // Convert mint address\n        const mint = new PublicKey(values.mintAddress);\n        const amount = values.amount;\n\n        // 1. Find Associated Token Account address\n        const ataAddress = await getAssociatedTokenAddress(mint, publicKey);\n\n        // 2. Check if ATA already exists\n        const ataInfo = await connection.getAccountInfo(ataAddress);\n\n        // 3. If not, create ATA with a separate transaction\n        if (!ataInfo) {\n          console.log(\"Creating new Associated Token Account...\");\n          const createAtaTx = new Transaction();\n          createAtaTx.add(\n            createAssociatedTokenAccountInstruction(\n              publicKey, // payer\n              ataAddress, // ATA address\n              publicKey, // owner\n              mint // token mint\n            )\n          );\n          \n          createAtaTx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n          createAtaTx.feePayer = publicKey;\n          \n          const signedCreateAtaTx = await signTransaction(createAtaTx);\n          const createAtaTxId = await connection.sendRawTransaction(signedCreateAtaTx.serialize());\n          \n          await connection.confirmTransaction({\n            signature: createAtaTxId,\n            blockhash: (await connection.getLatestBlockhash()).blockhash,\n            lastValidBlockHeight: (await connection.getLatestBlockhash()).lastValidBlockHeight,\n          });\n          console.log(\"ATA created with tx ID:\", createAtaTxId);\n        }\n\n        // 4. Get compressed token accounts\n        const compressedTokenAccounts =\n          await connection.getCompressedTokenAccountsByOwner(publicKey, {\n            mint,\n          });\n\n        if (!compressedTokenAccounts.items.length) {\n          throw new Error(\"No compressed tokens found in account\");\n        }\n\n        // 5. Select compressed token account for transfer\n        const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\n          compressedTokenAccounts.items,\n          bn(amount)\n        );\n\n        // 6. Get validity proof\n        const proof = await connection.getValidityProof(\n          inputAccounts.map((account) => account.compressedAccount.hash)\n        );\n\n        // 7. Get token pool information\n        const tokenPoolInfos = await getTokenPoolInfos(connection, mint);\n\n        // 8. Select token pool info for decompression\n        const selectedTokenPoolInfos = selectTokenPoolInfosForDecompression(\n          tokenPoolInfos,\n          amount\n        );\n\n        // 9. Build instruction\n        const ix = await CompressedTokenProgram.decompress({\n          payer: publicKey,\n          inputCompressedTokenAccounts: inputAccounts,\n          toAddress: ataAddress,\n          amount,\n          tokenPoolInfos: selectedTokenPoolInfos,\n          recentInputStateRootIndices: proof.rootIndices,\n          recentValidityProof: proof.compressedProof,\n        });\n\n        // 10. Sign and send transaction using connected wallet\n        const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n        \n        // Create transaction and add instructions\n        const transaction = new Transaction();\n        transaction.add(ComputeBudgetProgram.setComputeUnitLimit({ units: 300_000 }));\n        transaction.add(ix);\n        \n        // Set blockhash and feePayer information\n        transaction.recentBlockhash = blockhash;\n        transaction.feePayer = publicKey;\n        \n        console.log(\"Signing transaction...\");\n        \n        try {\n          // Sign transaction using connected wallet\n          const signedTx = await signTransaction(transaction);\n          \n          console.log(\"Sending transaction...\");\n          const txId = await connection.sendRawTransaction(signedTx.serialize());\n          \n          // Wait for confirmation\n          await connection.confirmTransaction({\n            signature: txId,\n            blockhash,\n            lastValidBlockHeight,\n          });\n          \n          console.log(\"Transaction confirmed:\", txId);\n          \n          setResult({\n            txId,\n            ata: ataAddress.toBase58()\n          });\n          setCurrentStage('success');\n          \n          toast.success(\"Decompression successful!\", {\n            description: `Transaction: ${txId}`\n          });\n        } catch (signError: any) {\n          console.error('Error signing transaction:', signError);\n          \n          // Analyze error if user canceled the transaction\n          if (signError.message && signError.message.includes(\"canceled\")) {\n            toast.error(\"Transaction canceled\", {\n              description: \"You canceled the transaction\"\n            });\n            setError(\"You canceled the transaction\");\n          } else {\n            toast.error(\"Error signing transaction\", {\n              description: signError.message || \"Unable to sign transaction\"\n            });\n            setError(`Error signing transaction: ${signError.message}`);\n          }\n          \n          setCurrentStage('error');\n          throw signError;\n        }\n      } catch (err) {\n        console.error(err);\n        setError(err instanceof Error ? err.message : \"An error occurred\");\n        setCurrentStage('error');\n      } finally {\n        setIsSubmitting(false);\n      }\n    };\n\n    // Reset form\n    const resetForm = () => {\n      form.reset();\n      setResult(null);\n      setCurrentStage(\"input\");\n      setError(\"\");\n    };\n\n    // Add helper function to handle long text\n    const truncateText = (text: string, maxLength: number = 20) => {\n      if (text.length <= maxLength) return text;\n      return `${text.slice(0, maxLength)}...`;\n    };\n\n    // Add helper function to copy text\n    const copyToClipboard = (text: string) => {\n      navigator.clipboard.writeText(text);\n      toast.success(\"Copied to clipboard\");\n    };\n\n    // Add helper function to create Solscan link\n    const getSolscanUrl = (type: 'tx' | 'token' | 'account', id: string) => {\n      const cluster = isMainnet ? '' : '?cluster=devnet';\n      return `https://solscan.io/${type}/${id}${cluster}`;\n    };\n\n    // Add function to handle successful QR scan\n    const handleScan = (data: string) => {\n      try {\n        console.log(\"QR data received:\", data);\n\n        // Try parsing JSON data\n        let parsedData;\n        try {\n          parsedData = JSON.parse(data);\n        } catch (e) {\n          // If not JSON, check if it's simple text\n          if (data.includes(\"mintAddress\")) {\n            // Extract information from text string\n            const mintMatch = data.match(/mintAddress[=:]\\s*[\"']?([^\"',}&\\s]+)/i);\n            const amountMatch = data.match(/amount[=:]\\s*[\"']?([0-9]+)/i);\n            \n            if (mintMatch) {\n              parsedData = {\n                mintAddress: mintMatch[1],\n                amount: amountMatch ? parseInt(amountMatch[1]) : 100\n              };\n            }\n          }\n        }\n\n        // Check if data is compressed token data\n        if (parsedData && parsedData.mintAddress) {\n          // Check Solana address format\n          try {\n            new PublicKey(parsedData.mintAddress);\n          } catch (e) {\n            toast.error(\"Invalid token address\");\n            return;\n          }\n\n          // Check type to confirm this is a compressed token QR code\n          if (parsedData.type === \"compressed-token-claim\" || !parsedData.type) {\n            form.setValue(\"mintAddress\", parsedData.mintAddress);\n            if (parsedData.amount && !isNaN(Number(parsedData.amount))) {\n              form.setValue(\"amount\", Number(parsedData.amount));\n            }\n            \n            setShowScanner(false);\n            toast.success(\"QR code scanned successfully\", {\n              description: `Token: ${parsedData.mintAddress.slice(0, 6)}...${parsedData.mintAddress.slice(-4)}`\n            });\n          } else {\n            toast.error(\"QR code is not a compressed token\");\n          }\n        } else {\n          toast.error(\"QR code does not contain valid token information\");\n        }\n      } catch (error) {\n        console.error(\"QR processing error:\", error);\n        toast.error(\"Unable to process QR code\");\n      }\n    };\n\n    // Render success view\n    const renderSuccess = () => (\n      <div className=\"space-y-4\">\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Field</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Value</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"border-b border-border/50\">\n                  <td className=\"py-3 px-4 text-sm\">Token Address</td>\n                  <td className=\"py-3 px-4 text-sm font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>{truncateText(form.getValues(\"mintAddress\") || \"\")}</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(form.getValues(\"mintAddress\"))}\n                      >\n                        Copy\n                      </Button>\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => window.open(getSolscanUrl('token', form.getValues(\"mintAddress\")), '_blank')}\n                    >\n                      View\n                    </Button>\n                  </td>\n                </tr>\n                <tr className=\"border-b border-border/50\">\n                  <td className=\"py-3 px-4 text-sm\">Token Account</td>\n                  <td className=\"py-3 px-4 text-sm font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>{truncateText(result?.ata || \"\")}</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(result?.ata || \"\")}\n                      >\n                        Copy\n                      </Button>\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => window.open(getSolscanUrl('account', result?.ata || \"\"), '_blank')}\n                    >\n                      View\n                    </Button>\n                  </td>\n                </tr>\n                <tr className=\"border-b border-border/50\">\n                  <td className=\"py-3 px-4 text-sm\">Amount</td>\n                  <td className=\"py-3 px-4 text-sm font-medium\">{form.getValues(\"amount\")}</td>\n                  <td className=\"py-3 px-4 text-sm text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(form.getValues(\"amount\").toString())}\n                    >\n                      Copy\n                    </Button>\n                  </td>\n                </tr>\n                <tr className=\"border-b border-border/50\">\n                  <td className=\"py-3 px-4 text-sm\">Transaction ID</td>\n                  <td className=\"py-3 px-4 text-sm font-medium\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>{truncateText(result?.txId || \"\")}</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(result?.txId || \"\")}\n                      >\n                        Copy\n                      </Button>\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => window.open(getSolscanUrl('tx', result?.txId || \"\"), '_blank')}\n                    >\n                      View\n                    </Button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"flex gap-4\">\n          <Button onClick={resetForm} className=\"flex-1\">\n            Claim More Tokens\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"flex-1\"\n            onClick={() => {\n              const data = {\n                mintAddress: form.getValues(\"mintAddress\"),\n                amount: form.getValues(\"amount\"),\n                ata: result?.ata,\n                txId: result?.txId,\n              };\n              copyToClipboard(JSON.stringify(data, null, 2));\n            }}\n          >\n            Copy All Data\n          </Button>\n        </div>\n      </div>\n    );\n\n    // Render error view\n    const renderError = () => (\n      <div className=\"space-y-4\">\n        <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\n          {error}\n        </div>\n        <Button onClick={resetForm} className=\"w-full\">\n          Try Again\n        </Button>\n      </div>\n    );\n\n    // Render input form\n    const renderInputForm = () => (\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"network-switch\">Network</Label>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-muted-foreground\">Devnet</span>\n                <Switch\n                  id=\"network-switch\"\n                  checked={isMainnet}\n                  disabled={false}\n                  onCheckedChange={setIsMainnet}\n                />\n                <span className=\"text-sm text-muted-foreground\">Mainnet</span>\n              </div>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Select the network you want to use to process tokens\n            </p>\n          </div>\n\n          <div className=\"flex justify-end mb-2\">\n            <Dialog open={showScanner} onOpenChange={setShowScanner}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                  Scan QR Code\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"w-full max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Scan QR Code</DialogTitle>\n                </DialogHeader>\n                <div className=\"w-full py-2\">\n                  <QrScannerComponent\n                    onScan={handleScan}\n                    stopScanning={!showScanner}\n                  />\n                </div>\n                <div className=\"bg-muted p-3 rounded-md text-sm\">\n                  Bring the QR code into the camera's view to automatically fill in the token information\n                </div>\n                \n                <Alert className=\"mt-2 bg-yellow-500/10 text-yellow-600 border-yellow-200\">\n                  <AlertDescription className=\"text-xs\">\n                    Note: After a successful scan, you still need to press the \"Decompress Tokens\" button to confirm\n                  </AlertDescription>\n                </Alert>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"mintAddress\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Token Address</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter token address (e.g., BJA...)\"\n                    {...field}\n                    disabled={isSubmitting || !connected}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"amount\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Token Amount</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    placeholder=\"Enter the amount of tokens to decompress\"\n                    {...field}\n                    onChange={(e) => field.onChange(Number(e.target.value))}\n                    disabled={isSubmitting || !connected}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting || !form.formState.isValid}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Decompressing Tokens...\n                  </>\n                ) : (\n                  \"Decompress Tokens\"\n                )}\n              </Button>\n            )}\n          </div>\n        </form>\n      </Form>\n    );\n\n    // Render based on current stage\n    const renderStageContent = () => {\n      switch (currentStage) {\n        case 'success':\n          return renderSuccess();\n        case 'error':\n          return renderError();\n        default:\n          return renderInputForm();\n      }\n    };\n\n    return (\n      <Card className={className || \"w-full\"}>\n        <CardHeader>\n          <CardTitle>Decompress Tokens</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {renderStageContent()}\n        </CardContent>\n      </Card>\n    );\n  }",
      "type": "registry:component",
      "target": "components/ui/murphy/claim-cToken.tsx"
    },
    {
      "path": "components/ui/murphy/QrScannerComponent.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { toast } from \"sonner\";\nimport { Button } from \"@/components/ui/button\";\nimport { CameraIcon, FlipHorizontalIcon, ScanLine } from \"lucide-react\";\n\nexport const QrScannerComponent = ({ \n  onScan, \n  stopScanning \n}: { \n  onScan: (data: string) => void, \n  stopScanning: boolean \n}) => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [facingMode, setFacingMode] = useState<\"environment\" | \"user\">(\"environment\");\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  \n  // Set interval ID for scanning\n  const scanIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Start camera\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n          toast.error(\"Browser does not support camera\");\n          return;\n        }\n\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n        }\n\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { facingMode }\n        });\n        \n        streamRef.current = stream;\n        \n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.onloadedmetadata = () => {\n            videoRef.current?.play();\n            setIsScanning(true);\n            startScanning();\n          };\n        }\n      } catch (error) {\n        console.error(\"Error opening camera:\", error);\n        toast.error(\"Cannot open camera, please grant access\");\n      }\n    };\n\n    const startScanning = () => {\n      if (scanIntervalRef.current) {\n        clearInterval(scanIntervalRef.current);\n      }\n\n      scanIntervalRef.current = setInterval(() => {\n        scanQRCode();\n      }, 500); // Scan every 500ms\n    };\n\n    if (!stopScanning) {\n      startCamera();\n    }\n\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (scanIntervalRef.current) {\n        clearInterval(scanIntervalRef.current);\n      }\n      setIsScanning(false);\n    };\n  }, [stopScanning, facingMode]);\n\n  // QR code scanning function\n  const scanQRCode = async () => {\n    if (!isScanning || !videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    if (!context || video.videoWidth === 0) return;\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    // Draw the current frame from video to canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    try {\n      // Use BarcodeDetector library if supported by the browser\n      if ('BarcodeDetector' in window) {\n        const barcodeDetector = new (window as any).BarcodeDetector({\n          formats: ['qr_code']\n        });\n        \n        const barcodes = await barcodeDetector.detect(canvas);\n        \n        if (barcodes.length > 0) {\n          // QR code found\n          const qrData = barcodes[0].rawValue;\n          if (qrData) {\n            clearInterval(scanIntervalRef.current!);\n            onScan(qrData);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error scanning QR code:\", error);\n    }\n  };\n\n  // Toggle camera\n  const toggleCamera = () => {\n    setFacingMode(prev => prev === \"environment\" ? \"user\" : \"environment\");\n  };\n\n  // Simulated QR code for testing\n  const handleTestQR = () => {\n    const testData = JSON.stringify({\n      mintAddress: \"BJAGZ5GqDxm7bPSDDjM473XCkPFvewtXJHkMnY3KFM7Z\",\n      amount: 100,\n      type: \"compressed-token-claim\",\n      timestamp: new Date().toISOString()\n    });\n    onScan(testData);\n    toast.success(\"Test QR code scanned\");\n  };\n\n  return (\n    <div className=\"flex flex-col items-center w-full\">\n      <div className=\"relative w-full max-w-[300px] h-[300px] bg-black mx-auto overflow-hidden rounded-lg\">\n        <video \n          ref={videoRef} \n          className=\"absolute top-0 left-0 w-full h-full object-cover\"\n          playsInline\n        />\n        <canvas \n          ref={canvasRef} \n          className=\"hidden\"\n        />\n        {isScanning && (\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"w-48 h-48 border-2 border-primary border-dashed opacity-70 rounded-md\"></div>\n            <ScanLine className=\"absolute text-primary animate-pulse w-44 h-44\" />\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mt-4 flex gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"flex gap-1 items-center\" \n          onClick={toggleCamera}\n        >\n          <FlipHorizontalIcon className=\"w-4 h-4\" />\n          <span>Switch camera</span>\n        </Button>\n        \n        <Button \n          variant=\"secondary\" \n          size=\"sm\" \n          className=\"flex gap-1 items-center\" \n          onClick={handleTestQR}\n        >\n          <span>QR Test</span>\n        </Button>\n      </div>\n      \n      <p className=\"text-xs text-center text-muted-foreground mt-2\">\n        {isScanning ? \"Place the QR code within the frame to scan\" : \"Initializing camera...\"}\n      </p>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/ui/murphy/QrScannerComponent.tsx"
    }
  ]
}