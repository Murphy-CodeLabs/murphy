{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-settings",
  "type": "registry:block",
  "title": "The TxnSettings component is a popover that allows users to set the transaction priority, fee cap, and other transaction settings.",
  "description": "The TxnSettings component is a popover that allows users to set the transaction priority, fee cap, and other transaction settings.",
  "dependencies": [],
  "registryDependencies": [
    "popover",
    "toggle-group",
    "input",
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "components/ui/murphy/txn-settings.tsx",
      "content": "\"use client\";\nimport React from \"react\";\n\nimport { SettingsIcon } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogTrigger,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\ntype TxnSettingsType = {\n  priority: string;\n  priorityFeeCap: \"dynamic\" | number;\n  slippageMode: \"dynamic\" | \"fixed\";\n  slippageValue: number;\n};\n\ntype TxnSettingsContextType = {\n  settings: TxnSettingsType;\n  updateSettings: (newSettings: Partial<TxnSettingsType>) => void;\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst TxnSettingsContext = React.createContext<\n  TxnSettingsContextType | undefined\n>(undefined);\n\nconst TxnSettingsProvider: React.FC<{\n  children: React.ReactNode;\n}> = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [settings, setSettings] = React.useState<TxnSettingsType>({\n    priority: \"normal\",\n    priorityFeeCap: \"dynamic\",\n    slippageMode: \"dynamic\",\n    slippageValue: 1.0,\n  });\n\n  const updateSettings = (newSettings: Partial<TxnSettingsType>) => {\n    setSettings((prevSettings) => ({ ...prevSettings, ...newSettings }));\n  };\n\n  return (\n    <TxnSettingsContext.Provider\n      value={{ settings, updateSettings, isOpen, setIsOpen }}\n    >\n      {children}\n    </TxnSettingsContext.Provider>\n  );\n};\n\nconst useTxnSettings = () => {\n  const context = React.useContext(TxnSettingsContext);\n  if (context === undefined) {\n    throw new Error(\"useTxnSettings must be used within a TxnSettingsProvider\");\n  }\n  return context;\n};\n\ntype TxnSettingsProps = {\n  trigger?: React.ReactNode;\n};\nconst TxnSettings = ({ trigger }: TxnSettingsProps) => {\n  const { settings, updateSettings, isOpen, setIsOpen } = useTxnSettings();\n  const [tempSettings, setTempSettings] =\n    React.useState<TxnSettingsType>(settings);\n  const [manualFee, setManualFee] = React.useState(\"\");\n  const [manualSlippage, setManualSlippage] = React.useState(\"\");\n\n    React.useEffect(() => {\n    if (isOpen) {\n      setTempSettings(settings);\n    }\n    }, [isOpen, settings]);\n  \n  const handleSave = () => {\n    updateSettings(tempSettings);\n    setIsOpen(false);\n  };\n\n  const handleCancel = () => {\n    setTempSettings(settings);\n    setIsOpen(false);\n  };\n\n  const handleSlippagePresetChange = (value: string) => {\n    const slippageMap: Record<string, number> = {\n      low: 0.5,\n      normal: 1.0,\n      high: 1.5,\n    };\n\n    setTempSettings((prev) => ({\n      ...prev,\n      slippageValue: slippageMap[value] || prev.slippageValue,\n    }));\n  };\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button variant=\"outline\"className=\"cursor-pointer\" size=\"icon\">\n            <SettingsIcon  size={16} />\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Transaction Settings</DialogTitle>\n        </DialogHeader>\n        <form\n          className=\"space-y-10 py-4\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleSave();\n          }}\n        >\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Priority fee</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set the priority fee for your transactions.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={tempSettings.priority}\n              onValueChange={(value) =>\n                setTempSettings((prev) => ({ ...prev, priority: value }))\n              }\n            >\n              <ToggleGroupItem value=\"normal\">Normal</ToggleGroupItem>\n              <ToggleGroupItem value=\"medium\">Medium</ToggleGroupItem>\n              <ToggleGroupItem value=\"turbo\">Turbo</ToggleGroupItem>\n            </ToggleGroup>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Priority fee cap</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set the priority fee cap for your transactions.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={\n                tempSettings.priorityFeeCap === \"dynamic\" ? \"dynamic\" : \"manual\"\n              }\n              onValueChange={(value) => {\n                if (value === \"dynamic\") {\n                  setTempSettings((prev) => ({\n                    ...prev,\n                    priorityFeeCap: \"dynamic\",\n                  }));\n                } else if (value === \"manual\") {\n                  setTempSettings((prev) => ({ ...prev, priorityFeeCap: 0 }));\n                }\n              }}\n            >\n              <ToggleGroupItem value=\"manual\">Manual</ToggleGroupItem>\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\n            </ToggleGroup>\n            {tempSettings.priorityFeeCap !== \"dynamic\" && (\n              <Input\n                type=\"number\"\n                placeholder=\"Enter priority fee cap\"\n                value={manualFee}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setManualFee(value);\n                  const numValue = parseFloat(value);\n                  if (!isNaN(numValue)) {\n                    setTempSettings((prev) => ({\n                      ...prev,\n                      priorityFeeCap: numValue,\n                    }));\n                  }\n                }}\n                className=\"mt-2\"\n              />\n            )}\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Slippage mode</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set a fixed slippage or let us calculate optimal slippage for\n                you.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={tempSettings.slippageMode}\n              onValueChange={(value) => {\n                if (value) {\n                  setTempSettings((prev) => ({\n                    ...prev,\n                    slippageMode: value as \"dynamic\" | \"fixed\",\n                  }));\n                }\n              }}\n            >\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\n              <ToggleGroupItem value=\"fixed\">Fixed</ToggleGroupItem>\n            </ToggleGroup>\n\n            {tempSettings.slippageMode === \"fixed\" && (\n              <div className=\"mt-4 space-y-4\">\n                <ToggleGroup\n                  type=\"single\"\n                  className=\"justify-start\"\n                  value={\n                    tempSettings.slippageValue === 0.5\n                      ? \"low\"\n                      : tempSettings.slippageValue === 1.0\n                        ? \"normal\"\n                        : tempSettings.slippageValue === 1.5\n                          ? \"high\"\n                          : \"custom\"\n                  }\n                  onValueChange={(value) => {\n                    if (value && value !== \"custom\") {\n                      handleSlippagePresetChange(value);\n                    }\n                  }}\n                >\n                  <ToggleGroupItem value=\"low\" className=\"h-auto w-full py-1\">\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>Low</span>\n                      <span className=\"text-sm\">0.5 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                  <ToggleGroupItem\n                    value=\"normal\"\n                    className=\"h-auto w-full py-1\"\n                  >\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>Normal</span>\n                      <span className=\"text-sm\">1 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                  <ToggleGroupItem value=\"high\" className=\"h-auto w-full py-1\">\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>High</span>\n                      <span className=\"text-sm\">1.5 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                </ToggleGroup>\n\n                <div>\n                  <p className=\"mb-2 text-sm\">Or set manually</p>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      value={manualSlippage}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setManualSlippage(value);\n                        const numValue = parseFloat(value);\n                        if (!isNaN(numValue)) {\n                          setTempSettings((prev) => ({\n                            ...prev,\n                            slippageValue: numValue,\n                          }));\n                        }\n                      }}\n                      className=\"pr-8\"\n                    />\n                    <span className=\"absolute right-3 top-1/2 -translate-y-1/2 transform\">\n                      %\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button className=\"cursor-pointer\" variant=\"outline\" onClick={handleCancel}>\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button className=\"cursor-pointer\" type=\"submit\">Save</Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\nexport { TxnSettingsProvider, TxnSettings, useTxnSettings };\nexport type { TxnSettingsType };\n",
      "type": "registry:component",
      "target": "components/ui/murphy/txn-settings.tsx"
    }
  ]
}