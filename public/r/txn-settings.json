{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-settings",
  "type": "registry:block",
  "title": "The TxnSettings component is a popover that allows users to set the transaction priority, fee cap, and other transaction settings.",
  "description": "The TxnSettings component is a popover that allows users to set the transaction priority, fee cap, and other transaction settings.",
  "dependencies": [],
  "registryDependencies": [
    "popover",
    "toggle-group",
    "input",
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "components/ui/murphy/txn-settings.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\n\r\nimport { SettingsIcon } from \"lucide-react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTrigger,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n  DialogClose,\r\n} from \"@/components/ui/dialog\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\r\ntype TxnSettingsType = {\r\n  priority: string;\r\n  priorityFeeCap: \"dynamic\" | number;\r\n  slippageMode: \"dynamic\" | \"fixed\";\r\n  slippageValue: number;\r\n};\r\n\r\ntype TxnSettingsContextType = {\r\n  settings: TxnSettingsType;\r\n  updateSettings: (newSettings: Partial<TxnSettingsType>) => void;\r\n  isOpen: boolean;\r\n  setIsOpen: (isOpen: boolean) => void;\r\n};\r\n\r\nconst TxnSettingsContext = React.createContext<\r\n  TxnSettingsContextType | undefined\r\n>(undefined);\r\n\r\nconst TxnSettingsProvider: React.FC<{\r\n  children: React.ReactNode;\r\n}> = ({ children }) => {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [settings, setSettings] = React.useState<TxnSettingsType>({\r\n    priority: \"normal\",\r\n    priorityFeeCap: \"dynamic\",\r\n    slippageMode: \"dynamic\",\r\n    slippageValue: 1.0,\r\n  });\r\n\r\n  const updateSettings = (newSettings: Partial<TxnSettingsType>) => {\r\n    setSettings((prevSettings) => ({ ...prevSettings, ...newSettings }));\r\n  };\r\n\r\n  return (\r\n    <TxnSettingsContext.Provider\r\n      value={{ settings, updateSettings, isOpen, setIsOpen }}\r\n    >\r\n      {children}\r\n    </TxnSettingsContext.Provider>\r\n  );\r\n};\r\n\r\nconst useTxnSettings = () => {\r\n  const context = React.useContext(TxnSettingsContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useTxnSettings must be used within a TxnSettingsProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\ntype TxnSettingsProps = {\r\n  trigger?: React.ReactNode;\r\n};\r\nconst TxnSettings = ({ trigger }: TxnSettingsProps) => {\r\n  const { settings, updateSettings, isOpen, setIsOpen } = useTxnSettings();\r\n  const [tempSettings, setTempSettings] =\r\n    React.useState<TxnSettingsType>(settings);\r\n  const [manualFee, setManualFee] = React.useState(\"\");\r\n  const [manualSlippage, setManualSlippage] = React.useState(\"\");\r\n\r\n    React.useEffect(() => {\r\n    if (isOpen) {\r\n      setTempSettings(settings);\r\n    }\r\n    }, [isOpen, settings]);\r\n  \r\n  const handleSave = () => {\r\n    updateSettings(tempSettings);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTempSettings(settings);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleSlippagePresetChange = (value: string) => {\r\n    const slippageMap: Record<string, number> = {\r\n      low: 0.5,\r\n      normal: 1.0,\r\n      high: 1.5,\r\n    };\r\n\r\n    setTempSettings((prev) => ({\r\n      ...prev,\r\n      slippageValue: slippageMap[value] || prev.slippageValue,\r\n    }));\r\n  };\r\n  return (\r\n    <Dialog>\r\n      <DialogTrigger asChild>\r\n        {trigger || (\r\n          <Button variant=\"outline\"className=\"cursor-pointer\" size=\"icon\">\r\n            <SettingsIcon  size={16} />\r\n          </Button>\r\n        )}\r\n      </DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Transaction Settings</DialogTitle>\r\n        </DialogHeader>\r\n        <form\r\n          className=\"space-y-10 py-4\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            handleSave();\r\n          }}\r\n        >\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-medium\">Priority fee</h4>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Set the priority fee for your transactions.\r\n              </p>\r\n            </div>\r\n            <ToggleGroup\r\n              type=\"single\"\r\n              className=\"justify-start\"\r\n              value={tempSettings.priority}\r\n              onValueChange={(value) =>\r\n                setTempSettings((prev) => ({ ...prev, priority: value }))\r\n              }\r\n            >\r\n              <ToggleGroupItem value=\"normal\">Normal</ToggleGroupItem>\r\n              <ToggleGroupItem value=\"medium\">Medium</ToggleGroupItem>\r\n              <ToggleGroupItem value=\"turbo\">Turbo</ToggleGroupItem>\r\n            </ToggleGroup>\r\n          </div>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-medium\">Priority fee cap</h4>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Set the priority fee cap for your transactions.\r\n              </p>\r\n            </div>\r\n            <ToggleGroup\r\n              type=\"single\"\r\n              className=\"justify-start\"\r\n              value={\r\n                tempSettings.priorityFeeCap === \"dynamic\" ? \"dynamic\" : \"manual\"\r\n              }\r\n              onValueChange={(value) => {\r\n                if (value === \"dynamic\") {\r\n                  setTempSettings((prev) => ({\r\n                    ...prev,\r\n                    priorityFeeCap: \"dynamic\",\r\n                  }));\r\n                } else if (value === \"manual\") {\r\n                  setTempSettings((prev) => ({ ...prev, priorityFeeCap: 0 }));\r\n                }\r\n              }}\r\n            >\r\n              <ToggleGroupItem value=\"manual\">Manual</ToggleGroupItem>\r\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\r\n            </ToggleGroup>\r\n            {tempSettings.priorityFeeCap !== \"dynamic\" && (\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Enter priority fee cap\"\r\n                value={manualFee}\r\n                onChange={(e) => {\r\n                  const value = e.target.value;\r\n                  setManualFee(value);\r\n                  const numValue = parseFloat(value);\r\n                  if (!isNaN(numValue)) {\r\n                    setTempSettings((prev) => ({\r\n                      ...prev,\r\n                      priorityFeeCap: numValue,\r\n                    }));\r\n                  }\r\n                }}\r\n                className=\"mt-2\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <h4 className=\"font-medium\">Slippage mode</h4>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Set a fixed slippage or let us calculate optimal slippage for\r\n                you.\r\n              </p>\r\n            </div>\r\n            <ToggleGroup\r\n              type=\"single\"\r\n              className=\"justify-start\"\r\n              value={tempSettings.slippageMode}\r\n              onValueChange={(value) => {\r\n                if (value) {\r\n                  setTempSettings((prev) => ({\r\n                    ...prev,\r\n                    slippageMode: value as \"dynamic\" | \"fixed\",\r\n                  }));\r\n                }\r\n              }}\r\n            >\r\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\r\n              <ToggleGroupItem value=\"fixed\">Fixed</ToggleGroupItem>\r\n            </ToggleGroup>\r\n\r\n            {tempSettings.slippageMode === \"fixed\" && (\r\n              <div className=\"mt-4 space-y-4\">\r\n                <ToggleGroup\r\n                  type=\"single\"\r\n                  className=\"justify-start\"\r\n                  value={\r\n                    tempSettings.slippageValue === 0.5\r\n                      ? \"low\"\r\n                      : tempSettings.slippageValue === 1.0\r\n                        ? \"normal\"\r\n                        : tempSettings.slippageValue === 1.5\r\n                          ? \"high\"\r\n                          : \"custom\"\r\n                  }\r\n                  onValueChange={(value) => {\r\n                    if (value && value !== \"custom\") {\r\n                      handleSlippagePresetChange(value);\r\n                    }\r\n                  }}\r\n                >\r\n                  <ToggleGroupItem value=\"low\" className=\"h-auto w-full py-1\">\r\n                    <div className=\"flex w-full flex-col items-center\">\r\n                      <span>Low</span>\r\n                      <span className=\"text-sm\">0.5 %</span>\r\n                    </div>\r\n                  </ToggleGroupItem>\r\n                  <ToggleGroupItem\r\n                    value=\"normal\"\r\n                    className=\"h-auto w-full py-1\"\r\n                  >\r\n                    <div className=\"flex w-full flex-col items-center\">\r\n                      <span>Normal</span>\r\n                      <span className=\"text-sm\">1 %</span>\r\n                    </div>\r\n                  </ToggleGroupItem>\r\n                  <ToggleGroupItem value=\"high\" className=\"h-auto w-full py-1\">\r\n                    <div className=\"flex w-full flex-col items-center\">\r\n                      <span>High</span>\r\n                      <span className=\"text-sm\">1.5 %</span>\r\n                    </div>\r\n                  </ToggleGroupItem>\r\n                </ToggleGroup>\r\n\r\n                <div>\r\n                  <p className=\"mb-2 text-sm\">Or set manually</p>\r\n                  <div className=\"relative\">\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                      value={manualSlippage}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setManualSlippage(value);\r\n                        const numValue = parseFloat(value);\r\n                        if (!isNaN(numValue)) {\r\n                          setTempSettings((prev) => ({\r\n                            ...prev,\r\n                            slippageValue: numValue,\r\n                          }));\r\n                        }\r\n                      }}\r\n                      className=\"pr-8\"\r\n                    />\r\n                    <span className=\"absolute right-3 top-1/2 -translate-y-1/2 transform\">\r\n                      %\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <DialogFooter>\r\n            <DialogClose asChild>\r\n              <Button className=\"cursor-pointer\" variant=\"outline\" onClick={handleCancel}>\r\n                Cancel\r\n              </Button>\r\n            </DialogClose>\r\n            <Button className=\"cursor-pointer\" type=\"submit\">Save</Button>\r\n          </DialogFooter>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\nexport { TxnSettingsProvider, TxnSettings, useTxnSettings };\r\nexport type { TxnSettingsType };\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/txn-settings.tsx"
    }
  ]
}