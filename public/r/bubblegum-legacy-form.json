{
    "name": "bubblegum-legacy-form",
    "description": "A Metaplex Bubblegum v1 (legacy) compressed NFT creation component with advanced creator management and tree configuration",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-token-metadata",
        "@metaplex-foundation/mpl-bubblegum",
        "react-hook-form",
        "@hookform/resolvers",
        "zod",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "textarea",
        "switch",
        "label",
        "badge",
        "alert",
        "tabs"
    ],
    "files": [
        {
            "name": "bubblegum-legacy-form.tsx",
            "content": "'use client';\n\n// React v√† hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Alert,\n  AlertDescription,\n} from \"@/components/ui/alert\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Archive, AlertTriangle, X } from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries for legacy Bubblegum\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  mplBubblegum,\n  mintV1,\n  createTree,\n} from '@metaplex-foundation/mpl-bubblegum';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  some,\n  none,\n} from '@metaplex-foundation/umi';\n\n// Types and interfaces\ninterface BubblegumLegacyResult {\n  nftAddress: string;\n  signature: string;\n  merkleTree?: string;\n}\n\ntype BubblegumLegacyFormValues = {\n  // NFT Metadata\n  name: string;\n  symbol: string;\n  uri: string;\n\n  // Tree Configuration\n  merkleTreeAddress: string;\n  useExistingTree: boolean;\n\n  // Tree Creation (if creating new)\n  maxDepth: number;\n  maxBufferSize: number;\n\n  // Collection (optional)\n  collectionMint: string;\n\n  // Legacy specific options\n  enableCreatorHash: boolean;\n  creators: Array<{\n    address: string;\n    verified: boolean;\n    share: number;\n  }>;\n};\n\nexport interface BubblegumLegacyFormProps {\n  merkleTree?: string;\n  collectionMint?: string;\n  onNFTCreated?: (nftAddress: string, signature: string, merkleTree?: string) => void;\n  className?: string;\n}\n\n// Form validation resolver\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate basic fields\n  if (!data.name?.trim()) {\n    errors.name = { type: \"required\", message: \"Name is required\" };\n  }\n\n  if (!data.symbol?.trim()) {\n    errors.symbol = { type: \"required\", message: \"Symbol is required\" };\n  }\n\n  if (!data.uri?.trim()) {\n    errors.uri = { type: \"required\", message: \"URI is required\" };\n  } else {\n    try {\n      new URL(data.uri);\n    } catch {\n      errors.uri = { type: \"pattern\", message: \"Invalid URI format\" };\n    }\n  }\n\n  // Validate merkle tree configuration\n  if (data.useExistingTree) {\n    if (!data.merkleTreeAddress?.trim()) {\n      errors.merkleTreeAddress = {\n        type: \"required\",\n        message: \"Merkle Tree address is required when using existing tree\"\n      };\n    } else {\n      try {\n        new PublicKey(data.merkleTreeAddress);\n      } catch {\n        errors.merkleTreeAddress = {\n          type: \"pattern\",\n          message: \"Invalid Merkle Tree address format\"\n        };\n      }\n    }\n  } else {\n    if (!data.maxDepth || data.maxDepth < 3 || data.maxDepth > 30) {\n      errors.maxDepth = {\n        type: \"range\",\n        message: \"Max depth must be between 3 and 30\"\n      };\n    }\n\n    if (!data.maxBufferSize || data.maxBufferSize < 8 || data.maxBufferSize > 2048) {\n      errors.maxBufferSize = {\n        type: \"range\",\n        message: \"Max buffer size must be between 8 and 2048\"\n      };\n    }\n  }\n\n  // Validate creators\n  if (data.creators?.length > 0) {\n    const totalShare = data.creators.reduce((sum: number, creator: any) => sum + (creator.share || 0), 0);\n    if (totalShare !== 100) {\n      errors.creators = {\n        type: \"sum\",\n        message: \"Creator shares must sum to 100%\"\n      };\n    }\n\n    data.creators.forEach((creator: any, index: number) => {\n      if (!creator.address?.trim()) {\n        errors[`creators.${index}.address`] = {\n          type: \"required\",\n          message: \"Creator address is required\"\n        };\n      } else {\n        try {\n          new PublicKey(creator.address);\n        } catch {\n          errors[`creators.${index}.address`] = {\n            type: \"pattern\",\n            message: \"Invalid creator address format\"\n          };\n        }\n      }\n\n      if (creator.share < 0 || creator.share > 100) {\n        errors[`creators.${index}.share`] = {\n          type: \"range\",\n          message: \"Creator share must be between 0 and 100\"\n        };\n      }\n    });\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors\n  };\n};\n\nexport default function BubblegumLegacyForm({\n  merkleTree: propMerkleTree,\n  collectionMint: propCollectionMint,\n  onNFTCreated,\n  className\n}: BubblegumLegacyFormProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<BubblegumLegacyResult | null>(null);\n\n  // Form setup\n  const form = useForm<BubblegumLegacyFormValues>({\n    defaultValues: {\n      name: \"\",\n      symbol: \"\",\n      uri: \"\",\n      merkleTreeAddress: propMerkleTree || \"\",\n      useExistingTree: !!propMerkleTree,\n      maxDepth: 14,\n      maxBufferSize: 64,\n      collectionMint: propCollectionMint || \"\",\n      enableCreatorHash: false,\n      creators: [\n        {\n          address: \"\",\n          verified: true,\n          share: 100,\n        }\n      ],\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Effects\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Auto-fill creator address when wallet connects\n  useEffect(() => {\n    if (connected && publicKey && form.getValues(\"creators\")[0].address === \"\") {\n      const creators = form.getValues(\"creators\");\n      creators[0].address = publicKey.toString();\n      form.setValue(\"creators\", creators);\n    }\n  }, [connected, publicKey, form]);\n\n  // Submit handler\n  const onSubmit = async (values: BubblegumLegacyFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage(\"confirming\");\n      setError(\"\");\n\n      toast.loading(\"Creating Legacy Compressed NFT...\", {\n        id: \"bubblegum-legacy-create\",\n      });\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI with Bubblegum\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplTokenMetadata())\n        .use(mplBubblegum());\n\n      let merkleTreeAddress = values.merkleTreeAddress;\n\n      // Create new merkle tree if not using existing one\n      if (!values.useExistingTree) {\n        const merkleTree = generateSigner(umi);\n\n        const createTreeIx = createTree(umi, {\n          merkleTree,\n          maxDepth: values.maxDepth,\n          maxBufferSize: values.maxBufferSize,\n          treeCreator: umi.identity,\n        });\n\n        await createTreeIx.sendAndConfirm(umi);\n        merkleTreeAddress = merkleTree.publicKey.toString();\n      }\n\n      // Prepare creators\n      const creators = values.creators.map(creator => ({\n        address: umiPublicKey(creator.address),\n        verified: creator.verified,\n        share: creator.share,\n      }));\n\n      // Convert addresses\n      const leafOwnerPubkey = umiPublicKey(publicKey.toString());\n      const merkleTreePubkey = umiPublicKey(merkleTreeAddress);\n\n      // Mint legacy compressed NFT\n      const mintIx = mintV1(umi, {\n        leafOwner: leafOwnerPubkey,\n        merkleTree: merkleTreePubkey,\n        metadata: {\n          name: values.name,\n          symbol: values.symbol,\n          uri: values.uri,\n          sellerFeeBasisPoints: 500, // 5%\n          collection: values.collectionMint ? some({\n            key: umiPublicKey(values.collectionMint),\n            verified: false,\n          }) : none(),\n          creators: creators.length > 0 ? some(creators) : none(),\n        },\n      });\n\n      const mintResult = await mintIx.sendAndConfirm(umi);\n      const mintSignature = typeof mintResult.signature === 'string'\n        ? mintResult.signature\n        : Buffer.from(mintResult.signature).toString('base64');\n\n      // For legacy Bubblegum, we need to derive the NFT address differently\n      // This is a simplified approach - in reality, you'd need to track the leaf index\n      const nftAddress = `${merkleTreeAddress}_leaf_${Date.now()}`;\n\n      setResult({\n        nftAddress,\n        signature: mintSignature,\n        merkleTree: merkleTreeAddress,\n      });\n\n      if (onNFTCreated) {\n        onNFTCreated(nftAddress, mintSignature, merkleTreeAddress);\n      }\n\n      setCurrentStage(\"success\");\n\n      toast.success(\"Legacy Compressed NFT created successfully!\", {\n        id: \"bubblegum-legacy-create\",\n        description: `NFT: ${nftAddress.slice(0, 8)}...${nftAddress.slice(-8)}`,\n      });\n\n    } catch (err: any) {\n      console.error(\"Error creating legacy compressed NFT:\", err);\n\n      setCurrentStage(\"error\");\n      setError(err.message || \"An unknown error occurred\");\n\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction rejected\", {\n          id: \"bubblegum-legacy-create\",\n          description: \"You have rejected the transaction\",\n        });\n      } else {\n        toast.error(\"Cannot create Legacy Compressed NFT\", {\n          id: \"bubblegum-legacy-create\",\n          description: err.message,\n        });\n\n        if (err.message?.includes(\"failed to fetch\") ||\n          err.message?.includes(\"timeout\") ||\n          err.message?.includes(\"429\") ||\n          err.message?.includes(\"503\")) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Creator management\n  const addCreator = () => {\n    const currentCreators = form.getValues(\"creators\");\n    form.setValue(\"creators\", [\n      ...currentCreators,\n      { address: \"\", verified: true, share: 0 }\n    ]);\n  };\n\n  const removeCreator = (index: number) => {\n    const currentCreators = form.getValues(\"creators\");\n    if (currentCreators.length > 1) {\n      form.setValue(\"creators\", currentCreators.filter((_, i) => i !== index));\n    }\n  };\n\n  // View functions\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/tx/\"\n        : \"https://solscan.io/tx/\";\n      window.open(\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const viewMerkleTree = () => {\n    if (result?.merkleTree) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/address/\"\n        : \"https://solscan.io/account/\";\n      window.open(\n        `${baseUrl}${result.merkleTree}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n  };\n\n  // Render functions\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Legacy Warning */}\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Legacy Version:</strong> This is Bubblegum v1 (legacy). For new projects, consider using <a href=\"/docs/onchainkit/Metaplex/Bubblegum-v2/mint-cnft-form\" className=\"underline\">Bubblegum v2</a> instead.\n          </AlertDescription>\n        </Alert>\n\n        {/* NFT Metadata */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">NFT Metadata</h3>\n\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Name</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter NFT name\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"symbol\"\n              render={({ field }) => (\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                  <FormLabel>Symbol</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"NFT\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"collectionMint\"\n              render={({ field }) => (\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                  <FormLabel>Collection (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Collection mint address\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"uri\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Metadata URI</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"https://example.com/metadata.json\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Tree Configuration */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Merkle Tree Configuration</h3>\n\n          <FormField\n            control={form.control}\n            name=\"useExistingTree\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4 flex items-center space-x-2\">\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={isSubmitting}\n                  />\n                </FormControl>\n                <Label>Use Existing Merkle Tree</Label>\n              </FormItem>\n            )}\n          />\n\n          {form.watch(\"useExistingTree\") ? (\n            <FormField\n              control={form.control}\n              name=\"merkleTreeAddress\"\n              render={({ field }) => (\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                  <FormLabel>Merkle Tree Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter Merkle Tree address\"\n                      {...field}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"maxDepth\"\n                render={({ field }) => (\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                    <FormLabel>Max Depth</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"3\"\n                        max=\"30\"\n                        placeholder=\"14\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        disabled={isSubmitting}\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Tree depth (3-30). Higher = more NFTs possible\n                    </p>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"maxBufferSize\"\n                render={({ field }) => (\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                    <FormLabel>Max Buffer Size</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"8\"\n                        max=\"2048\"\n                        placeholder=\"64\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        disabled={isSubmitting}\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Buffer size (8-2048). Higher = more concurrent operations\n                    </p>\n                  </FormItem>\n                )}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Creators Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Creators</h3>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={addCreator}\n              disabled={isSubmitting}\n            >\n              Add Creator\n            </Button>\n          </div>\n\n          {form.watch(\"creators\").map((_, index) => (\n            <div key={index} className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Creator {index + 1}</span>\n                {form.watch(\"creators\").length > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeCreator(index)}\n                    disabled={isSubmitting}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-12 gap-2\">\n                <div className=\"col-span-8\">\n                  <FormField\n                    control={form.control}\n                    name={`creators.${index}.address`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Creator address\"\n                            {...field}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-3\">\n                  <FormField\n                    control={form.control}\n                    name={`creators.${index}.share`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            placeholder=\"Share %\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-1 flex items-center\">\n                  <FormField\n                    control={form.control}\n                    name={`creators.${index}.verified`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Submit */}\n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Archive className=\"mr-2 h-4 w-4\" />\n                    Create Legacy Compressed NFT\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Legacy Compressed NFT has been created successfully\n        </p>\n      </div>\n\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">NFT:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.nftAddress?.slice(0, 8)}...{result?.nftAddress?.slice(-8)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Transaction:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={viewExplorer}\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {result?.merkleTree && (\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Merkle Tree:</span>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-mono\">\n                {result.merkleTree.slice(0, 8)}...{result.merkleTree.slice(-8)}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={viewMerkleTree}\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Button onClick={resetForm} className=\"w-full\">\n        Create Another Legacy NFT\n      </Button>\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <X className=\"h-10 w-10 text-red-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\n        <p className=\"text-muted-foreground\">\n          Failed to create Legacy Compressed NFT\n        </p>\n      </div>\n\n      <div className=\"rounded-lg bg-red-50 p-4\">\n        <p className=\"text-sm text-red-600\">{error}</p>\n      </div>\n\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Legacy Compressed NFT</h3>\n      <p className=\"text-muted-foreground\">\n        Please wait while your Legacy Compressed NFT is being created...\n      </p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case \"success\":\n        return renderSuccess();\n      case \"error\":\n        return renderError();\n      case \"confirming\":\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Create Legacy Compressed NFT</CardTitle>\n          <CardDescription>\n            Create compressed NFTs using Bubblegum v1 (legacy)\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Archive className=\"h-5 w-5\" />\n              Create Legacy Compressed NFT\n            </CardTitle>\n            <CardDescription>\n              Create compressed NFTs using Bubblegum v1 (legacy)\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {connected && publicKey && (\n              <Badge variant=\"outline\">\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n              </Badge>\n            )}\n            <Badge variant=\"outline\">{network}</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport { BubblegumLegacyForm };"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Bubblegum-v1",
    "tags": [
        "nft",
        "compressed-nft",
        "cnft",
        "metaplex",
        "bubblegum",
        "solana",
        "form",
        "legacy",
        "merkle-tree",
        "creators",
        "v1"
    ]
}