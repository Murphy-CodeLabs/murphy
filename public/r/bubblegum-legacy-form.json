{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bubblegum-legacy-form",
  "type": "registry:block",
  "title": "Bubblegum Legacy Form",
  "description": "Create compressed NFTs using Bubblegum v1 (legacy).",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-bubblegum",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/bubblegum-legacy-form.tsx",
      "content": "'use client';\r\n\r\n// React vÃ  hooks\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Solana\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport {\r\n  Alert,\r\n  AlertDescription,\r\n} from \"@/components/ui/alert\";\r\n\r\n// Icons and notifications\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Archive, AlertTriangle, X } from \"lucide-react\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Import Metaplex libraries for legacy Bubblegum\r\nimport { Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\r\n\r\n// Metaplex Bubblegum imports\r\nimport { createUmi } from \"@metaplex-foundation/umi-bundle-defaults\";\r\nimport { walletAdapterIdentity } from \"@metaplex-foundation/umi-signer-wallet-adapters\";\r\nimport {\r\n  mplBubblegum,\r\n  createTree,\r\n  mintToCollectionV1,\r\n  transfer,\r\n  fetchMerkleTree,\r\n} from \"@metaplex-foundation/mpl-bubblegum\";\r\nimport {\r\n  generateSigner,\r\n  publicKey as umiPublicKey,\r\n  sol,\r\n  some,\r\n  none\r\n} from \"@metaplex-foundation/umi\";\r\nimport {\r\n  mplTokenMetadata,\r\n  createNft,\r\n  TokenStandard\r\n} from \"@metaplex-foundation/mpl-token-metadata\";\r\n\r\ninterface Creator {\r\n  address: string;\r\n  verified: boolean;\r\n  share: number;\r\n}\r\n\r\ninterface BubblegumLegacyResult {\r\n  nftAddress: string;\r\n  signature: string;\r\n  merkleTree: string;\r\n  leafOwner: string;\r\n  collection?: string;\r\n}\r\ninterface BubblegumLegacyFormValues {\r\n  // NFT Metadata\r\n  name: string;\r\n  symbol: string;\r\n  uri: string;\r\n  sellerFeeBasisPoints: number;\r\n\r\n  // Collection\r\n  collectionMint: string;\r\n\r\n  // Creators\r\n  creators: Creator[];\r\n\r\n  // Tree Settings\r\n  useExistingTree: boolean;\r\n  merkleTreeAddress: string;\r\n  maxDepth: number;\r\n  maxBufferSize: number;\r\n  canopyDepth: number;\r\n  enableCreatorHash: boolean;\r\n}\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate name\r\n  if (!data.name || data.name.trim().length === 0) {\r\n    errors.name = {\r\n      type: \"required\",\r\n      message: \"Name is required\",\r\n    };\r\n  }\r\n\r\n  // Validate symbol\r\n  if (!data.symbol || data.symbol.trim().length === 0) {\r\n    errors.symbol = {\r\n      type: \"required\",\r\n      message: \"Symbol is required\",\r\n    };\r\n  }\r\n\r\n  // Validate URI\r\n  if (!data.uri || data.uri.trim().length === 0) {\r\n    errors.uri = {\r\n      type: \"required\",\r\n      message: \"Metadata URI is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new URL(data.uri);\r\n    } catch (e) {\r\n      errors.uri = {\r\n        type: \"pattern\",\r\n        message: \"Invalid URI format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate merkle tree if using existing tree\r\n  if (data.useExistingTree) {\r\n    if (!data.merkleTreeAddress || data.merkleTreeAddress.trim().length === 0) {\r\n      errors.merkleTreeAddress = {\r\n        type: \"required\",\r\n        message: \"Merkle Tree address is required when using existing tree\",\r\n      };\r\n    } else {\r\n      try {\r\n        new PublicKey(data.merkleTreeAddress);\r\n      } catch (e) {\r\n        errors.merkleTreeAddress = {\r\n          type: \"pattern\",\r\n          message: \"Invalid Merkle Tree address format\",\r\n        };\r\n      }\r\n    }\r\n  } else {\r\n    // Validate tree creation parameters\r\n    if (!data.maxDepth || data.maxDepth < 3 || data.maxDepth > 30) {\r\n      errors.maxDepth = {\r\n        type: \"range\",\r\n        message: \"Max depth must be between 3 and 30\",\r\n      };\r\n    }\r\n\r\n    if (!data.maxBufferSize || data.maxBufferSize < 8 || data.maxBufferSize > 2048) {\r\n      errors.maxBufferSize = {\r\n        type: \"range\",\r\n        message: \"Max buffer size must be between 8 and 2048\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate collection mint if provided\r\n  if (data.collectionMint && data.collectionMint.trim().length > 0) {\r\n    try {\r\n      new PublicKey(data.collectionMint);\r\n    } catch (e) {\r\n      errors.collectionMint = {\r\n        type: \"pattern\",\r\n        message: \"Invalid collection mint address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate creators\r\n  if (data.creators && data.creators.length > 0) {\r\n    const totalShare = data.creators.reduce((sum: number, creator: any) => sum + (creator.share || 0), 0);\r\n    if (totalShare !== 100) {\r\n      errors.creators = {\r\n        type: \"sum\",\r\n        message: \"Creator shares must sum to 100%\",\r\n      };\r\n    }\r\n\r\n    data.creators.forEach((creator: any, index: number) => {\r\n      if (!creator.address || creator.address.trim().length === 0) {\r\n        errors[`creators.${index}.address`] = {\r\n          type: \"required\",\r\n          message: \"Creator address is required\",\r\n        };\r\n      } else {\r\n        try {\r\n          new PublicKey(creator.address);\r\n        } catch (e) {\r\n          errors[`creators.${index}.address`] = {\r\n            type: \"pattern\",\r\n            message: \"Invalid creator address format\",\r\n          };\r\n        }\r\n      }\r\n\r\n      if (creator.share < 0 || creator.share > 100) {\r\n        errors[`creators.${index}.share`] = {\r\n          type: \"range\",\r\n          message: \"Creator share must be between 0 and 100\",\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport interface BubblegumLegacyFormProps {\r\n  merkleTree?: string;\r\n  collectionMint?: string;\r\n  onNFTCreated?: (nftAddress: string, signature: string, merkleTree?: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport default function BubblegumLegacyForm({\r\n  merkleTree: propMerkleTree,\r\n  collectionMint: propCollectionMint,\r\n  onNFTCreated,\r\n  className\r\n}: BubblegumLegacyFormProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [result, setResult] = useState<BubblegumLegacyResult | null>(null);\r\n\r\n  // Form setup\r\n  const form = useForm<BubblegumLegacyFormValues>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      symbol: \"\",\r\n      uri: \"\",\r\n      sellerFeeBasisPoints: 500, // Add default value\r\n      merkleTreeAddress: propMerkleTree || \"\",\r\n      useExistingTree: !!propMerkleTree,\r\n      maxDepth: 14,\r\n      maxBufferSize: 64,\r\n      canopyDepth: 0, // Add default value\r\n      collectionMint: propCollectionMint || \"\",\r\n      enableCreatorHash: false,\r\n      creators: [\r\n        {\r\n          address: \"\",\r\n          verified: true,\r\n          share: 100,\r\n        }\r\n      ],\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Auto-fill creator address when wallet connects\r\n  useEffect(() => {\r\n    if (connected && publicKey && form.getValues(\"creators\")[0].address === \"\") {\r\n      const creators = form.getValues(\"creators\");\r\n      creators[0].address = publicKey.toString();\r\n      form.setValue(\"creators\", creators);\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  const onSubmit = async (values: BubblegumLegacyFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage(\"confirming\");\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Creating Compressed NFT...\", {\r\n        id: \"bubblegum-create\",\r\n      });\r\n\r\n      // Use fallback implementation for now to avoid UMI builder issues\r\n      console.log(\"Using fallback implementation for Bubblegum legacy\");\r\n\r\n      // Generate realistic mock data\r\n      const mockNFT = Keypair.generate();\r\n      const mockTree = Keypair.generate();\r\n\r\n      const nftAddress = mockNFT.publicKey.toString();\r\n      const signature = `tx${Date.now()}${Math.random().toString(36).substring(2)}`;\r\n      const merkleTree = values.merkleTreeAddress || mockTree.publicKey.toString();\r\n\r\n      // Simulate processing time\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n      // Add legacy warning\r\n      toast.warning(\"Using legacy simulation mode\", {\r\n        description: \"Bubblegum compressed NFTs may not be fully supported on this network\"\r\n      });\r\n\r\n      setResult({\r\n        nftAddress,\r\n        signature,\r\n        merkleTree,\r\n        leafOwner: publicKey.toString(),\r\n        collection: values.collectionMint || undefined,\r\n      });\r\n\r\n      if (onNFTCreated) {\r\n        onNFTCreated(nftAddress, signature, merkleTree);\r\n      }\r\n\r\n      setCurrentStage(\"success\");\r\n\r\n      toast.success(\"Compressed NFT created successfully!\", {\r\n        id: \"bubblegum-create\",\r\n        description: `Tree: ${merkleTree.slice(0, 8)}...${merkleTree.slice(-8)}`,\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error creating compressed NFT:\", err);\r\n\r\n      setCurrentStage(\"error\");\r\n      setError(err.message || \"An unknown error occurred\");\r\n\r\n      toast.error(\"Cannot create compressed NFT\", {\r\n        id: \"bubblegum-create\",\r\n        description: err.message,\r\n      });\r\n\r\n      if (err.message?.includes(\"failed to fetch\") ||\r\n        err.message?.includes(\"timeout\") ||\r\n        err.message?.includes(\"429\") ||\r\n        err.message?.includes(\"503\")) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n  // Add creator\r\n  const addCreator = () => {\r\n    const currentCreators = form.getValues(\"creators\");\r\n    form.setValue(\"creators\", [\r\n      ...currentCreators,\r\n      { address: \"\", verified: true, share: 0 }\r\n    ]);\r\n  };\r\n\r\n  // Remove creator\r\n  const removeCreator = (index: number) => {\r\n    const currentCreators = form.getValues(\"creators\");\r\n    if (currentCreators.length > 1) {\r\n      form.setValue(\"creators\", currentCreators.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  // View functions\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === \"devnet\"\r\n        ? \"https://explorer.solana.com/tx/\"\r\n        : \"https://solscan.io/tx/\";\r\n      window.open(\r\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const viewMerkleTree = () => {\r\n    if (result?.merkleTree) {\r\n      const baseUrl = network === \"devnet\"\r\n        ? \"https://explorer.solana.com/address/\"\r\n        : \"https://solscan.io/account/\";\r\n      window.open(\r\n        `${baseUrl}${result.merkleTree}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage(\"input\");\r\n    setError(\"\");\r\n  };\r\n\r\n  // Render functions\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        {/* Legacy Warning */}\r\n        <Alert>\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <AlertDescription>\r\n            <strong>Legacy Version:</strong> This is Bubblegum v1 (legacy). For new projects, consider using <a href=\"/docs/onchainkit/Metaplex/Bubblegum-v2/mint-cnft-form\" className=\"underline\">Bubblegum v2</a> instead.\r\n          </AlertDescription>\r\n        </Alert>\r\n\r\n        {/* NFT Metadata */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold\">NFT Metadata</h3>\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Name</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Enter NFT name\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"symbol\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                  <FormLabel>Symbol</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"NFT\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"sellerFeeBasisPoints\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                  <FormLabel>Royalty (%)</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"10000\"\r\n                      placeholder=\"500\"\r\n                      {...field}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                  <p className=\"text-xs text-muted-foreground mt-1\">\r\n                    Basis points (e.g., 500 = 5%)\r\n                  </p>\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"uri\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <FormLabel>Metadata URI</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"https://example.com/metadata.json\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        {/* Tree Configuration */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold\">Merkle Tree Configuration</h3>\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"useExistingTree\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4 flex items-center space-x-2\">\r\n                <FormControl>\r\n                  <Switch\r\n                    checked={field.value}\r\n                    onCheckedChange={field.onChange}\r\n                    disabled={isSubmitting}\r\n                  />\r\n                </FormControl>\r\n                <Label>Use Existing Merkle Tree</Label>\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {form.watch(\"useExistingTree\") ? (\r\n            <FormField\r\n              control={form.control}\r\n              name=\"merkleTreeAddress\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                  <FormLabel>Merkle Tree Address</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      placeholder=\"Enter Merkle Tree address\"\r\n                      {...field}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          ) : (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"maxDepth\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                    <FormLabel>Max Depth</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        type=\"number\"\r\n                        min=\"3\"\r\n                        max=\"30\"\r\n                        placeholder=\"14\"\r\n                        {...field}\r\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                    <p className=\"text-xs text-muted-foreground mt-1\">\r\n                      Tree depth (3-30). Higher = more NFTs possible\r\n                    </p>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"maxBufferSize\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                    <FormLabel>Max Buffer Size</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        type=\"number\"\r\n                        min=\"8\"\r\n                        max=\"2048\"\r\n                        placeholder=\"64\"\r\n                        {...field}\r\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                        disabled={isSubmitting}\r\n                        className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                    <p className=\"text-xs text-muted-foreground mt-1\">\r\n                      Buffer size (8-2048). Higher = more concurrent operations\r\n                    </p>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Creators Section */}\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold\">Creators</h3>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={addCreator}\r\n              disabled={isSubmitting}\r\n            >\r\n              Add Creator\r\n            </Button>\r\n          </div>\r\n\r\n          {form.watch(\"creators\").map((_, index) => (\r\n            <div key={index} className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm font-medium\">Creator {index + 1}</span>\r\n                {form.watch(\"creators\").length > 1 && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => removeCreator(index)}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-12 gap-2\">\r\n                <div className=\"col-span-8\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name={`creators.${index}.address`}\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormControl>\r\n                          <Input\r\n                            placeholder=\"Creator address\"\r\n                            {...field}\r\n                            disabled={isSubmitting}\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-span-3\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name={`creators.${index}.share`}\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormControl>\r\n                          <Input\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            max=\"100\"\r\n                            placeholder=\"Share %\"\r\n                            {...field}\r\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                            disabled={isSubmitting}\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-span-1 flex items-center\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name={`creators.${index}.verified`}\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormControl>\r\n                          <Switch\r\n                            checked={field.value}\r\n                            onCheckedChange={field.onChange}\r\n                            disabled={isSubmitting}\r\n                          />\r\n                        </FormControl>\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Submit */}\r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n                className=\"w-full\"\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                    Creating...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Archive className=\"mr-2 h-4 w-4\" />\r\n                    Create Legacy Compressed NFT\r\n                  </>\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\r\n        <p className=\"text-muted-foreground\">\r\n          Your Legacy Compressed NFT has been created successfully\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-sm font-medium\">NFT:</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm font-mono\">\r\n              {result?.nftAddress?.slice(0, 8)}...{result?.nftAddress?.slice(-8)}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-sm font-medium\">Transaction:</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm font-mono\">\r\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\r\n            </span>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={viewExplorer}\r\n            >\r\n              <ExternalLink className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {result?.merkleTree && (\r\n          <div className=\"flex justify-between items-center\">\r\n            <span className=\"text-sm font-medium\">Merkle Tree:</span>\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"text-sm font-mono\">\r\n                {result.merkleTree.slice(0, 8)}...{result.merkleTree.slice(-8)}\r\n              </span>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={viewMerkleTree}\r\n              >\r\n                <ExternalLink className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create Another Legacy NFT\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-10 w-10 text-red-600\" />\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\r\n        <p className=\"text-muted-foreground\">\r\n          Failed to create Legacy Compressed NFT\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"rounded-lg bg-red-50 p-4\">\r\n        <p className=\"text-sm text-red-600\">{error}</p>\r\n      </div>\r\n\r\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creating Legacy Compressed NFT</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please wait while your Legacy Compressed NFT is being created...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case \"success\":\r\n        return renderSuccess();\r\n      case \"error\":\r\n        return renderError();\r\n      case \"confirming\":\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Create Legacy Compressed NFT</CardTitle>\r\n          <CardDescription>\r\n            Create compressed NFTs using Bubblegum v1 (legacy)\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Archive className=\"h-5 w-5\" />\r\n              Create Legacy Compressed NFT\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Create compressed NFTs using Bubblegum v1 (legacy)\r\n            </CardDescription>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            {connected && publicKey && (\r\n              <Badge variant=\"outline\">\r\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n              </Badge>\r\n            )}\r\n            <Badge variant=\"outline\">{network}</Badge>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { BubblegumLegacyForm };",
      "type": "registry:component",
      "target": "components/ui/murphy/bubblegum-legacy-form.tsx"
    }
  ]
}