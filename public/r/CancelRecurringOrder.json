{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CancelRecurringOrder",
  "type": "registry:block",
  "author": "Murphy",
  "description": "Murphy component to cancel Jupiter Recurring DCA Orders on Solana mainnet",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "sonner"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Jupiter-Recurring/CancelRecurringOrder.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useWallet } from \"@solana/wallet-adapter-react\"\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Loader2, Info, ExternalLink } from \"lucide-react\"\nimport { toast } from \"sonner\"\nimport { cn } from \"@/lib/utils\"\n\nexport type RecurringType = \"time\" | \"price\"\n\ninterface CancelOrderResponse {\n  requestId: string\n  transaction: string\n}\n\ninterface CancelOrderError {\n  code: number\n  error: string\n  status: string\n}\n\nexport function CancelRecurringOrder({ className }: { className?: string }) {\n  const { publicKey, connected, signTransaction } = useWallet()\n  const [orderId, setOrderId] = useState(\"\")\n  const [recurringType, setRecurringType] = useState<RecurringType>(\"time\")\n  const [loading, setLoading] = useState(false)\n  const [result, setResult] = useState<{\n    success: boolean\n    message: string\n    requestId?: string\n    transaction?: string\n  } | null>(null)\n\n  const handleCancelOrder = async () => {\n    if (!connected || !publicKey || !signTransaction) {\n      toast.error(\"Please connect your wallet first\")\n      return\n    }\n\n    if (!orderId.trim()) {\n      toast.error(\"Please enter an order ID\")\n      return\n    }\n\n    setLoading(true)\n    setResult(null)\n\n    try {\n      // Step 1: Get cancel transaction from Jupiter API\n      const cancelResponse = await fetch(\"https://lite-api.jup.ag/recurring/v1/cancelOrder\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          order: orderId.trim(),\n          user: publicKey.toString(),\n          recurringType: recurringType,\n        }),\n      })\n\n      const cancelData: CancelOrderResponse | CancelOrderError = await cancelResponse.json()\n\n      if (!cancelResponse.ok) {\n        const errorData = cancelData as CancelOrderError\n        throw new Error(errorData.error || `HTTP ${cancelResponse.status}: ${errorData.status}`)\n      }\n\n      const successData = cancelData as CancelOrderResponse\n\n      // Step 2: Execute the transaction\n      const executeResponse = await fetch(\"https://lite-api.jup.ag/recurring/v1/execute\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          requestId: successData.requestId,\n          transaction: successData.transaction,\n        }),\n      })\n\n      const executeData = await executeResponse.json()\n\n      // Nếu API trả về transaction cần ký (giả sử có field 'needsSignature' và 'transaction')\n      if (executeData.needsSignature && executeData.transaction) {\n        try {\n          const txBuffer = Buffer.from(executeData.transaction, \"base64\")\n          // @ts-ignore\n          const { Transaction } = await import(\"@solana/web3.js\")\n          const tx = Transaction.from(txBuffer)\n          const signed = await signTransaction(tx)\n\n          // Gửi giao dịch đã ký lên mạng\n          const sendResp = await fetch(\"https://lite-api.jup.ag/recurring/v1/execute\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              requestId: successData.requestId,\n              transaction: Buffer.from(signed.serialize()).toString(\"base64\"),\n            }),\n          })\n\n          const sendData = await sendResp.json()\n          if (!sendResp.ok) throw new Error(sendData.error || \"Failed to send signed transaction\")\n\n          setResult({\n            success: true,\n            message: \"Order cancelled and signed successfully!\",\n            requestId: successData.requestId,\n            transaction: sendData.txid || sendData.transaction || executeData.transaction,\n          })\n          toast.success(\"Order cancelled and signed successfully!\")\n          setOrderId(\"\")\n          return\n        } catch (e: any) {\n          setResult({ success: false, message: e.message || \"Failed to sign transaction\" })\n          toast.error(e.message || \"Failed to sign transaction\")\n          setLoading(false)\n          return\n        }\n      }\n\n      if (!executeResponse.ok) {\n        throw new Error(executeData.error || `Failed to execute transaction: ${executeResponse.status}`)\n      }\n\n      setResult({\n        success: true,\n        message: \"Order cancelled successfully!\",\n        requestId: successData.requestId,\n        transaction: executeData.txid || executeData.transaction || successData.transaction,\n      })\n      toast.success(\"Order cancelled successfully!\")\n\n      // Clear form\n      setOrderId(\"\")\n    } catch (error: any) {\n      console.error(\"Cancel order error:\", error)\n      setResult({\n        success: false,\n        message: error.message || \"Failed to cancel order\",\n      })\n      toast.error(error.message || \"Failed to cancel order\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (!connected || !publicKey) {\n    return (\n      <Card className={cn(\"max-w-2xl mx-auto\", className)}>\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Cancel Recurring Order</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertDescription>Please connect your wallet to cancel recurring orders.</AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn(\"max-w-2xl mx-auto\", className)}>\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl\">Cancel Recurring Order</CardTitle>\n        <p className=\"text-muted-foreground mt-1\">Permanently cancel your active recurring DCA orders</p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Order Details */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" />\n            Order Details\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"orderId\" className=\"text-base\">\n                Order ID\n              </Label>\n              <Input\n                id=\"orderId\"\n                placeholder=\"Enter order ID to cancel...\"\n                value={orderId}\n                onChange={(e) => setOrderId(e.target.value)}\n                disabled={loading}\n                className=\"h-12 text-lg font-mono\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"recurringType\" className=\"text-base\">\n                Recurring Type\n              </Label>\n              <Select\n                value={recurringType}\n                onValueChange={(value: RecurringType) => setRecurringType(value)}\n                disabled={loading}\n              >\n                <SelectTrigger className=\"h-12\">\n                  <SelectValue placeholder=\"Select recurring type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"time\">Time-based</SelectItem>\n                  <SelectItem value=\"price\">Price-based</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Warning */}\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            <div className=\"space-y-1\">\n              <p className=\"font-medium\">Warning: This action cannot be undone</p>\n              <p className=\"text-sm\">\n                Cancelling this recurring order will permanently stop all future executions. Make sure you have the\n                correct Order ID before proceeding.\n              </p>\n            </div>\n          </AlertDescription>\n        </Alert>\n\n        {/* Action Button */}\n        <Button\n          onClick={handleCancelOrder}\n          disabled={loading || !orderId.trim()}\n          className=\"w-full h-12 text-lg\"\n          variant=\"destructive\"\n        >\n          {loading ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Cancelling Order...\n            </>\n          ) : (\n            \"Cancel Order\"\n          )}\n        </Button>\n\n        {/* Result Display */}\n        {result && (\n          <div className=\"space-y-4\">\n            {result.success ? (\n              <Alert>\n                <AlertDescription>\n                  <div className=\"space-y-2\">\n                    <p className=\"font-medium\">{result.message}</p>\n\n                    {result.requestId && (\n                      <div className=\"space-y-1\">\n                        <span className=\"text-sm font-medium\">Request ID:</span>\n                        <code className=\"block text-xs font-mono bg-muted p-2 rounded break-all\">\n                          {result.requestId}\n                        </code>\n                      </div>\n                    )}\n\n                    {result.transaction && (\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Transaction:</span>\n                          <Button variant=\"ghost\" size=\"sm\" asChild>\n                            <a\n                              href={`https://explorer.solana.com/tx/${result.transaction}?cluster=mainnet-beta`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"flex items-center gap-1\"\n                            >\n                              View on Explorer <ExternalLink className=\"h-3 w-3\" />\n                            </a>\n                          </Button>\n                        </div>\n                        <code className=\"block text-xs font-mono bg-muted p-2 rounded break-all\">\n                          {result.transaction}\n                        </code>\n                      </div>\n                    )}\n                  </div>\n                </AlertDescription>\n              </Alert>\n            ) : (\n              <Alert variant=\"destructive\">\n                <AlertDescription>\n                  <div className=\"space-y-2\">\n                    <p className=\"font-semibold text-base\">Cancellation Failed</p>\n                    <div className=\"bg-muted p-3 rounded-md\">\n                      <p className=\"text-sm font-mono break-all\">{result.message}</p>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Please check your Order ID and try again. If the problem persists, contact support.\n                    </p>\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"p-4 bg-muted rounded-lg space-y-3\">\n          <h4 className=\"font-semibold text-sm\">How to Cancel Orders:</h4>\n          <ol className=\"list-decimal list-inside space-y-1 text-sm text-muted-foreground\">\n            <li>Enter the Order ID from your recurring order</li>\n            <li>Select the correct recurring type (time-based or price-based)</li>\n            <li>Review the warning and click \"Cancel Order\"</li>\n            <li>Sign the transaction when prompted by your wallet</li>\n            <li>Wait for confirmation on the Solana network</li>\n          </ol>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            <strong>Tip:</strong> You can find your Order ID in your order history or transaction records.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default CancelRecurringOrder\n",
      "type": "registry:component",
      "target": "components/ui/murphy/Jupiter-Recurring/CancelRecurringOrder.tsx"
    }
  ]
}