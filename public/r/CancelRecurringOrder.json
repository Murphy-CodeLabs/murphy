{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CancelRecurringOrder",
  "type": "registry:block",
  "author": "Murphy",
  "description": "Murphy component to cancel Jupiter Recurring DCA Orders on Solana mainnet",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "sonner"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Jupiter-Recurring/CancelRecurringOrder.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { useWallet } from \"@solana/wallet-adapter-react\"\r\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\r\nimport { Loader2, Info, ExternalLink } from \"lucide-react\"\r\nimport { toast } from \"sonner\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport type RecurringType = \"time\" | \"price\"\r\n\r\ninterface CancelOrderResponse {\r\n  requestId: string\r\n  transaction: string\r\n}\r\n\r\ninterface CancelOrderError {\r\n  code: number\r\n  error: string\r\n  status: string\r\n}\r\n\r\nexport function CancelRecurringOrder({ className }: { className?: string }) {\r\n  const { publicKey, connected, signTransaction } = useWallet()\r\n  const [orderId, setOrderId] = useState(\"\")\r\n  const [recurringType, setRecurringType] = useState<RecurringType>(\"time\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [result, setResult] = useState<{\r\n    success: boolean\r\n    message: string\r\n    requestId?: string\r\n    transaction?: string\r\n  } | null>(null)\r\n\r\n  const handleCancelOrder = async () => {\r\n    if (!connected || !publicKey || !signTransaction) {\r\n      toast.error(\"Please connect your wallet first\")\r\n      return\r\n    }\r\n\r\n    if (!orderId.trim()) {\r\n      toast.error(\"Please enter an order ID\")\r\n      return\r\n    }\r\n\r\n    setLoading(true)\r\n    setResult(null)\r\n\r\n    try {\r\n      // Step 1: Get cancel transaction from Jupiter API\r\n      const cancelResponse = await fetch(\"https://lite-api.jup.ag/recurring/v1/cancelOrder\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          order: orderId.trim(),\r\n          user: publicKey.toString(),\r\n          recurringType: recurringType,\r\n        }),\r\n      })\r\n\r\n      const cancelData: CancelOrderResponse | CancelOrderError = await cancelResponse.json()\r\n\r\n      if (!cancelResponse.ok) {\r\n        const errorData = cancelData as CancelOrderError\r\n        throw new Error(errorData.error || `HTTP ${cancelResponse.status}: ${errorData.status}`)\r\n      }\r\n\r\n      const successData = cancelData as CancelOrderResponse\r\n\r\n      // Step 2: Execute the transaction\r\n      const executeResponse = await fetch(\"https://lite-api.jup.ag/recurring/v1/execute\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          requestId: successData.requestId,\r\n          transaction: successData.transaction,\r\n        }),\r\n      })\r\n\r\n      const executeData = await executeResponse.json()\r\n\r\n      // Nếu API trả về transaction cần ký (giả sử có field 'needsSignature' và 'transaction')\r\n      if (executeData.needsSignature && executeData.transaction) {\r\n        try {\r\n          const txBuffer = Buffer.from(executeData.transaction, \"base64\")\r\n          // @ts-ignore\r\n          const { Transaction } = await import(\"@solana/web3.js\")\r\n          const tx = Transaction.from(txBuffer)\r\n          const signed = await signTransaction(tx)\r\n\r\n          // Gửi giao dịch đã ký lên mạng\r\n          const sendResp = await fetch(\"https://lite-api.jup.ag/recurring/v1/execute\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              requestId: successData.requestId,\r\n              transaction: Buffer.from(signed.serialize()).toString(\"base64\"),\r\n            }),\r\n          })\r\n\r\n          const sendData = await sendResp.json()\r\n          if (!sendResp.ok) throw new Error(sendData.error || \"Failed to send signed transaction\")\r\n\r\n          setResult({\r\n            success: true,\r\n            message: \"Order cancelled and signed successfully!\",\r\n            requestId: successData.requestId,\r\n            transaction: sendData.txid || sendData.transaction || executeData.transaction,\r\n          })\r\n          toast.success(\"Order cancelled and signed successfully!\")\r\n          setOrderId(\"\")\r\n          return\r\n        } catch (e: any) {\r\n          setResult({ success: false, message: e.message || \"Failed to sign transaction\" })\r\n          toast.error(e.message || \"Failed to sign transaction\")\r\n          setLoading(false)\r\n          return\r\n        }\r\n      }\r\n\r\n      if (!executeResponse.ok) {\r\n        throw new Error(executeData.error || `Failed to execute transaction: ${executeResponse.status}`)\r\n      }\r\n\r\n      setResult({\r\n        success: true,\r\n        message: \"Order cancelled successfully!\",\r\n        requestId: successData.requestId,\r\n        transaction: executeData.txid || executeData.transaction || successData.transaction,\r\n      })\r\n      toast.success(\"Order cancelled successfully!\")\r\n\r\n      // Clear form\r\n      setOrderId(\"\")\r\n    } catch (error: any) {\r\n      console.error(\"Cancel order error:\", error)\r\n      setResult({\r\n        success: false,\r\n        message: error.message || \"Failed to cancel order\",\r\n      })\r\n      toast.error(error.message || \"Failed to cancel order\")\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  if (!connected || !publicKey) {\r\n    return (\r\n      <Card className={cn(\"max-w-2xl mx-auto\", className)}>\r\n        <CardHeader className=\"text-center\">\r\n          <CardTitle className=\"text-2xl\">Cancel Recurring Order</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert>\r\n            <AlertDescription>Please connect your wallet to cancel recurring orders.</AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card className={cn(\"max-w-2xl mx-auto\", className)}>\r\n      <CardHeader className=\"text-center\">\r\n        <CardTitle className=\"text-2xl\">Cancel Recurring Order</CardTitle>\r\n        <p className=\"text-muted-foreground mt-1\">Permanently cancel your active recurring DCA orders</p>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Order Details */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n            <Info className=\"h-5 w-5\" />\r\n            Order Details\r\n          </h3>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"orderId\" className=\"text-base\">\r\n                Order ID\r\n              </Label>\r\n              <Input\r\n                id=\"orderId\"\r\n                placeholder=\"Enter order ID to cancel...\"\r\n                value={orderId}\r\n                onChange={(e) => setOrderId(e.target.value)}\r\n                disabled={loading}\r\n                className=\"h-12 text-lg font-mono\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"recurringType\" className=\"text-base\">\r\n                Recurring Type\r\n              </Label>\r\n              <Select\r\n                value={recurringType}\r\n                onValueChange={(value: RecurringType) => setRecurringType(value)}\r\n                disabled={loading}\r\n              >\r\n                <SelectTrigger className=\"h-12\">\r\n                  <SelectValue placeholder=\"Select recurring type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"time\">Time-based</SelectItem>\r\n                  <SelectItem value=\"price\">Price-based</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Warning */}\r\n        <Alert variant=\"destructive\">\r\n          <AlertDescription>\r\n            <div className=\"space-y-1\">\r\n              <p className=\"font-medium\">Warning: This action cannot be undone</p>\r\n              <p className=\"text-sm\">\r\n                Cancelling this recurring order will permanently stop all future executions. Make sure you have the\r\n                correct Order ID before proceeding.\r\n              </p>\r\n            </div>\r\n          </AlertDescription>\r\n        </Alert>\r\n\r\n        {/* Action Button */}\r\n        <Button\r\n          onClick={handleCancelOrder}\r\n          disabled={loading || !orderId.trim()}\r\n          className=\"w-full h-12 text-lg\"\r\n          variant=\"destructive\"\r\n        >\r\n          {loading ? (\r\n            <>\r\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n              Cancelling Order...\r\n            </>\r\n          ) : (\r\n            \"Cancel Order\"\r\n          )}\r\n        </Button>\r\n\r\n        {/* Result Display */}\r\n        {result && (\r\n          <div className=\"space-y-4\">\r\n            {result.success ? (\r\n              <Alert>\r\n                <AlertDescription>\r\n                  <div className=\"space-y-2\">\r\n                    <p className=\"font-medium\">{result.message}</p>\r\n\r\n                    {result.requestId && (\r\n                      <div className=\"space-y-1\">\r\n                        <span className=\"text-sm font-medium\">Request ID:</span>\r\n                        <code className=\"block text-xs font-mono bg-muted p-2 rounded break-all\">\r\n                          {result.requestId}\r\n                        </code>\r\n                      </div>\r\n                    )}\r\n\r\n                    {result.transaction && (\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <span className=\"text-sm font-medium\">Transaction:</span>\r\n                          <Button variant=\"ghost\" size=\"sm\" asChild>\r\n                            <a\r\n                              href={`https://explorer.solana.com/tx/${result.transaction}?cluster=mainnet-beta`}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                              className=\"flex items-center gap-1\"\r\n                            >\r\n                              View on Explorer <ExternalLink className=\"h-3 w-3\" />\r\n                            </a>\r\n                          </Button>\r\n                        </div>\r\n                        <code className=\"block text-xs font-mono bg-muted p-2 rounded break-all\">\r\n                          {result.transaction}\r\n                        </code>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </AlertDescription>\r\n              </Alert>\r\n            ) : (\r\n              <Alert variant=\"destructive\">\r\n                <AlertDescription>\r\n                  <div className=\"space-y-2\">\r\n                    <p className=\"font-semibold text-base\">Cancellation Failed</p>\r\n                    <div className=\"bg-muted p-3 rounded-md\">\r\n                      <p className=\"text-sm font-mono break-all\">{result.message}</p>\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      Please check your Order ID and try again. If the problem persists, contact support.\r\n                    </p>\r\n                  </div>\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Instructions */}\r\n        <div className=\"p-4 bg-muted rounded-lg space-y-3\">\r\n          <h4 className=\"font-semibold text-sm\">How to Cancel Orders:</h4>\r\n          <ol className=\"list-decimal list-inside space-y-1 text-sm text-muted-foreground\">\r\n            <li>Enter the Order ID from your recurring order</li>\r\n            <li>Select the correct recurring type (time-based or price-based)</li>\r\n            <li>Review the warning and click \"Cancel Order\"</li>\r\n            <li>Sign the transaction when prompted by your wallet</li>\r\n            <li>Wait for confirmation on the Solana network</li>\r\n          </ol>\r\n          <p className=\"text-xs text-muted-foreground mt-2\">\r\n            <strong>Tip:</strong> You can find your Order ID in your order history or transaction records.\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CancelRecurringOrder\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/Jupiter-Recurring/CancelRecurringOrder.tsx"
    }
  ]
}