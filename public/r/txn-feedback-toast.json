{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-feedback-toast",
  "type": "registry:block",
  "title": "Toast component to display transaction status (loading, success, error).",
  "dependencies": [
    "sonner"
  ],
  "registryDependencies": [
    "toast"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Txn-Feedback/txn-feedback-toast.tsx",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { CheckCircle, XCircle, Loader2, AlertCircle } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport type { TxnFeedbackProps } from \"@/types/transaction\"\r\n\r\nexport function TxnFeedbackToast({ status, onRetry, onClose }: TxnFeedbackProps) {\r\n  const [isVisible, setIsVisible] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (status.status !== \"idle\") {\r\n      setIsVisible(true)\r\n    }\r\n  }, [status.status])\r\n\r\n  useEffect(() => {\r\n    if (status.status === \"success\") {\r\n      const timer = setTimeout(() => {\r\n        setIsVisible(false)\r\n        onClose?.()\r\n      }, 5000)\r\n      return () => clearTimeout(timer)\r\n    }\r\n  }, [status.status, onClose])\r\n\r\n  if (!isVisible || status.status === \"idle\") return null\r\n\r\n  const getIcon = () => {\r\n    switch (status.status) {\r\n      case \"success\":\r\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />\r\n      case \"error\":\r\n        return <XCircle className=\"w-5 h-5 text-red-500\" />\r\n      case \"preparing\":\r\n      case \"signing\":\r\n      case \"sending\":\r\n      case \"confirming\":\r\n        return <Loader2 className=\"w-5 h-5 text-blue-500 animate-spin\" />\r\n      default:\r\n        return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\r\n    }\r\n  }\r\n\r\n  const getMessage = () => {\r\n    switch (status.status) {\r\n      case \"preparing\":\r\n        return \"Preparing transaction...\"\r\n      case \"signing\":\r\n        return \"Please sign the transaction\"\r\n      case \"sending\":\r\n        return \"Sending transaction...\"\r\n      case \"confirming\":\r\n        return \"Confirming transaction...\"\r\n      case \"success\":\r\n        return \"Transaction successful!\"\r\n      case \"error\":\r\n        return status.error || \"Transaction failed\"\r\n      default:\r\n        return \"Processing...\"\r\n    }\r\n  }\r\n\r\n  const getBgColor = () => {\r\n    switch (status.status) {\r\n      case \"success\":\r\n        return \"bg-green-50 border-green-200\"\r\n      case \"error\":\r\n        return \"bg-red-50 border-red-200\"\r\n      default:\r\n        return \"bg-blue-50 border-blue-200\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"fixed top-4 right-4 z-50 max-w-sm w-full\",\r\n        \"transform transition-all duration-300 ease-in-out\",\r\n        isVisible ? \"translate-x-0 opacity-100\" : \"translate-x-full opacity-0\",\r\n      )}\r\n    >\r\n      <div className={cn(\"rounded-lg border p-4 shadow-lg\", getBgColor())}>\r\n        <div className=\"flex items-start space-x-3\">\r\n          {getIcon()}\r\n          <div className=\"flex-1 min-w-0\">\r\n            <p className=\"text-sm font-medium text-gray-900\">{getMessage()}</p>\r\n            {status.signature && (\r\n              <p className=\"text-xs text-gray-500 mt-1 truncate\">\r\n                Signature: {status.signature.slice(0, 8)}...{status.signature.slice(-8)}\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"flex space-x-2\">\r\n            {status.status === \"error\" && onRetry && (\r\n              <Button size=\"sm\" variant=\"outline\" onClick={onRetry} className=\"text-xs bg-transparent\">\r\n                Retry\r\n              </Button>\r\n            )}\r\n            <Button\r\n              size=\"sm\"\r\n              variant=\"ghost\"\r\n              onClick={() => {\r\n                setIsVisible(false)\r\n                onClose?.()\r\n              }}\r\n              className=\"text-xs\"\r\n            >\r\n              Ã—\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "components/ui/murphy/Txn-Feedback/txn-feedback-toast.tsx"
    }
  ]
}