{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "price-change",
  "type": "registry:block",
  "title": "The PriceChange component displays the change of a price over time.",
  "files": [
    {
      "path": "components/ui/murphy/price-change.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\n\nimport { cn, formatUsd } from \"@/lib/utils\";\n\ntype PriceChangeProps = {\n  data: {\n    timestamp: number;\n    price: number;\n  }[];\n  type?: \"%\" | \"$\";\n};\n\nconst PriceChange = ({ data, type = \"%\" }: PriceChangeProps) => {\n  const [selectedType, setSelectedType] = React.useState(type);\n  const startPrice = data[0]?.price || 0;\n  const endPrice = data[data.length - 1]?.price || 0;\n  const priceDifference = endPrice - startPrice;\n  const percentageChange = (priceDifference / startPrice) * 100;\n  const isPositive = priceDifference > 0;\n\n  if (!data[0]?.price) return null;\n\n  return (\n    <div\n      className={cn(\n        \"cursor-pointer text-xs\",\n        isPositive ? \"text-[#75ba80]\" : \"text-[#e07d6f]\",\n      )}\n      onClick={() => setSelectedType(selectedType === \"%\" ? \"$\" : \"%\")}\n    >\n      {isPositive && \"+\"}\n      {selectedType === \"%\"\n        ? `${percentageChange.toFixed(2)}%`\n        : `${formatUsd(priceDifference)}`}\n    </div>\n  );\n};\n\nexport { PriceChange };",
      "type": "registry:file",
      "target": "components/ui/murphy/price-change.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport millify from \"millify\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\n};\n\nexport const formatUsd = (num: number): string => {\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\n};\n\nexport const formatNumber = (\n  num: number,\n  options: Intl.NumberFormatOptions = {},\n): string => {\n  if (num === null || num === undefined) return \"0\";\n\n  const absNum = Math.abs(num);\n  let decimals = 2;\n\n  if (absNum < 1) {\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\n  }\n\n  return new Intl.NumberFormat(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(num);\n};\n\nexport const formatNumberShort = (num: number): string => {\n  if (num < 1000) return formatNumber(num);\n  return millify(num, {\n    precision: 2,\n  });\n};\n\nexport const formatNumberGrouped = (\n  value: number,\n  expThreshold: number = 0.0001,\n  expPrecision: number = 1,\n) => {\n  if (value === 0) return \"0\";\n\n  if (Math.abs(value) < expThreshold) {\n    return value.toExponential(expPrecision);\n  }\n\n  if (Number.isInteger(value)) {\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\n  }\n\n  const valueParts = value.toString().split(\".\");\n  const decimalPart = valueParts[1] ?? \"\";\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\n\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: true,\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\n  }).format(value);\n};\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch (error) {\n        return false;\n\n  }\n};\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    }
  ]
}