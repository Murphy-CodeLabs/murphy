{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "price-change",
  "type": "registry:block",
  "title": "The PriceChange component displays the change of a price over time.",
  "files": [
    {
      "path": "components/ui/murphy/price-change.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { cn, formatUsd } from \"@/lib/utils\";\r\n\r\ntype PriceChangeProps = {\r\n  data: {\r\n    timestamp: number;\r\n    price: number;\r\n  }[];\r\n  type?: \"%\" | \"$\";\r\n};\r\n\r\nconst PriceChange = ({ data, type = \"%\" }: PriceChangeProps) => {\r\n  const [selectedType, setSelectedType] = React.useState(type);\r\n  const startPrice = data[0]?.price || 0;\r\n  const endPrice = data[data.length - 1]?.price || 0;\r\n  const priceDifference = endPrice - startPrice;\r\n  const percentageChange = (priceDifference / startPrice) * 100;\r\n  const isPositive = priceDifference > 0;\r\n\r\n  if (!data[0]?.price) return null;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"cursor-pointer text-xs\",\r\n        isPositive ? \"text-[#75ba80]\" : \"text-[#e07d6f]\",\r\n      )}\r\n      onClick={() => setSelectedType(selectedType === \"%\" ? \"$\" : \"%\")}\r\n    >\r\n      {isPositive && \"+\"}\r\n      {selectedType === \"%\"\r\n        ? `${percentageChange.toFixed(2)}%`\r\n        : `${formatUsd(priceDifference)}`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { PriceChange };",
      "type": "registry:file",
      "target": "components/ui/murphy/price-change.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    }
  ]
}