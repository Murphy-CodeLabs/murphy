{
    "name": "candy-machine-form",
    "description": "A Metaplex Core Candy Machine creation component with shadcn UI styling, supporting next-generation NFTs.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-core",
        "@metaplex-foundation/mpl-core-candy-machine",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "switch",
        "label",
        "badge",
        "alert",
        "dialog"
    ],
    "files": [
        {
            "name": "candy-machine-form.tsx",
            "content": "'use client';\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Settings, Plus, X } from \"lucide-react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\n// Metaplex Core Candy Machine imports\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplCore } from '@metaplex-foundation/mpl-core';\nimport { mplCandyMachine, create, addConfigLines } from '@metaplex-foundation/mpl-core-candy-machine';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  sol,\n  dateTime,\n  some,\n} from '@metaplex-foundation/umi';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\ninterface CandyMachineResult {\n  candyMachine: string;\n  signature: string;\n  collection?: string;\n}\n\ninterface ConfigLine {\n  name: string;\n  uri: string;\n}\n\ntype CandyMachineFormValues = {\n  // Basic Settings\n  itemsAvailable: number;\n  price: number;\n  symbol: string;\n\n  // Collection (optional)\n  collection?: string;\n\n  // Sale Settings\n  goLiveDate?: string;\n  endDate?: string;\n\n  // Config Lines\n  configLines: ConfigLine[];\n\n  // Guards (simplified)\n  enableBotTax: boolean;\n  enableSolPayment: boolean;\n  enableStartDate: boolean;\n  enableEndDate: boolean;\n};\n\n// Custom form resolver\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  if (!data.itemsAvailable || data.itemsAvailable <= 0) {\n    errors.itemsAvailable = { type: \"required\", message: \"Items available must be greater than 0\" };\n  }\n\n  if (data.price === undefined || data.price < 0) {\n    errors.price = { type: \"required\", message: \"Price must be 0 or greater\" };\n  }\n\n  if (!data.symbol || data.symbol.length > 10) {\n    errors.symbol = { type: \"required\", message: \"Symbol is required and must be 10 characters or less\" };\n  }\n\n  if (data.collection) {\n    try { new PublicKey(data.collection); } catch (e) {\n      errors.collection = { type: \"pattern\", message: \"Invalid collection address format\" };\n    }\n  }\n\n  if (!data.configLines || data.configLines.length === 0) {\n    errors.configLines = { type: \"required\", message: \"At least one config line is required\" };\n  } else {\n    data.configLines.forEach((line: ConfigLine, index: number) => {\n      if (!line.name) errors[`configLines.${index}.name`] = { type: \"required\", message: \"Name is required\" };\n      if (!line.uri) errors[`configLines.${index}.uri`] = { type: \"required\", message: \"URI is required\" };\n    });\n  }\n\n  return { values: Object.keys(errors).length === 0 ? data : {}, errors };\n};\n\nexport interface CandyMachineFormProps {\n  collection?: string;\n  onCandyMachineCreated?: (candyMachine: string, signature: string) => void;\n  className?: string;\n}\n\nexport default function CandyMachineForm({\n  collection: propCollection,\n  onCandyMachineCreated,\n  className\n}: CandyMachineFormProps) {\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<CandyMachineResult | null>(null);\n\n  const form = useForm<CandyMachineFormValues>({\n    defaultValues: {\n      itemsAvailable: 100,\n      price: 0.1,\n      symbol: \"CNDY\",\n      collection: propCollection || \"\",\n      configLines: [{ name: \"NFT #1\", uri: \"https://example.com/metadata/1.json\" }],\n      enableBotTax: false,\n      enableSolPayment: true,\n      enableStartDate: false,\n      enableEndDate: false,\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  useEffect(() => { setMounted(true); }, []);\n  useEffect(() => { if (endpoint) setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet'); }, [endpoint]);\n\n  const onSubmit = async (values: CandyMachineFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    setCurrentStage(\"confirming\");\n    setError(null);\n    const toastId = \"candy-machine-create\";\n    toast.loading(\"Creating Candy Machine...\", { id: toastId });\n\n    try {\n      const umi = createUmi(endpoint).use(walletAdapterIdentity(wallet.adapter)).use(mplCore()).use(mplCandyMachine());\n      const candyMachine = generateSigner(umi);\n\n      const guards: any = {};\n      if (values.enableSolPayment) guards.solPayment = some({ lamports: sol(values.price), destination: umi.identity.publicKey });\n      if (values.enableBotTax) guards.botTax = some({ lamports: sol(0.01), lastInstruction: true });\n      if (values.enableStartDate && values.goLiveDate) guards.startDate = some({ date: dateTime(new Date(values.goLiveDate).toISOString()) });\n      if (values.enableEndDate && values.endDate) guards.endDate = some({ date: dateTime(new Date(values.endDate).toISOString()) });\n\n      const createIx = create(umi, {\n        candyMachine,\n        collection: values.collection ? umiPublicKey(values.collection) : undefined,\n        collectionUpdateAuthority: umi.identity,\n        itemsAvailable: values.itemsAvailable,\n        sellerFeeBasisPoints: 500, // 5%\n        configLineSettings: some({\n          prefixName: values.symbol + \" #\",\n          nameLength: 32,\n          prefixUri: \"\",\n          uriLength: 200,\n          isSequential: false,\n        }),\n        guards,\n      });\n\n      const createResult = await createIx.sendAndConfirm(umi);\n      const createSignature = Buffer.from(createResult.signature).toString('base64');\n\n      if (values.configLines.length > 0) {\n        const addConfigLinesIx = addConfigLines(umi, {\n          candyMachine: candyMachine.publicKey,\n          index: 0,\n          configLines: values.configLines.map(line => ({ name: line.name, uri: line.uri })),\n        });\n        await addConfigLinesIx.sendAndConfirm(umi);\n      }\n\n      const candyMachineAddress = candyMachine.publicKey.toString();\n      setResult({ candyMachine: candyMachineAddress, signature: createSignature, collection: values.collection });\n      if (onCandyMachineCreated) onCandyMachineCreated(candyMachineAddress, createSignature);\n      setCurrentStage(\"success\");\n      toast.success(\"Candy Machine created successfully!\", { id: toastId, description: `Candy Machine: ${candyMachineAddress.slice(0, 8)}...${candyMachineAddress.slice(-8)}` });\n\n    } catch (err: any) {\n      console.error(\"Error creating candy machine:\", err);\n      setCurrentStage(\"error\");\n      const errorMessage = err.message || \"An unknown error occurred\";\n      setError(errorMessage);\n      toast.error(\"Cannot create Candy Machine\", { id: toastId, description: errorMessage });\n      if (errorMessage.includes(\"rejected\") || errorMessage.includes(\"canceled\")) {\n        toast.error(\"Transaction rejected\", { id: toastId, description: \"You have rejected the transaction\" });\n      } else if (errorMessage.includes(\"failed to fetch\") || errorMessage.includes(\"timeout\")) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const addConfigLine = () => form.setValue(\"configLines\", [...form.getValues(\"configLines\"), { name: `NFT #${form.getValues(\"configLines\").length + 1}`, uri: \"\" }]);\n  const removeConfigLine = (index: number) => {\n    if (form.getValues(\"configLines\").length > 1) {\n      form.setValue(\"configLines\", form.getValues(\"configLines\").filter((_, i) => i !== index));\n    }\n  };\n\n  const viewExplorer = (sig: string) => window.open(`https://explorer.solana.com/tx/${sig}?cluster=${network}`, \"_blank\");\n  const viewCandyMachine = (addr: string) => window.open(`https://explorer.solana.com/address/${addr}?cluster=${network}`, \"_blank\");\n  const resetForm = () => { form.reset(); setResult(null); setCurrentStage('input'); setError(null); };\n\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Settings */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Basic Settings</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField control={form.control} name=\"itemsAvailable\" render={({ field }) => (<FormItem><FormLabel>Items Available</FormLabel><FormControl><Input type=\"number\" placeholder=\"100\" {...field} onChange={e => field.onChange(parseInt(e.target.value) || 0)} /></FormControl><FormMessage /></FormItem>)} />\n            <FormField control={form.control} name=\"price\" render={({ field }) => (<FormItem><FormLabel>Price (SOL)</FormLabel><FormControl><Input type=\"number\" step=\"0.001\" placeholder=\"0.1\" {...field} onChange={e => field.onChange(parseFloat(e.target.value) || 0)} /></FormControl><FormMessage /></FormItem>)} />\n          </div>\n          <FormField control={form.control} name=\"symbol\" render={({ field }) => (<FormItem><FormLabel>Symbol</FormLabel><FormControl><Input placeholder=\"CNDY\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n          <FormField control={form.control} name=\"collection\" render={({ field }) => (<FormItem><FormLabel>Collection (Optional)</FormLabel><FormControl><Input placeholder=\"Collection mint address\" {...field} /></FormControl><FormMessage /></FormItem>)} />\n        </div>\n\n        {/* Guards */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Guards</h3>\n          <div className=\"space-y-3 border p-4 rounded-md\">\n            <FormField control={form.control} name=\"enableSolPayment\" render={({ field }) => (<FormItem className=\"flex items-center space-x-2\"><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl><Label>Enable SOL Payment</Label></FormItem>)} />\n            <FormField control={form.control} name=\"enableBotTax\" render={({ field }) => (<FormItem className=\"flex items-center space-x-2\"><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl><Label>Enable Bot Tax</Label></FormItem>)} />\n            <FormField control={form.control} name=\"enableStartDate\" render={({ field }) => (<FormItem className=\"flex items-center space-x-2\"><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl><Label>Enable Start Date</Label></FormItem>)} />\n            {form.watch(\"enableStartDate\") && <FormField control={form.control} name=\"goLiveDate\" render={({ field }) => (<FormItem><FormLabel>Start Date</FormLabel><FormControl><Input type=\"datetime-local\" {...field} /></FormControl><FormMessage /></FormItem>)} />}\n            <FormField control={form.control} name=\"enableEndDate\" render={({ field }) => (<FormItem className=\"flex items-center space-x-2\"><FormControl><Switch checked={field.value} onCheckedChange={field.onChange} /></FormControl><Label>Enable End Date</Label></FormItem>)} />\n            {form.watch(\"enableEndDate\") && <FormField control={form.control} name=\"endDate\" render={({ field }) => (<FormItem><FormLabel>End Date</FormLabel><FormControl><Input type=\"datetime-local\" {...field} /></FormControl><FormMessage /></FormItem>)} />}\n          </div>\n        </div>\n\n        {/* Config Lines */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Config Lines</h3>\n            <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addConfigLine}><Plus className=\"h-4 w-4 mr-2\" />Add Line</Button>\n          </div>\n          {form.watch(\"configLines\").map((_, index) => (\n            <div key={index} className=\"grid grid-cols-12 gap-2 items-end border p-2 rounded-md\">\n              <div className=\"col-span-5\"><FormField control={form.control} name={`configLines.${index}.name`} render={({ field }) => (<FormItem><FormLabel>Name</FormLabel><FormControl><Input placeholder=\"NFT Name\" {...field} /></FormControl><FormMessage /></FormItem>)} /></div>\n              <div className=\"col-span-6\"><FormField control={form.control} name={`configLines.${index}.uri`} render={({ field }) => (<FormItem><FormLabel>URI</FormLabel><FormControl><Input placeholder=\"https://...\" {...field} /></FormControl><FormMessage /></FormItem>)} /></div>\n              <div className=\"col-span-1\"><Button type=\"button\" variant=\"ghost\" size=\"icon\" onClick={() => removeConfigLine(index)} disabled={form.getValues(\"configLines\").length === 1}><X className=\"h-4 w-4\" /></Button></div>\n            </div>\n          ))}\n        </div>\n\n        {/* Submit */}\n        <div className=\"pt-4\">\n          {!connected ? <ConnectWalletButton className=\"w-full\" /> : <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\"><Settings className=\"mr-2 h-4 w-4\" />{isSubmitting ? 'Creating...' : 'Create Candy Machine'}</Button>}\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 text-center\">\n      <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto\" />\n      <h3 className=\"text-xl font-bold\">Success!</h3>\n      <p className=\"text-muted-foreground\">Your Candy Machine has been created.</p>\n      <div className=\"space-y-2 text-left bg-muted p-3 rounded-md font-mono text-sm\">\n        <div className=\"flex justify-between items-center\"><span>Candy Machine:</span><Button variant=\"ghost\" size=\"sm\" onClick={() => viewCandyMachine(result?.candyMachine || '')}>{result?.candyMachine.slice(0, 8)}...<ExternalLink className=\"ml-2 h-4 w-4\" /></Button></div>\n        <div className=\"flex justify-between items-center\"><span>Transaction:</span><Button variant=\"ghost\" size=\"sm\" onClick={() => viewExplorer(result?.signature || '')}>{result?.signature.slice(0, 8)}...<ExternalLink className=\"ml-2 h-4 w-4\" /></Button></div>\n      </div>\n      <Button onClick={resetForm} className=\"w-full\">Create Another</Button>\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 text-center\">\n      <X className=\"h-16 w-16 text-red-500 mx-auto\" />\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error}</p>\n      <Button onClick={() => setCurrentStage('input')} className=\"w-full\">Try Again</Button>\n    </div>\n  );\n\n  const renderConfirming = () => (\n    <div className=\"flex flex-col items-center justify-center space-y-4 p-8\">\n      <Loader2 className=\"h-16 w-16 animate-spin\" />\n      <h3 className=\"text-xl font-bold\">Creating Candy Machine</h3>\n      <p className=\"text-muted-foreground\">Please confirm the transaction in your wallet...</p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case \"success\": return renderSuccess();\n      case \"error\": return renderError();\n      case \"confirming\": return renderConfirming();\n      default: return renderForm();\n    }\n  };\n\n  if (!mounted) return <div className=\"flex justify-center items-center p-8\"><Loader2 className=\"h-8 w-8 animate-spin\" /></div>;\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Create Candy Machine</CardTitle>\n            <CardDescription>Set up your NFT collection launchpad</CardDescription>\n          </div>\n          <Badge variant=\"outline\">{network}</Badge>\n        </div>\n      </CardHeader>\n      <CardContent>{renderStageContent()}</CardContent>\n    </Card>\n  );\n}\n\nexport { CandyMachineForm };\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Candy-Machine",
    "tags": [
        "nft",
        "core",
        "candy-machine",
        "metaplex",
        "solana",
        "form",
        "mint"
    ]
}