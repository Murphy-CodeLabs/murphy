{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "candy-machine-form",
  "type": "registry:block",
  "title": "Candy Machine Form",
  "description": "Create and manage Metaplex Candy Machines.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-core",
    "@metaplex-foundation/mpl-core-candy-machine",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/candy-machine-form.tsx",
      "content": "'use client';\r\n\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Settings, Plus, X } from \"lucide-react\";\r\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\n\r\n// Metaplex Core Candy Machine imports\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport { mplCore } from '@metaplex-foundation/mpl-core';\r\nimport { mplCandyMachine } from '@metaplex-foundation/mpl-core-candy-machine';\r\nimport {\r\n  create,\r\n  addConfigLines,\r\n  mintV1,\r\n  fetchCandyMachine,\r\n  CandyMachine,\r\n} from '@metaplex-foundation/mpl-core-candy-machine';\r\nimport {\r\n  generateSigner,\r\n  publicKey as umiPublicKey,\r\n  sol,\r\n  dateTime,\r\n  some,\r\n  none,\r\n} from '@metaplex-foundation/umi';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\ninterface CandyMachineResult {\r\n  candyMachine: string;\r\n  signature: string;\r\n  collection?: string;\r\n}\r\n\r\ninterface ConfigLine {\r\n  name: string;\r\n  uri: string;\r\n}\r\n\r\ntype CandyMachineFormValues = {\r\n  // Basic Settings\r\n  itemsAvailable: number;\r\n  price: number;\r\n  symbol: string;\r\n  maxEditionSupply: number;\r\n  isMutable: boolean;\r\n\r\n  // Collection (optional)\r\n  collection?: string;\r\n\r\n  // Sale Settings\r\n  goLiveDate?: string;\r\n  endDate?: string;\r\n\r\n  // Config Lines\r\n  configLines: ConfigLine[];\r\n\r\n  // Guards (simplified)\r\n  enableBotTax: boolean;\r\n  enableSolPayment: boolean;\r\n  enableStartDate: boolean;\r\n  enableEndDate: boolean;\r\n};\r\n\r\n// Custom form resolver\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate itemsAvailable\r\n  if (!data.itemsAvailable || data.itemsAvailable <= 0) {\r\n    errors.itemsAvailable = {\r\n      type: \"required\",\r\n      message: \"Items available must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate price\r\n  if (data.price === undefined || data.price < 0) {\r\n    errors.price = {\r\n      type: \"required\",\r\n      message: \"Price must be 0 or greater\",\r\n    };\r\n  }\r\n\r\n  // Validate symbol\r\n  if (!data.symbol || data.symbol.length > 10) {\r\n    errors.symbol = {\r\n      type: \"required\",\r\n      message: \"Symbol is required and must be 10 characters or less\",\r\n    };\r\n  }\r\n\r\n  // Validate collection if provided\r\n  if (data.collection) {\r\n    try {\r\n      new PublicKey(data.collection);\r\n    } catch (e) {\r\n      errors.collection = {\r\n        type: \"pattern\",\r\n        message: \"Invalid collection address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate config lines\r\n  if (!data.configLines || data.configLines.length === 0) {\r\n    errors.configLines = {\r\n      type: \"required\",\r\n      message: \"At least one config line is required\",\r\n    };\r\n  } else {\r\n    data.configLines.forEach((line: ConfigLine, index: number) => {\r\n      if (!line.name) {\r\n        errors[`configLines.${index}.name`] = {\r\n          type: \"required\",\r\n          message: \"Name is required\",\r\n        };\r\n      }\r\n      if (!line.uri) {\r\n        errors[`configLines.${index}.uri`] = {\r\n          type: \"required\",\r\n          message: \"URI is required\",\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport interface CandyMachineFormProps {\r\n  collection?: string;\r\n  onCandyMachineCreated?: (candyMachine: string, signature: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport default function CandyMachineForm({\r\n  collection: propCollection,\r\n  onCandyMachineCreated,\r\n  className\r\n}: CandyMachineFormProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet } = useWallet();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState('input');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [result, setResult] = useState<CandyMachineResult | null>(null);\r\n\r\n  // Form setup\r\n  const form = useForm<CandyMachineFormValues>({\r\n    defaultValues: {\r\n      itemsAvailable: 100,\r\n      price: 0.1,\r\n      symbol: \"CNDY\",\r\n      maxEditionSupply: 0,\r\n      isMutable: true,\r\n      collection: propCollection || \"\",\r\n      configLines: [\r\n        { name: \"NFT #1\", uri: \"https://example.com/metadata/1.json\" }\r\n      ],\r\n      enableBotTax: false,\r\n      enableSolPayment: true,\r\n      enableStartDate: false,\r\n      enableEndDate: false,\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  const onSubmit = async (values: CandyMachineFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage(\"confirming\");\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Creating Candy Machine...\", {\r\n        id: \"candy-machine-create\",\r\n      });\r\n\r\n      // Initialize UMI\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity(wallet.adapter))\r\n        .use(mplCore())\r\n        .use(mplCandyMachine());\r\n\r\n      // Generate candy machine keypair\r\n      const candyMachine = generateSigner(umi);\r\n\r\n      // Prepare guards\r\n      const guards: any = {};\r\n\r\n      if (values.enableSolPayment) {\r\n        guards.solPayment = some({\r\n          lamports: sol(values.price),\r\n          destination: umi.identity.publicKey,\r\n        });\r\n      }\r\n\r\n      if (values.enableBotTax) {\r\n        guards.botTax = some({\r\n          lamports: sol(0.01),\r\n          lastInstruction: true,\r\n        });\r\n      }\r\n\r\n      if (values.enableStartDate && values.goLiveDate) {\r\n        guards.startDate = some({\r\n          date: dateTime(new Date(values.goLiveDate).toISOString()),\r\n        });\r\n      }\r\n\r\n      if (values.enableEndDate && values.endDate) {\r\n        guards.endDate = some({\r\n          date: dateTime(new Date(values.endDate).toISOString()),\r\n        });\r\n      }\r\n\r\n      // Create candy machine\r\n      const createConfig: any = {\r\n        candyMachine,\r\n        collectionUpdateAuthority: umi.identity,\r\n        itemsAvailable: values.itemsAvailable,\r\n        sellerFeeBasisPoints: 500, // 5%\r\n        configLineSettings: some({\r\n          prefixName: values.symbol + \" #\",\r\n          nameLength: 32,\r\n          prefixUri: \"\",\r\n          uriLength: 200,\r\n          isSequential: false,\r\n        }),\r\n        guards,\r\n      };\r\n\r\n      // Create instruction\r\n      const createIx = await create(umi, createConfig);\r\n      const createResult = await createIx.sendAndConfirm(umi);\r\n\r\n\r\n      const createSignature = Buffer.from(createResult.signature).toString('base64');\r\n\r\n      // Add config lines if provided\r\n      if (values.configLines.length > 0) {\r\n        const configLinesFormatted = values.configLines.map((line, index) => ({\r\n          name: line.name,\r\n          uri: line.uri,\r\n        }));\r\n\r\n        const addConfigLinesIx = addConfigLines(umi, {\r\n          candyMachine: candyMachine.publicKey,\r\n          index: 0,\r\n          configLines: configLinesFormatted,\r\n        });\r\n\r\n        await addConfigLinesIx.sendAndConfirm(umi);\r\n      }\r\n\r\n      const candyMachineAddress = candyMachine.publicKey.toString();\r\n\r\n      setResult({\r\n        candyMachine: candyMachineAddress,\r\n        signature: createSignature,\r\n        collection: values.collection,\r\n      });\r\n\r\n      if (onCandyMachineCreated) {\r\n        onCandyMachineCreated(candyMachineAddress, createSignature);\r\n      }\r\n\r\n      setCurrentStage(\"success\");\r\n\r\n      toast.success(\"Candy Machine created successfully!\", {\r\n        id: \"candy-machine-create\",\r\n        description: `Candy Machine: ${candyMachineAddress.slice(0, 8)}...${candyMachineAddress.slice(-8)}`,\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error creating candy machine:\", err);\r\n\r\n      setCurrentStage(\"error\");\r\n      setError(err.message || \"An unknown error occurred\");\r\n\r\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\r\n        toast.error(\"Transaction rejected\", {\r\n          id: \"candy-machine-create\",\r\n          description: \"You have rejected the transaction\",\r\n        });\r\n      } else {\r\n        toast.error(\"Cannot create Candy Machine\", {\r\n          id: \"candy-machine-create\",\r\n          description: err.message,\r\n        });\r\n\r\n        if (err.message?.includes(\"failed to fetch\") ||\r\n          err.message?.includes(\"timeout\") ||\r\n          err.message?.includes(\"429\") ||\r\n          err.message?.includes(\"503\")) {\r\n          switchToNextEndpoint();\r\n        }\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Add config line\r\n  const addConfigLine = () => {\r\n    const currentLines = form.getValues(\"configLines\");\r\n    form.setValue(\"configLines\", [\r\n      ...currentLines,\r\n      { name: `NFT #${currentLines.length + 1}`, uri: \"\" }\r\n    ]);\r\n  };\r\n\r\n  // Remove config line\r\n  const removeConfigLine = (index: number) => {\r\n    const currentLines = form.getValues(\"configLines\");\r\n    if (currentLines.length > 1) {\r\n      form.setValue(\"configLines\", currentLines.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  // View functions\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === \"devnet\"\r\n        ? \"https://explorer.solana.com/tx/\"\r\n        : \"https://solscan.io/tx/\";\r\n      window.open(\r\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const viewCandyMachine = () => {\r\n    if (result?.candyMachine) {\r\n      const baseUrl = network === \"devnet\"\r\n        ? \"https://explorer.solana.com/address/\"\r\n        : \"https://solscan.io/account/\";\r\n      window.open(\r\n        `${baseUrl}${result.candyMachine}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\r\n        \"_blank\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage(\"input\");\r\n    setError(\"\");\r\n  };\r\n\r\n  // Render functions\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        {/* Basic Settings */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold\">Basic Settings</h3>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"itemsAvailable\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Items Available</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"100\"\r\n                      {...field}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"price\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Price (SOL)</FormLabel>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      step=\"0.001\"\r\n                      placeholder=\"0.1\"\r\n                      {...field}\r\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"symbol\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Symbol</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"CNDY\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"collection\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Collection (Optional)</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Collection mint address\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        {/* Guards */}\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-semibold\">Guards</h3>\r\n\r\n          <div className=\"space-y-3\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"enableSolPayment\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex items-center space-x-2\">\r\n                  <FormControl>\r\n                    <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n                  </FormControl>\r\n                  <Label>Enable SOL Payment</Label>\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"enableBotTax\"\r\n              render={({ field }) => (\r\n                <FormItem className=\"flex items-center space-x-2\">\r\n                  <FormControl>\r\n                    <Switch checked={field.value} onCheckedChange={field.onChange} />\r\n                  </FormControl>\r\n                  <Label>Enable Bot Tax</Label>\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Config Lines */}\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold\">Config Lines</h3>\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={addConfigLine}\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Add Line\r\n            </Button>\r\n          </div>\r\n\r\n          {form.watch(\"configLines\").map((_, index) => (\r\n            <div key={index} className=\"grid grid-cols-12 gap-2 items-end\">\r\n              <div className=\"col-span-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name={`configLines.${index}.name`}\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      {index === 0 && <FormLabel>Name</FormLabel>}\r\n                      <FormControl>\r\n                        <Input placeholder=\"NFT Name\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-span-7\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name={`configLines.${index}.uri`}\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      {index === 0 && <FormLabel>Metadata URI</FormLabel>}\r\n                      <FormControl>\r\n                        <Input placeholder=\"https://...\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-span-1\">\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => removeConfigLine(index)}\r\n                  disabled={form.watch(\"configLines\").length === 1}\r\n                >\r\n                  ×\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Submit */}\r\n        <div className=\"flex flex-col gap-4\">\r\n          {!connected ? (\r\n            <ConnectWalletButton className=\"w-full\" />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"w-full\"\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Creating...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Settings className=\"mr-2 h-4 w-4\" />\r\n                  Create Candy Machine\r\n                </>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\r\n        <p className=\"text-muted-foreground\">\r\n          Your Candy Machine has been created successfully\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-sm font-medium\">Candy Machine:</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm font-mono\">\r\n              {result?.candyMachine?.slice(0, 8)}...{result?.candyMachine?.slice(-8)}\r\n            </span>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={viewCandyMachine}\r\n            >\r\n              <ExternalLink className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-sm font-medium\">Transaction:</span>\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"text-sm font-mono\">\r\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\r\n            </span>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={viewExplorer}\r\n            >\r\n              <ExternalLink className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create Another Candy Machine\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-10 w-10 text-red-600\" />\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\r\n        <p className=\"text-muted-foreground\">\r\n          Failed to create Candy Machine\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"rounded-lg bg-red-50 p-4\">\r\n        <p className=\"text-sm text-red-600\">{error}</p>\r\n      </div>\r\n\r\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creating Candy Machine</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please wait while your Candy Machine is being created...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case \"success\":\r\n        return renderSuccess();\r\n      case \"error\":\r\n        return renderError();\r\n      case \"confirming\":\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Create Candy Machine</CardTitle>\r\n          <CardDescription>\r\n            Set up your NFT collection launchpad\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle>Create Candy Machine</CardTitle>\r\n            <CardDescription>\r\n              Set up your NFT collection launchpad\r\n            </CardDescription>\r\n          </div>\r\n          <Badge variant=\"outline\">{network}</Badge>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { CandyMachineForm };",
      "type": "registry:component",
      "target": "components/ui/murphy/candy-machine-form.tsx"
    }
  ]
}