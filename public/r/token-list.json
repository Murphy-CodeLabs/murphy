{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-list",
  "type": "registry:block",
  "title": "Token List",
  "description": "A simple token list component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "millify"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "skeleton",
    "table"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-list.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { ExternalLinkIcon } from \"lucide-react\";\r\n\r\nimport { shortAddress, formatUsd, formatNumberShort, cn } from \"@/lib/utils\";\r\nimport { SolAsset } from \"@/types/assets\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\n\r\nimport { TokenIcon } from \"./token-icon\";\r\n\r\ntype TokenListProps = {\r\n  assets: SolAsset[];\r\n  showBalances?: boolean;\r\n  onClick?: (token: SolAsset) => void;\r\n};\r\n\r\nconst TokenList = ({\r\n  assets,\r\n  showBalances = true,\r\n  onClick,\r\n}: TokenListProps) => {\r\n  return (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow className=\"hover:bg-transparent\">\r\n          <TableHead>Token</TableHead>\r\n          <TableHead>Mint</TableHead>\r\n          <TableHead>Price</TableHead>\r\n          {showBalances && <TableHead>Balance</TableHead>}\r\n          {showBalances && <TableHead>Value</TableHead>}\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {assets.length === 0 ? (\r\n          <>\r\n            {[...Array(3)].map((_, index) => (\r\n              <TableRow key={index} className=\"hover:bg-transparent\">\r\n                {[...Array(showBalances ? 5 : 3)].map((_, index) => (\r\n                  <TableCell key={index}>\r\n                    {index === 0 ? (\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Skeleton className=\"h-[32px] w-[32px] shrink-0 rounded-full\" />\r\n                        <Skeleton className=\"h-[22px] w-full\" />\r\n                      </div>\r\n                    ) : (\r\n                      <Skeleton className=\"h-[22px] w-full\" />\r\n                    )}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          assets.map((asset) => (\r\n            <TableRow\r\n              key={asset.mint.toBase58()}\r\n              className={cn(\r\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\r\n                onClick && \"cursor-pointer\",\r\n              )}\r\n              onClick={() => onClick && onClick(asset)}\r\n            >\r\n              <TableCell>\r\n                <div className=\"flex items-center gap-2 font-medium\">\r\n                  <TokenIcon asset={asset} />\r\n                  {asset.symbol}\r\n                </div>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Link\r\n                  href={`https://solscan.io/token/${asset.mint.toBase58()}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"group inline-flex items-center gap-1\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <span className=\"border-b border-transparent group-hover:border-border\">\r\n                    {shortAddress(asset.mint.toBase58())}\r\n                  </span>\r\n                  <ExternalLinkIcon size={16} />\r\n                </Link>\r\n              </TableCell>\r\n              <TableCell>{formatUsd(asset.price || 0)}</TableCell>\r\n              {showBalances && (\r\n                <>\r\n                  <TableCell>\r\n                    {asset.userTokenAccount?.amount &&\r\n                      formatNumberShort(asset.userTokenAccount.amount)}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {asset.userTokenAccount?.amount &&\r\n                      formatUsd(\r\n                        asset.userTokenAccount.amount * (asset.price || 0),\r\n                      )}\r\n                  </TableCell>\r\n                </>\r\n              )}\r\n            </TableRow>\r\n          ))\r\n        )}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport { TokenList };",
      "type": "registry:component",
      "target": "components/ui/murphy/token-list.tsx"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\r\n\r\nexport type SolAsset = {\r\n  mint: PublicKey;\r\n  name: string;\r\n  symbol: string;\r\n  image: string;\r\n  decimals: number;\r\n  price: number;\r\n  userTokenAccount?: {\r\n    address: PublicKey;\r\n    amount: number;\r\n  };\r\n};\r\n\r\nexport type FetchWalletArgs = {\r\n  owner: PublicKey;\r\n  limit?: number;\r\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "components/ui/murphy/token-icon.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { SolAsset } from \"@/types/assets\";\r\n\r\ntype IconProps = {\r\n  asset: SolAsset | null;\r\n  size?: number;\r\n};\r\n\r\nconst TokenIcon = ({ asset, size = 24 }: IconProps) => {\r\n  return (\r\n    <div\r\n      className=\"relative shrink-0 rounded-full border border-border bg-background p-0\"\r\n      style={{\r\n        width: size + 2,\r\n        height: size + 2,\r\n      }}\r\n    >\r\n      <img\r\n        src={asset?.image ?? \"\"}\r\n        alt={asset?.symbol ?? asset?.mint.toBase58() ?? \"\"}\r\n        width={size}\r\n        height={size}\r\n        className=\"absolute inset-0 rounded-full mt-0\"\r\n        style={{\r\n          width: size,\r\n          height: size,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { TokenIcon };",
      "type": "registry:file",
      "target": "components/ui/murphy/token-icon.tsx"
    },
    {
      "path": "public/crypto-logos/solana-logo.svg",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n\t viewBox=\"0 0 397.7 311.7\" style=\"enable-background:new 0 0 397.7 311.7;\" xml:space=\"preserve\">\r\n<style type=\"text/css\">\r\n\t.st0{fill:url(#SVGID_1_);}\r\n\t.st1{fill:url(#SVGID_2_);}\r\n\t.st2{fill:url(#SVGID_3_);}\r\n</style>\r\n<linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"360.8791\" y1=\"351.4553\" x2=\"141.213\" y2=\"-69.2936\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\r\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\r\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\r\n</linearGradient>\r\n<path class=\"st0\" d=\"M64.6,237.9c2.4-2.4,5.7-3.8,9.2-3.8h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5\r\n\tc-5.8,0-8.7-7-4.6-11.1L64.6,237.9z\"/>\r\n<linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"264.8291\" y1=\"401.6014\" x2=\"45.163\" y2=\"-19.1475\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\r\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\r\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\r\n</linearGradient>\r\n<path class=\"st1\" d=\"M64.6,3.8C67.1,1.4,70.4,0,73.8,0h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5\r\n\tc-5.8,0-8.7-7-4.6-11.1L64.6,3.8z\"/>\r\n<linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"312.5484\" y1=\"376.688\" x2=\"92.8822\" y2=\"-44.061\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\r\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\r\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\r\n</linearGradient>\r\n<path class=\"st2\" d=\"M333.1,120.1c-2.4-2.4-5.7-3.8-9.2-3.8H6.5c-5.8,0-8.7,7-4.6,11.1l62.7,62.7c2.4,2.4,5.7,3.8,9.2,3.8h317.4\r\n\tc5.8,0,8.7-7,4.6-11.1L333.1,120.1z\"/>\r\n</svg>\r\n",
      "type": "registry:file",
      "target": "public/crypto-logos/solana-logo.svg"
    },
    {
      "path": "public/crypto-logos/usd-coin-usdc-logo.svg",
      "content": "<svg data-name=\"86977684-12db-4850-8f30-233a7c267d11\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 2000 2000\">\r\n  <path d=\"M1000 2000c554.17 0 1000-445.83 1000-1000S1554.17 0 1000 0 0 445.83 0 1000s445.83 1000 1000 1000z\" fill=\"#2775ca\"/>\r\n  <path d=\"M1275 1158.33c0-145.83-87.5-195.83-262.5-216.66-125-16.67-150-50-150-108.34s41.67-95.83 125-95.83c75 0 116.67 25 137.5 87.5 4.17 12.5 16.67 20.83 29.17 20.83h66.66c16.67 0 29.17-12.5 29.17-29.16v-4.17c-16.67-91.67-91.67-162.5-187.5-170.83v-100c0-16.67-12.5-29.17-33.33-33.34h-62.5c-16.67 0-29.17 12.5-33.34 33.34v95.83c-125 16.67-204.16 100-204.16 204.17 0 137.5 83.33 191.66 258.33 212.5 116.67 20.83 154.17 45.83 154.17 112.5s-58.34 112.5-137.5 112.5c-108.34 0-145.84-45.84-158.34-108.34-4.16-16.66-16.66-25-29.16-25h-70.84c-16.66 0-29.16 12.5-29.16 29.17v4.17c16.66 104.16 83.33 179.16 220.83 200v100c0 16.66 12.5 29.16 33.33 33.33h62.5c16.67 0 29.17-12.5 33.34-33.33v-100c125-20.84 208.33-108.34 208.33-220.84z\" fill=\"#fff\"/>\r\n  <path d=\"M787.5 1595.83c-325-116.66-491.67-479.16-370.83-800 62.5-175 200-308.33 370.83-370.83 16.67-8.33 25-20.83 25-41.67V325c0-16.67-8.33-29.17-25-33.33-4.17 0-12.5 0-16.67 4.16-395.83 125-612.5 545.84-487.5 941.67 75 233.33 254.17 412.5 487.5 487.5 16.67 8.33 33.34 0 37.5-16.67 4.17-4.16 4.17-8.33 4.17-16.66v-58.34c0-12.5-12.5-29.16-25-37.5zM1229.17 295.83c-16.67-8.33-33.34 0-37.5 16.67-4.17 4.17-4.17 8.33-4.17 16.67v58.33c0 16.67 12.5 33.33 25 41.67 325 116.66 491.67 479.16 370.83 800-62.5 175-200 308.33-370.83 370.83-16.67 8.33-25 20.83-25 41.67V1700c0 16.67 8.33 29.17 25 33.33 4.17 0 12.5 0 16.67-4.16 395.83-125 612.5-545.84 487.5-941.67-75-237.5-258.34-416.67-487.5-491.67z\" fill=\"#fff\"/>\r\n</svg>\r\n",
      "type": "registry:file",
      "target": "public/crypto-logos/usd-coin-usdc-logo.svg"
    },
    {
      "path": "public/crypto-logos/tether-usdt-logo.svg",
      "content": "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 339.43 295.27\"><title>tether-usdt-logo</title><path d=\"M62.15,1.45l-61.89,130a2.52,2.52,0,0,0,.54,2.94L167.95,294.56a2.55,2.55,0,0,0,3.53,0L338.63,134.4a2.52,2.52,0,0,0,.54-2.94l-61.89-130A2.5,2.5,0,0,0,275,0H64.45a2.5,2.5,0,0,0-2.3,1.45h0Z\" style=\"fill:#50af95;fill-rule:evenodd\"/><path d=\"M191.19,144.8v0c-1.2.09-7.4,0.46-21.23,0.46-11,0-18.81-.33-21.55-0.46v0c-42.51-1.87-74.24-9.27-74.24-18.13s31.73-16.25,74.24-18.15v28.91c2.78,0.2,10.74.67,21.74,0.67,13.2,0,19.81-.55,21-0.66v-28.9c42.42,1.89,74.08,9.29,74.08,18.13s-31.65,16.24-74.08,18.12h0Zm0-39.25V79.68h59.2V40.23H89.21V79.68H148.4v25.86c-48.11,2.21-84.29,11.74-84.29,23.16s36.18,20.94,84.29,23.16v82.9h42.78V151.83c48-2.21,84.12-11.73,84.12-23.14s-36.09-20.93-84.12-23.15h0Zm0,0h0Z\" style=\"fill:#fff;fill-rule:evenodd\"/></svg>",
      "type": "registry:file",
      "target": "public/crypto-logos/tether-usdt-logo.svg"
    }
  ]
}