{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-list",
  "type": "registry:block",
  "title": "Token List",
  "description": "A simple token list component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "millify"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "skeleton",
    "table"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { ExternalLinkIcon } from \"lucide-react\";\n\nimport { shortAddress, formatUsd, formatNumberShort, cn } from \"@/lib/utils\";\nimport { SolAsset } from \"@/types/assets\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { TokenIcon } from \"./token-icon\";\n\ntype TokenListProps = {\n  assets: SolAsset[];\n  showBalances?: boolean;\n  onClick?: (token: SolAsset) => void;\n};\n\nconst TokenList = ({\n  assets,\n  showBalances = true,\n  onClick,\n}: TokenListProps) => {\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow className=\"hover:bg-transparent\">\n          <TableHead>Token</TableHead>\n          <TableHead>Mint</TableHead>\n          <TableHead>Price</TableHead>\n          {showBalances && <TableHead>Balance</TableHead>}\n          {showBalances && <TableHead>Value</TableHead>}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {assets.length === 0 ? (\n          <>\n            {[...Array(3)].map((_, index) => (\n              <TableRow key={index} className=\"hover:bg-transparent\">\n                {[...Array(showBalances ? 5 : 3)].map((_, index) => (\n                  <TableCell key={index}>\n                    {index === 0 ? (\n                      <div className=\"flex items-center gap-3\">\n                        <Skeleton className=\"h-[32px] w-[32px] shrink-0 rounded-full\" />\n                        <Skeleton className=\"h-[22px] w-full\" />\n                      </div>\n                    ) : (\n                      <Skeleton className=\"h-[22px] w-full\" />\n                    )}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </>\n        ) : (\n          assets.map((asset) => (\n            <TableRow\n              key={asset.mint.toBase58()}\n              className={cn(\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\n                onClick && \"cursor-pointer\",\n              )}\n              onClick={() => onClick && onClick(asset)}\n            >\n              <TableCell>\n                <div className=\"flex items-center gap-2 font-medium\">\n                  <TokenIcon asset={asset} />\n                  {asset.symbol}\n                </div>\n              </TableCell>\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/token/${asset.mint.toBase58()}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(asset.mint.toBase58())}\n                  </span>\n                  <ExternalLinkIcon size={16} />\n                </Link>\n              </TableCell>\n              <TableCell>{formatUsd(asset.price || 0)}</TableCell>\n              {showBalances && (\n                <>\n                  <TableCell>\n                    {asset.userTokenAccount?.amount &&\n                      formatNumberShort(asset.userTokenAccount.amount)}\n                  </TableCell>\n                  <TableCell>\n                    {asset.userTokenAccount?.amount &&\n                      formatUsd(\n                        asset.userTokenAccount.amount * (asset.price || 0),\n                      )}\n                  </TableCell>\n                </>\n              )}\n            </TableRow>\n          ))\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport { TokenList };",
      "type": "registry:component",
      "target": "components/ui/murphy/token-list.tsx"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\n\nexport type SolAsset = {\n  mint: PublicKey;\n  name: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  price: number;\n  userTokenAccount?: {\n    address: PublicKey;\n    amount: number;\n  };\n};\n\nexport type FetchWalletArgs = {\n  owner: PublicKey;\n  limit?: number;\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport millify from \"millify\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\n};\n\nexport const formatUsd = (num: number): string => {\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\n};\n\nexport const formatNumber = (\n  num: number,\n  options: Intl.NumberFormatOptions = {},\n): string => {\n  if (num === null || num === undefined) return \"0\";\n\n  const absNum = Math.abs(num);\n  let decimals = 2;\n\n  if (absNum < 1) {\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\n  }\n\n  return new Intl.NumberFormat(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(num);\n};\n\nexport const formatNumberShort = (num: number): string => {\n  if (num < 1000) return formatNumber(num);\n  return millify(num, {\n    precision: 2,\n  });\n};\n\nexport const formatNumberGrouped = (\n  value: number,\n  expThreshold: number = 0.0001,\n  expPrecision: number = 1,\n) => {\n  if (value === 0) return \"0\";\n\n  if (Math.abs(value) < expThreshold) {\n    return value.toExponential(expPrecision);\n  }\n\n  if (Number.isInteger(value)) {\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\n  }\n\n  const valueParts = value.toString().split(\".\");\n  const decimalPart = valueParts[1] ?? \"\";\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\n\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: true,\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\n  }).format(value);\n};\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch (error) {\n        return false;\n\n  }\n};\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "components/ui/murphy/token-icon.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\n\nimport { SolAsset } from \"@/types/assets\";\n\ntype IconProps = {\n  asset: SolAsset | null;\n  size?: number;\n};\n\nconst TokenIcon = ({ asset, size = 24 }: IconProps) => {\n  return (\n    <div\n      className=\"relative shrink-0 rounded-full border border-border bg-background p-0\"\n      style={{\n        width: size + 2,\n        height: size + 2,\n      }}\n    >\n      <img\n        src={asset?.image ?? \"\"}\n        alt={asset?.symbol ?? asset?.mint.toBase58() ?? \"\"}\n        width={size}\n        height={size}\n        className=\"absolute inset-0 rounded-full mt-0\"\n        style={{\n          width: size,\n          height: size,\n        }}\n      />\n    </div>\n  );\n};\n\nexport { TokenIcon };",
      "type": "registry:file",
      "target": "components/ui/murphy/token-icon.tsx"
    },
    {
      "path": "public/crypto-logos/solana-logo.svg",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 397.7 311.7\" style=\"enable-background:new 0 0 397.7 311.7;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n\t.st0{fill:url(#SVGID_1_);}\n\t.st1{fill:url(#SVGID_2_);}\n\t.st2{fill:url(#SVGID_3_);}\n</style>\n<linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"360.8791\" y1=\"351.4553\" x2=\"141.213\" y2=\"-69.2936\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\n</linearGradient>\n<path class=\"st0\" d=\"M64.6,237.9c2.4-2.4,5.7-3.8,9.2-3.8h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5\n\tc-5.8,0-8.7-7-4.6-11.1L64.6,237.9z\"/>\n<linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"264.8291\" y1=\"401.6014\" x2=\"45.163\" y2=\"-19.1475\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\n</linearGradient>\n<path class=\"st1\" d=\"M64.6,3.8C67.1,1.4,70.4,0,73.8,0h317.4c5.8,0,8.7,7,4.6,11.1l-62.7,62.7c-2.4,2.4-5.7,3.8-9.2,3.8H6.5\n\tc-5.8,0-8.7-7-4.6-11.1L64.6,3.8z\"/>\n<linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"312.5484\" y1=\"376.688\" x2=\"92.8822\" y2=\"-44.061\" gradientTransform=\"matrix(1 0 0 -1 0 314)\">\n\t<stop  offset=\"0\" style=\"stop-color:#00FFA3\"/>\n\t<stop  offset=\"1\" style=\"stop-color:#DC1FFF\"/>\n</linearGradient>\n<path class=\"st2\" d=\"M333.1,120.1c-2.4-2.4-5.7-3.8-9.2-3.8H6.5c-5.8,0-8.7,7-4.6,11.1l62.7,62.7c2.4,2.4,5.7,3.8,9.2,3.8h317.4\n\tc5.8,0,8.7-7,4.6-11.1L333.1,120.1z\"/>\n</svg>\n",
      "type": "registry:file",
      "target": "public/crypto-logos/solana-logo.svg"
    },
    {
      "path": "public/crypto-logos/usd-coin-usdc-logo.svg",
      "content": "<svg data-name=\"86977684-12db-4850-8f30-233a7c267d11\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 2000 2000\">\n  <path d=\"M1000 2000c554.17 0 1000-445.83 1000-1000S1554.17 0 1000 0 0 445.83 0 1000s445.83 1000 1000 1000z\" fill=\"#2775ca\"/>\n  <path d=\"M1275 1158.33c0-145.83-87.5-195.83-262.5-216.66-125-16.67-150-50-150-108.34s41.67-95.83 125-95.83c75 0 116.67 25 137.5 87.5 4.17 12.5 16.67 20.83 29.17 20.83h66.66c16.67 0 29.17-12.5 29.17-29.16v-4.17c-16.67-91.67-91.67-162.5-187.5-170.83v-100c0-16.67-12.5-29.17-33.33-33.34h-62.5c-16.67 0-29.17 12.5-33.34 33.34v95.83c-125 16.67-204.16 100-204.16 204.17 0 137.5 83.33 191.66 258.33 212.5 116.67 20.83 154.17 45.83 154.17 112.5s-58.34 112.5-137.5 112.5c-108.34 0-145.84-45.84-158.34-108.34-4.16-16.66-16.66-25-29.16-25h-70.84c-16.66 0-29.16 12.5-29.16 29.17v4.17c16.66 104.16 83.33 179.16 220.83 200v100c0 16.66 12.5 29.16 33.33 33.33h62.5c16.67 0 29.17-12.5 33.34-33.33v-100c125-20.84 208.33-108.34 208.33-220.84z\" fill=\"#fff\"/>\n  <path d=\"M787.5 1595.83c-325-116.66-491.67-479.16-370.83-800 62.5-175 200-308.33 370.83-370.83 16.67-8.33 25-20.83 25-41.67V325c0-16.67-8.33-29.17-25-33.33-4.17 0-12.5 0-16.67 4.16-395.83 125-612.5 545.84-487.5 941.67 75 233.33 254.17 412.5 487.5 487.5 16.67 8.33 33.34 0 37.5-16.67 4.17-4.16 4.17-8.33 4.17-16.66v-58.34c0-12.5-12.5-29.16-25-37.5zM1229.17 295.83c-16.67-8.33-33.34 0-37.5 16.67-4.17 4.17-4.17 8.33-4.17 16.67v58.33c0 16.67 12.5 33.33 25 41.67 325 116.66 491.67 479.16 370.83 800-62.5 175-200 308.33-370.83 370.83-16.67 8.33-25 20.83-25 41.67V1700c0 16.67 8.33 29.17 25 33.33 4.17 0 12.5 0 16.67-4.16 395.83-125 612.5-545.84 487.5-941.67-75-237.5-258.34-416.67-487.5-491.67z\" fill=\"#fff\"/>\n</svg>\n",
      "type": "registry:file",
      "target": "public/crypto-logos/usd-coin-usdc-logo.svg"
    },
    {
      "path": "public/crypto-logos/tether-usdt-logo.svg",
      "content": "<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 339.43 295.27\"><title>tether-usdt-logo</title><path d=\"M62.15,1.45l-61.89,130a2.52,2.52,0,0,0,.54,2.94L167.95,294.56a2.55,2.55,0,0,0,3.53,0L338.63,134.4a2.52,2.52,0,0,0,.54-2.94l-61.89-130A2.5,2.5,0,0,0,275,0H64.45a2.5,2.5,0,0,0-2.3,1.45h0Z\" style=\"fill:#50af95;fill-rule:evenodd\"/><path d=\"M191.19,144.8v0c-1.2.09-7.4,0.46-21.23,0.46-11,0-18.81-.33-21.55-0.46v0c-42.51-1.87-74.24-9.27-74.24-18.13s31.73-16.25,74.24-18.15v28.91c2.78,0.2,10.74.67,21.74,0.67,13.2,0,19.81-.55,21-0.66v-28.9c42.42,1.89,74.08,9.29,74.08,18.13s-31.65,16.24-74.08,18.12h0Zm0-39.25V79.68h59.2V40.23H89.21V79.68H148.4v25.86c-48.11,2.21-84.29,11.74-84.29,23.16s36.18,20.94,84.29,23.16v82.9h42.78V151.83c48-2.21,84.12-11.73,84.12-23.14s-36.09-20.93-84.12-23.15h0Zm0,0h0Z\" style=\"fill:#fff;fill-rule:evenodd\"/></svg>",
      "type": "registry:file",
      "target": "public/crypto-logos/tether-usdt-logo.svg"
    }
  ]
}