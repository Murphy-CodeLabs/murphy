{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-merkleTree-form",
  "type": "registry:block",
  "title": "Create Merkle Tree Form",
  "description": "A simple create merkle tree form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/create-merkleTree-form.tsx",
      "content": "'use client';\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle } from \"lucide-react\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries asynchronously\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\nimport { generateSigner } from '@metaplex-foundation/umi';\nimport { createTree } from '@metaplex-foundation/mpl-bubblegum';\n\ninterface CreateMerkleTreeResult {\n  mint: string;\n  signature: string;\n}\n\ntype MerkleTreeFormValues = {\n  maxDepth: number;\n  maxBuffer: number;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate max depth\n  if (data.maxDepth === undefined || data.maxDepth === null || data.maxDepth === \"\") {\n    errors.maxDepth = {\n      type: \"required\",\n      message: \"Max depth is required\",\n    };\n  } else if (Number(data.maxDepth) < 1 || Number(data.maxDepth) > 30) {\n    errors.maxDepth = {\n      type: \"range\",\n      message: \"Max depth must be between 1 and 30\",\n    };\n  }\n\n  // Validate max buffer\n  if (data.maxBuffer === undefined || data.maxBuffer === null || data.maxBuffer === \"\") {\n    errors.maxBuffer = {\n      type: \"required\",\n      message: \"Max buffer size is required\",\n    };\n  } else if (Number(data.maxBuffer) < 1) {\n    errors.maxBuffer = {\n      type: \"min\",\n      message: \"Max buffer size must be greater than 0\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport function CreateMerkleTree({ onMerkleTreeCreated }: { onMerkleTreeCreated?: (merkleTreeAddress: string) => void }) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n  \n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<CreateMerkleTreeResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\n\n  // Form setup with react-hook-form\n  const form = useForm<MerkleTreeFormValues>({\n    defaultValues: {\n      maxDepth: 14,\n      maxBuffer: 64,\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Only render after the component is mounted on the client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Update network state when endpoint changes\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Handle form submission\n  const onSubmit = async (values: MerkleTreeFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setCurrentStage('confirming');\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Create UMI instance\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplTokenMetadata());\n      \n      toast.loading(\"Creating Merkle Tree...\", {\n        id: \"create-merkle-tree\"\n      });\n      \n      // Create Merkle Tree\n      const merkleTree = generateSigner(umi);\n      const builder = await createTree(umi, {\n        merkleTree,\n        maxDepth: values.maxDepth,\n        maxBufferSize: values.maxBuffer,\n      });\n      \n      const createResult = await builder.sendAndConfirm(umi);\n      \n      // Convert signature to string format\n      const signatureStr = typeof createResult.signature === 'string' \n        ? createResult.signature \n        : Buffer.from(createResult.signature).toString('base64');\n      \n      // Convert merkle tree address to string\n      const merkleTreeAddressStr = merkleTree.publicKey.toString();\n      \n      // Save result\n      setResult({\n        mint: merkleTreeAddressStr,\n        signature: signatureStr\n      });\n      \n      // Call callback if provided\n      if (onMerkleTreeCreated) {\n        onMerkleTreeCreated(merkleTreeAddressStr);\n      }\n      \n      toast.success(\"Merkle Tree created successfully!\", {\n        id: \"create-merkle-tree\",\n        description: `Address: ${merkleTreeAddressStr.slice(0, 8)}...${merkleTreeAddressStr.slice(-8)}`\n      });\n      \n      setCurrentStage('success');\n      \n    } catch (err: any) {\n      console.error(\"Create Merkle Tree error:\", err);\n      setError(err.message);\n      setCurrentStage('error');\n      \n      // Check if user canceled/rejected the transaction\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction canceled\", {\n          id: \"create-merkle-tree\",\n          description: \"You canceled the transaction\"\n        });\n      } else {\n        toast.error(\"Failed to create Merkle Tree\", {\n          id: \"create-merkle-tree\",\n          description: err.message\n        });\n        \n        // If transaction fails due to connection error, try switching to another endpoint\n        if (err.message.includes('failed to fetch') || \n            err.message.includes('timeout') || \n            err.message.includes('429') ||\n            err.message.includes('503')) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const viewMerkleTree = () => {\n    if (result?.mint) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\n      window.open(`${baseUrl}${result.mint}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setError(null);\n    setCurrentStage('input');\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Merkle Tree Created!</h3>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Merkle Tree Address:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.mint}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.signature}\n        </div>\n      </div>\n      \n      <div className=\"flex gap-2 mt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={viewMerkleTree}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Merkle Tree\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          onClick={viewExplorer}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Transaction\n        </Button>\n      </div>\n      \n      <Button \n        onClick={resetForm}\n        className=\"w-full\"\n      >\n        Create New Merkle Tree\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the Merkle Tree.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Merkle Tree</h3>\n      <p className=\"text-muted-foreground\">Please wait while your Merkle Tree is being created...</p>\n    </div>\n  );\n\n  // Render form view\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"maxDepth\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Max Depth</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  placeholder=\"14\"\n                  min=\"1\"\n                  max=\"30\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  value={field.value}\n                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Maximum depth of the Merkle tree (recommended: 14-20)\n              </p>\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"maxBuffer\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Max Buffer Size</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  placeholder=\"64\"\n                  min=\"1\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  value={field.value}\n                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Maximum buffer size for concurrent operations (recommended: 64-256)\n              </p>\n            </FormItem>\n          )}\n        />\n                \n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Creating...\n                  </>\n                ) : \"Create Merkle Tree\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  // Avoid hydration error\n  if (!mounted) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Create Merkle Tree</CardTitle>\n          <CardDescription>Create a new Merkle Tree on Solana</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Create Merkle Tree</span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Create a new Merkle Tree on Solana</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n} ",
      "type": "registry:component",
      "target": "components/ui/murphy/create-merkleTree-form.tsx"
    }
  ]
}