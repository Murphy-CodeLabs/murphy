{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-merkleTree-form",
  "type": "registry:block",
  "title": "Create Merkle Tree Form",
  "description": "A simple create merkle tree form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/create-merkleTree-form.tsx",
      "content": "'use client';\r\n\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle } from \"lucide-react\";\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Import Metaplex libraries asynchronously\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { generateSigner } from '@metaplex-foundation/umi';\r\nimport { createTree } from '@metaplex-foundation/mpl-bubblegum';\r\n\r\ninterface CreateMerkleTreeResult {\r\n  mint: string;\r\n  signature: string;\r\n}\r\n\r\ntype MerkleTreeFormValues = {\r\n  maxDepth: number;\r\n  maxBuffer: number;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate max depth\r\n  if (data.maxDepth === undefined || data.maxDepth === null || data.maxDepth === \"\") {\r\n    errors.maxDepth = {\r\n      type: \"required\",\r\n      message: \"Max depth is required\",\r\n    };\r\n  } else if (Number(data.maxDepth) < 1 || Number(data.maxDepth) > 30) {\r\n    errors.maxDepth = {\r\n      type: \"range\",\r\n      message: \"Max depth must be between 1 and 30\",\r\n    };\r\n  }\r\n\r\n  // Validate max buffer\r\n  if (data.maxBuffer === undefined || data.maxBuffer === null || data.maxBuffer === \"\") {\r\n    errors.maxBuffer = {\r\n      type: \"required\",\r\n      message: \"Max buffer size is required\",\r\n    };\r\n  } else if (Number(data.maxBuffer) < 1) {\r\n    errors.maxBuffer = {\r\n      type: \"min\",\r\n      message: \"Max buffer size must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport function CreateMerkleTree({ onMerkleTreeCreated }: { onMerkleTreeCreated?: (merkleTreeAddress: string) => void }) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\r\n  \r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [result, setResult] = useState<CreateMerkleTreeResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<MerkleTreeFormValues>({\r\n    defaultValues: {\r\n      maxDepth: 14,\r\n      maxBuffer: 64,\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Only render after the component is mounted on the client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Update network state when endpoint changes\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (values: MerkleTreeFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error('Please connect your wallet');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(null);\r\n      setCurrentStage('confirming');\r\n\r\n      // Create wallet adapter for signing transactions\r\n      const walletAdapter = {\r\n        publicKey,\r\n        signTransaction,\r\n        signAllTransactions\r\n      };\r\n\r\n      // Create UMI instance\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity(walletAdapter))\r\n        .use(mplTokenMetadata());\r\n      \r\n      toast.loading(\"Creating Merkle Tree...\", {\r\n        id: \"create-merkle-tree\"\r\n      });\r\n      \r\n      // Create Merkle Tree\r\n      const merkleTree = generateSigner(umi);\r\n      const builder = await createTree(umi, {\r\n        merkleTree,\r\n        maxDepth: values.maxDepth,\r\n        maxBufferSize: values.maxBuffer,\r\n      });\r\n      \r\n      const createResult = await builder.sendAndConfirm(umi);\r\n      \r\n      // Convert signature to string format\r\n      const signatureStr = typeof createResult.signature === 'string' \r\n        ? createResult.signature \r\n        : Buffer.from(createResult.signature).toString('base64');\r\n      \r\n      // Convert merkle tree address to string\r\n      const merkleTreeAddressStr = merkleTree.publicKey.toString();\r\n      \r\n      // Save result\r\n      setResult({\r\n        mint: merkleTreeAddressStr,\r\n        signature: signatureStr\r\n      });\r\n      \r\n      // Call callback if provided\r\n      if (onMerkleTreeCreated) {\r\n        onMerkleTreeCreated(merkleTreeAddressStr);\r\n      }\r\n      \r\n      toast.success(\"Merkle Tree created successfully!\", {\r\n        id: \"create-merkle-tree\",\r\n        description: `Address: ${merkleTreeAddressStr.slice(0, 8)}...${merkleTreeAddressStr.slice(-8)}`\r\n      });\r\n      \r\n      setCurrentStage('success');\r\n      \r\n    } catch (err: any) {\r\n      console.error(\"Create Merkle Tree error:\", err);\r\n      setError(err.message);\r\n      setCurrentStage('error');\r\n      \r\n      // Check if user canceled/rejected the transaction\r\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\r\n        toast.error(\"Transaction canceled\", {\r\n          id: \"create-merkle-tree\",\r\n          description: \"You canceled the transaction\"\r\n        });\r\n      } else {\r\n        toast.error(\"Failed to create Merkle Tree\", {\r\n          id: \"create-merkle-tree\",\r\n          description: err.message\r\n        });\r\n        \r\n        // If transaction fails due to connection error, try switching to another endpoint\r\n        if (err.message.includes('failed to fetch') || \r\n            err.message.includes('timeout') || \r\n            err.message.includes('429') ||\r\n            err.message.includes('503')) {\r\n          switchToNextEndpoint();\r\n        }\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\r\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  const viewMerkleTree = () => {\r\n    if (result?.mint) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\r\n      window.open(`${baseUrl}${result.mint}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setError(null);\r\n    setCurrentStage('input');\r\n  };\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-center\">Merkle Tree Created!</h3>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Merkle Tree Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.mint}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewMerkleTree}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Merkle Tree\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewExplorer}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Transaction\r\n        </Button>\r\n      </div>\r\n      \r\n      <Button \r\n        onClick={resetForm}\r\n        className=\"w-full\"\r\n      >\r\n        Create New Merkle Tree\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\r\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the Merkle Tree.'}</p>\r\n      <Button \r\n        onClick={() => {\r\n          setCurrentStage('input');\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render confirmation view\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creating Merkle Tree</h3>\r\n      <p className=\"text-muted-foreground\">Please wait while your Merkle Tree is being created...</p>\r\n    </div>\r\n  );\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"maxDepth\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Max Depth</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"14\"\r\n                  min=\"1\"\r\n                  max=\"30\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  value={field.value}\r\n                  onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Maximum depth of the Merkle tree (recommended: 14-20)\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        \r\n        <FormField\r\n          control={form.control}\r\n          name=\"maxBuffer\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Max Buffer Size</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"64\"\r\n                  min=\"1\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  value={field.value}\r\n                  onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Maximum buffer size for concurrent operations (recommended: 64-256)\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n                \r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Creating...\r\n                  </>\r\n                ) : \"Create Merkle Tree\"}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render based on current stage\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  // Avoid hydration error\r\n  if (!mounted) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create Merkle Tree</CardTitle>\r\n          <CardDescription>Create a new Merkle Tree on Solana</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Create Merkle Tree</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>Create a new Merkle Tree on Solana</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n} ",
      "type": "registry:component",
      "target": "components/ui/murphy/create-merkleTree-form.tsx"
    }
  ]
}