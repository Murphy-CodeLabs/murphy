{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "core-asset-launchpad",
  "type": "registry:block",
  "title": "Core Asset Launchpad",
  "description": "Create next-generation Core Assets with advanced plugin system.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-core",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "tabs",
    "switch",
    "label",
    "badge"
  ],
  "files": [
    {
      "path": "components/ui/murphy/core-asset-launchpad.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\n\r\n// Metaplex Core imports\r\nimport { createUmi } from \"@metaplex-foundation/umi-bundle-defaults\";\r\nimport { walletAdapterIdentity } from \"@metaplex-foundation/umi-signer-wallet-adapters\";\r\nimport {\r\n  mplCore,\r\n  createV1,\r\n  createCollectionV1,\r\n  addPluginV1,\r\n  PluginType,\r\n  createPlugin,\r\n  ruleSet,\r\n  approvePluginAuthorityV1,\r\n  revokePluginAuthorityV1\r\n} from \"@metaplex-foundation/mpl-core\";\r\nimport {\r\n  generateSigner,\r\n  publicKey as umiPublicKey,\r\n  percentAmount,\r\n  some,\r\n  none\r\n} from \"@metaplex-foundation/umi\";\r\n\r\n// UI Components\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\n\r\n// Icons\r\nimport {\r\n  Loader2,\r\n  Upload,\r\n  Plus,\r\n  X,\r\n  Copy,\r\n  ExternalLink,\r\n  Coins,\r\n  FileImage,\r\n  Settings,\r\n  Shield,\r\n  CheckCircle,\r\n  Layers,\r\n  Lock,\r\n  Unlock\r\n} from \"lucide-react\";\r\n\r\n// Notifications\r\nimport { toast } from \"sonner\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Types\r\ninterface CoreAssetResult {\r\n  asset: string;\r\n  collection?: string;\r\n  transactionSignature: string;\r\n  pluginSignatures?: string[];\r\n}\r\n\r\ninterface PluginConfig {\r\n  type: PluginType;\r\n  enabled: boolean;\r\n  config?: any;\r\n}\r\n\r\ntype AssetType = 'asset' | 'collection';\r\nconst formatSignature = (signature: Uint8Array | string): string => {\r\n  if (typeof signature === 'string') {\r\n    return signature;\r\n  }\r\n  return btoa(String.fromCharCode(...signature));\r\n};\r\nconst formSchema = z.object({\r\n  assetType: z.enum(['asset', 'collection']),\r\n  name: z.string().min(1, \"Name is required\").max(32, \"Name must be less than 32 characters\"),\r\n  uri: z.string().refine((val) => {\r\n    if (val === '') return true;\r\n    try {\r\n      new URL(val);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }, \"Invalid URI format\"),\r\n  collection: z.string(),\r\n  owner: z.string(),\r\n  updateAuthority: z.string(),\r\n  enableRoyalties: z.boolean(),\r\n  royaltyPercentage: z.number().min(0).max(100),\r\n  enableFreeze: z.boolean(),\r\n  freezeAuthority: z.string(),\r\n  enableBurn: z.boolean(),\r\n  burnAuthority: z.string(),\r\n  enableTransfer: z.boolean(),\r\n  transferAuthority: z.string(),\r\n  enableUpdateDelegate: z.boolean(),\r\n  updateDelegateAuthority: z.string(),\r\n  enableAttributes: z.boolean(),\r\n  attributes: z.array(z.object({\r\n    key: z.string(),\r\n    value: z.string(),\r\n  })),\r\n  permanent: z.boolean(),\r\n});\r\n\r\ntype FormSchema = z.infer<typeof formSchema>;\r\n\r\n\r\ninterface CoreAssetLaunchpadProps {\r\n  className?: string;\r\n  onAssetCreated?: (result: CoreAssetResult) => void;\r\n  defaultAssetType?: AssetType;\r\n}\r\n\r\nexport function CoreAssetLaunchpad({\r\n  className,\r\n  onAssetCreated,\r\n  defaultAssetType = 'asset'\r\n}: CoreAssetLaunchpadProps) {\r\n  // Hooks\r\n  const { publicKey, connected, wallet } = useWallet();\r\n  const { connection } = useConnection();\r\n  const { endpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [mounted, setMounted] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [result, setResult] = useState<CoreAssetResult | null>(null);\r\n  const [network, setNetwork] = useState<'devnet' | 'mainnet'>('devnet');\r\n  const [activeFormTab, setActiveFormTab] = useState(\"basic\");\r\n\r\n  const form = useForm<FormSchema>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      assetType: 'asset',\r\n      name: '',\r\n      uri: '',\r\n      collection: '',\r\n      owner: '',\r\n      updateAuthority: '',\r\n      enableRoyalties: false,\r\n      royaltyPercentage: 5,\r\n      enableFreeze: false,\r\n      freezeAuthority: '',\r\n      enableBurn: false,\r\n      burnAuthority: '',\r\n      enableTransfer: false,\r\n      transferAuthority: '',\r\n      enableUpdateDelegate: false,\r\n      updateDelegateAuthority: '',\r\n      enableAttributes: false,\r\n      attributes: [],\r\n      permanent: false,\r\n    },\r\n  });\r\n\r\n\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      form.setValue('owner', publicKey.toString());\r\n      form.setValue('updateAuthority', publicKey.toString());\r\n      form.setValue('freezeAuthority', publicKey.toString());\r\n      form.setValue('burnAuthority', publicKey.toString());\r\n      form.setValue('transferAuthority', publicKey.toString());\r\n      form.setValue('updateDelegateAuthority', publicKey.toString());\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = (address: string, type: 'address' | 'tx' = 'address') => {\r\n    const baseUrl = network === 'devnet'\r\n      ? `https://explorer.solana.com/${type}/`\r\n      : `https://solscan.io/${type === 'address' ? 'account' : 'tx'}/`;\r\n    window.open(\r\n      `${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n      '_blank'\r\n    );\r\n  };\r\n\r\n  // Attribute management\r\n  const addAttribute = () => {\r\n    const currentAttributes = form.getValues('attributes');\r\n    form.setValue('attributes', [\r\n      ...currentAttributes,\r\n      { key: \"\", value: \"\" }\r\n    ]);\r\n  };\r\n\r\n  const removeAttribute = (index: number) => {\r\n    const currentAttributes = form.getValues('attributes');\r\n    form.setValue('attributes', currentAttributes.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Main submission handler\r\n  const onSubmit = async (values: FormSchema) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('confirming');\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Creating Core Asset...\", { id: \"core-asset-launchpad\" });\r\n\r\n      // Initialize UMI with Core plugin\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity(wallet.adapter))\r\n        .use(mplCore());\r\n\r\n      let createResult;\r\n      let pluginSignatures: string[] = [];\r\n\r\n      if (values.assetType === 'collection') {\r\n        // Create Collection\r\n        const collectionSigner = generateSigner(umi);\r\n\r\n        createResult = await createCollectionV1(umi, {\r\n          collection: collectionSigner,\r\n          name: values.name,\r\n          uri: values.uri || \"\",\r\n          updateAuthority: values.updateAuthority ?\r\n            umiPublicKey(values.updateAuthority) :\r\n            umi.identity.publicKey,\r\n        }).sendAndConfirm(umi);\r\n\r\n        // Add plugins to collection if enabled\r\n        if (values.enableRoyalties) {\r\n          const royaltyResult = await addPluginV1(umi, {\r\n            asset: collectionSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'Royalties',\r\n              data: {\r\n                basisPoints: values.royaltyPercentage * 100,\r\n                creators: [{\r\n                  address: umi.identity.publicKey,\r\n                  percentage: 100,\r\n                }],\r\n                ruleSet: ruleSet('None'),\r\n              },\r\n            }),\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(royaltyResult.signature));\r\n        }\r\n\r\n        setResult({\r\n          asset: collectionSigner.publicKey.toString(),\r\n          collection: collectionSigner.publicKey.toString(),\r\n          transactionSignature: Buffer.from(createResult.signature).toString('base64'),\r\n          pluginSignatures,\r\n        });\r\n\r\n      } else {\r\n        // Create Asset\r\n        const assetSigner = generateSigner(umi);\r\n\r\n        const createAssetParams: any = {\r\n          asset: assetSigner,\r\n          name: values.name,\r\n          uri: values.uri || \"\",\r\n          owner: values.owner ?\r\n            umiPublicKey(values.owner) :\r\n            umi.identity.publicKey,\r\n          updateAuthority: values.updateAuthority ?\r\n            umiPublicKey(values.updateAuthority) :\r\n            umi.identity.publicKey,\r\n        };\r\n\r\n        // Add to collection if specified\r\n        if (values.collection) {\r\n          createAssetParams.collection = umiPublicKey(values.collection);\r\n        }\r\n\r\n        createResult = await createV1(umi, createAssetParams).sendAndConfirm(umi);\r\n\r\n        // Add plugins if enabled\r\n        if (values.enableRoyalties) {\r\n          const royaltyResult = await addPluginV1(umi, {\r\n            asset: assetSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'Royalties',\r\n              data: {\r\n                basisPoints: values.royaltyPercentage * 100,\r\n                creators: [{\r\n                  address: umi.identity.publicKey,\r\n                  percentage: 100,\r\n                }],\r\n                ruleSet: ruleSet('None'),\r\n              },\r\n            }),\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(royaltyResult.signature));\r\n        }\r\n\r\n        if (values.enableFreeze && values.freezeAuthority) {\r\n          const freezeResult = await addPluginV1(umi, {\r\n            asset: assetSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'FreezeDelegate',\r\n              data: {\r\n                frozen: false,\r\n              },\r\n            }),\r\n            initAuthority: {\r\n              __kind: 'Address',\r\n              address: umiPublicKey(values.freezeAuthority),\r\n            },\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(freezeResult.signature));\r\n        }\r\n\r\n        if (values.enableBurn && values.burnAuthority) {\r\n          const burnResult = await addPluginV1(umi, {\r\n            asset: assetSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'BurnDelegate',\r\n            }),\r\n            initAuthority: {\r\n              __kind: 'Address',\r\n              address: umiPublicKey(values.burnAuthority),\r\n            },\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(burnResult.signature));\r\n        }\r\n\r\n        if (values.enableTransfer && values.transferAuthority) {\r\n          const transferResult = await addPluginV1(umi, {\r\n            asset: assetSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'TransferDelegate',\r\n            }),\r\n            initAuthority: {\r\n              __kind: 'Address',\r\n              address: umiPublicKey(values.transferAuthority),\r\n            },\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(transferResult.signature));\r\n        }\r\n\r\n\r\n\r\n        if (values.enableAttributes && values.attributes.length > 0) {\r\n          const attributesResult = await addPluginV1(umi, {\r\n            asset: assetSigner.publicKey,\r\n            plugin: createPlugin({\r\n              type: 'Attributes',\r\n              data: {\r\n                attributeList: values.attributes.map(attr => ({\r\n                  key: attr.key,\r\n                  value: attr.value,\r\n                })),\r\n              },\r\n            }),\r\n          }).sendAndConfirm(umi);\r\n\r\n          pluginSignatures.push(formatSignature(attributesResult.signature));\r\n        }\r\n\r\n        setResult({\r\n          asset: assetSigner.publicKey.toString(),\r\n          collection: values.collection || undefined,\r\n          transactionSignature: Buffer.from(createResult.signature).toString('base64'),\r\n          pluginSignatures,\r\n        });\r\n      }\r\n\r\n      setCurrentStage('success');\r\n\r\n      toast.success(\"Core Asset created successfully!\", {\r\n        id: \"core-asset-launchpad\",\r\n        description: `${values.name}`\r\n      });\r\n\r\n      if (onAssetCreated) {\r\n        onAssetCreated({\r\n          asset: result?.asset || \"\",\r\n          collection: result?.collection,\r\n          transactionSignature: result?.transactionSignature || \"\",\r\n          pluginSignatures,\r\n        });\r\n      }\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error creating Core Asset:\", err);\r\n      setError(err.message || \"Failed to create Core Asset\");\r\n      setCurrentStage('error');\r\n\r\n      toast.error(\"Failed to create Core Asset\", {\r\n        id: \"core-asset-launchpad\",\r\n        description: err.message\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage('input');\r\n    setError(\"\");\r\n  };\r\n\r\n  // Render stages\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"text-center\">\r\n        <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\">\r\n          <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n        </div>\r\n        <h3 className=\"mt-2 text-lg font-semibold\">Core Asset Created Successfully!</h3>\r\n        <p className=\"text-muted-foreground\">Your Core Asset has been created with plugins</p>\r\n      </div>\r\n\r\n      {result && (\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <div className=\"space-y-3\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Asset Name</Label>\r\n                <p className=\"text-sm\">{form.getValues('name')}</p>\r\n              </div>\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Type</Label>\r\n                <p className=\"text-sm\">{form.getValues('assetType')}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label className=\"text-sm font-medium\">Asset Address</Label>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-sm font-mono\">\r\n                  {result.asset.slice(0, 8)}...{result.asset.slice(-8)}\r\n                </span>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => copyToClipboard(result.asset)}\r\n                >\r\n                  <Copy className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {result.collection && result.collection !== result.asset && (\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Collection</Label>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-sm font-mono\">\r\n                    {result.collection.slice(0, 8)}...{result.collection.slice(-8)}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(result.collection!)}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {result.pluginSignatures && result.pluginSignatures.length > 0 && (\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Plugins Added</Label>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {result.pluginSignatures.length} plugin(s) configured\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"flex gap-2 pt-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => viewInExplorer(result.asset)}\r\n                className=\"flex-1\"\r\n              >\r\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                View Asset\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => viewInExplorer(result.transactionSignature, 'tx')}\r\n                className=\"flex-1\"\r\n              >\r\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                View Transaction\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create Another Asset\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-6 w-6 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Creation Failed</h3>\r\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n        <p className=\"text-sm\">{error}</p>\r\n      </div>\r\n      <Button onClick={() => setCurrentStage('input')} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Creating Core Asset</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please confirm the transaction in your wallet...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        {/* Asset Type Selection */}\r\n        <FormField\r\n          control={form.control}\r\n          name=\"assetType\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Asset Type</FormLabel>\r\n              <FormControl>\r\n                <Tabs value={field.value} onValueChange={field.onChange}>\r\n                  <TabsList className=\"grid w-full grid-cols-2\">\r\n                    <TabsTrigger value=\"asset\">\r\n                      <Layers className=\"h-4 w-4 mr-2\" />\r\n                      Core Asset\r\n                    </TabsTrigger>\r\n                    <TabsTrigger value=\"collection\">\r\n                      <FileImage className=\"h-4 w-4 mr-2\" />\r\n                      Collection\r\n                    </TabsTrigger>\r\n                  </TabsList>\r\n                </Tabs>\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <Tabs value={activeFormTab} onValueChange={setActiveFormTab} className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\r\n            <TabsTrigger value=\"plugins\">Plugins</TabsTrigger>\r\n            <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"basic\" className=\"space-y-4\">\r\n            {/* Basic Information */}\r\n            <FormField\r\n              control={form.control}\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Name</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"My Core Asset\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            <FormField\r\n              control={form.control}\r\n              name=\"uri\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Metadata URI</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"https://example.com/metadata.json\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n\r\n            {form.watch('assetType') === 'asset' && (\r\n              <FormField\r\n                control={form.control}\r\n                name=\"collection\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Collection (Optional)</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Collection address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            )}\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"owner\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Owner</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Owner address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"updateAuthority\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Update Authority</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Update authority address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"plugins\" className=\"space-y-4\">\r\n            {/* Royalties Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Royalties Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableRoyalties\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableRoyalties') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"royaltyPercentage\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Royalty Percentage (%)</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"100\"\r\n                          step=\"0.1\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseFloat(e.target.value))}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Freeze Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Freeze Delegate Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableFreeze\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableFreeze') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"freezeAuthority\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Freeze Authority</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Freeze authority address\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Burn Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Burn Delegate Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableBurn\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableBurn') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"burnAuthority\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Burn Authority</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Burn authority address\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Transfer Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Transfer Delegate Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableTransfer\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableTransfer') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"transferAuthority\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Transfer Authority</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Transfer authority address\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"advanced\" className=\"space-y-4\">\r\n            {/* Attributes Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Attributes Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableAttributes\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableAttributes') && (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <Label>Attributes</Label>\r\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addAttribute}>\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Add Attribute\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {form.watch('attributes').map((_, index) => (\r\n                    <div key={index} className=\"grid grid-cols-2 gap-2 items-end\">\r\n                      <FormField\r\n                        control={form.control}\r\n                        name={`attributes.${index}.key`}\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Key</FormLabel>\r\n                            <FormControl>\r\n                              <Input placeholder=\"trait_type\" {...field} />\r\n                            </FormControl>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n\r\n                      <FormField\r\n                        control={form.control}\r\n                        name={`attributes.${index}.value`}\r\n                        render={({ field }) => (\r\n                          <FormItem>\r\n                            <FormLabel>Value</FormLabel>\r\n                            <div className=\"flex gap-2\">\r\n                              <FormControl>\r\n                                <Input placeholder=\"value\" {...field} />\r\n                              </FormControl>\r\n                              <Button\r\n                                type=\"button\"\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => removeAttribute(index)}\r\n                              >\r\n                                <X className=\"h-4 w-4\" />\r\n                              </Button>\r\n                            </div>\r\n                            <FormMessage />\r\n                          </FormItem>\r\n                        )}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Update Delegate Plugin */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label className=\"text-base font-semibold\">Update Delegate Plugin</Label>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"enableUpdateDelegate\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormControl>\r\n                        <Switch\r\n                          checked={field.value}\r\n                          onCheckedChange={field.onChange}\r\n                        />\r\n                      </FormControl>\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              {form.watch('enableUpdateDelegate') && (\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"updateDelegateAuthority\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Update Delegate Authority</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Update delegate authority address\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            {/* Permanent Setting */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"permanent\"\r\n                render={({ field }) => (\r\n                  <FormItem className=\"flex items-center space-x-2\">\r\n                    <FormControl>\r\n                      <Switch\r\n                        checked={field.value}\r\n                        onCheckedChange={field.onChange}\r\n                      />\r\n                    </FormControl>\r\n                    <div className=\"space-y-1 leading-none\">\r\n                      <Label>Permanent Asset</Label>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        Makes the asset immutable (cannot be updated or burned)\r\n                      </p>\r\n                    </div>\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Network Info */}\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n          <div className=\"flex justify-between items-center text-sm\">\r\n            <span>Network</span>\r\n            <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n              {network}\r\n            </Badge>\r\n          </div>\r\n          {connected && publicKey && (\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Wallet</span>\r\n              <span className=\"font-mono text-xs\">\r\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"pt-2\">\r\n          {!connected ? (\r\n            <ConnectWalletButton className=\"w-full\" />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"w-full\"\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Creating Core Asset...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Layers className=\"mr-2 h-4 w-4\" />\r\n                  Create Core Asset\r\n                </>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Core Asset Launchpad</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Layers className=\"h-6 w-6\" />\r\n          Core Asset Launchpad\r\n        </CardTitle>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          Create next-generation Core Assets with advanced plugin system\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/core-asset-launchpad.tsx"
    }
  ]
}