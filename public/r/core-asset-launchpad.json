{
    "name": "core-asset-launchpad",
    "description": "A comprehensive NFT launchpad component using Metaplex Core standard for creating next-generation digital assets with advanced metadata and collection support",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-core",
        "@metaplex-foundation/mpl-token-metadata",
        "react-hook-form",
        "@hookform/resolvers",
        "zod",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "textarea",
        "switch",
        "label",
        "badge",
        "alert",
        "tabs",
        "select",
        "dialog"
    ],
    "files": [
        {
            "name": "core-asset-launchpad.tsx",
            "content": "'use client';\n\n// React v√† hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertTitle,\n} from \"@/components/ui/alert\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { \n  Loader2, \n  ExternalLink, \n  CheckCircle, \n  Plus, \n  X, \n  Cpu, \n  Info,\n  AlertTriangle,\n  Upload,\n  Eye,\n  Copy\n} from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries for Core Assets\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplCore } from '@metaplex-foundation/mpl-core';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  some,\n  none,\n  percentAmount,\n} from '@metaplex-foundation/umi';\nimport {\n  createV1,\n  createCollectionV1,\n  pluginAuthorityPair,\n  ruleSet,\n} from '@metaplex-foundation/mpl-core';\n\n// Types and interfaces\ninterface CoreAssetResult {\n  assetAddress: string;\n  signature: string;\n  collectionAddress?: string;\n  assetType: string;\n}\n\ntype CoreAssetFormValues = {\n  // Asset Type\n  assetType: 'single' | 'collection';\n  \n  // Basic Info\n  name: string;\n  symbol: string;\n  uri: string;\n  description: string;\n  \n  // Collection (for single assets)\n  collectionAddress: string;\n  useExistingCollection: boolean;\n  \n  // Advanced Settings\n  royalties: number;\n  isMutable: boolean;\n  transferable: boolean;\n  \n  // Creators\n  creators: Array<{\n    address: string;\n    verified: boolean;\n    share: number;\n  }>;\n  \n  // Attributes (for single assets)\n  attributes: Array<{\n    trait_type: string;\n    value: string;\n  }>;\n  \n  // External URL\n  externalUrl: string;\n};\n\nexport interface CoreAssetLaunchpadProps {\n  collectionAddress?: string;\n  onAssetCreated?: (assetAddress: string, signature: string, assetType: string) => void;\n  className?: string;\n}\n\n// Form validation resolver\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate basic fields\n  if (!data.name?.trim()) {\n    errors.name = { type: \"required\", message: \"Name is required\" };\n  }\n\n  if (!data.symbol?.trim()) {\n    errors.symbol = { type: \"required\", message: \"Symbol is required\" };\n  }\n\n  if (!data.uri?.trim()) {\n    errors.uri = { type: \"required\", message: \"URI is required\" };\n  } else {\n    try {\n      new URL(data.uri);\n    } catch {\n      errors.uri = { type: \"pattern\", message: \"Invalid URI format\" };\n    }\n  }\n\n  // Validate collection address if using existing collection\n  if (data.useExistingCollection && data.assetType === 'single') {\n    if (!data.collectionAddress?.trim()) {\n      errors.collectionAddress = {\n        type: \"required\",\n        message: \"Collection address is required\"\n      };\n    } else {\n      try {\n        new PublicKey(data.collectionAddress);\n      } catch {\n        errors.collectionAddress = {\n          type: \"pattern\",\n          message: \"Invalid collection address format\"\n        };\n      }\n    }\n  }\n\n  // Validate royalties\n  if (data.royalties < 0 || data.royalties > 100) {\n    errors.royalties = {\n      type: \"range\",\n      message: \"Royalties must be between 0 and 100%\"\n    };\n  }\n\n  // Validate creators\n  if (data.creators?.length > 0) {\n    const totalShare = data.creators.reduce((sum: number, creator: any) => sum + (creator.share || 0), 0);\n    if (totalShare !== 100) {\n      errors.creators = {\n        type: \"sum\",\n        message: \"Creator shares must sum to 100%\"\n      };\n    }\n\n    data.creators.forEach((creator: any, index: number) => {\n      if (!creator.address?.trim()) {\n        errors[`creators.${index}.address`] = {\n          type: \"required\",\n          message: \"Creator address is required\"\n        };\n      } else {\n        try {\n          new PublicKey(creator.address);\n        } catch {\n          errors[`creators.${index}.address`] = {\n            type: \"pattern\",\n            message: \"Invalid creator address format\"\n          };\n        }\n      }\n\n      if (creator.share < 0 || creator.share > 100) {\n        errors[`creators.${index}.share`] = {\n          type: \"range\",\n          message: \"Creator share must be between 0 and 100\"\n        };\n      }\n    });\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors\n  };\n};\n\nexport default function CoreAssetLaunchpad({\n  collectionAddress: propCollectionAddress,\n  onAssetCreated,\n  className\n}: CoreAssetLaunchpadProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<CoreAssetResult | null>(null);\n  const [activeTab, setActiveTab] = useState('basic');\n\n  // Form setup\n  const form = useForm<CoreAssetFormValues>({\n    defaultValues: {\n      assetType: 'single',\n      name: \"\",\n      symbol: \"\",\n      uri: \"\",\n      description: \"\",\n      collectionAddress: propCollectionAddress || \"\",\n      useExistingCollection: !!propCollectionAddress,\n      royalties: 5,\n      isMutable: true,\n      transferable: true,\n      creators: [\n        {\n          address: \"\",\n          verified: true,\n          share: 100,\n        }\n      ],\n      attributes: [{ trait_type: \"\", value: \"\" }],\n      externalUrl: \"\",\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Effects\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Auto-fill creator address when wallet connects\n  useEffect(() => {\n    if (connected && publicKey && form.getValues(\"creators\")[0].address === \"\") {\n      const creators = form.getValues(\"creators\");\n      creators[0].address = publicKey.toString();\n      form.setValue(\"creators\", creators);\n    }\n  }, [connected, publicKey, form]);\n\n  // Submit handler\n  const onSubmit = async (values: CoreAssetFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage(\"confirming\");\n      setError(\"\");\n\n      toast.loading(\"Creating Core Asset...\", {\n        id: \"core-asset-create\",\n      });\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI with Core\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplCore());\n\n      let collectionAddress = values.collectionAddress;\n      let assetAddress: string;\n      let signature: string;\n\n      if (values.assetType === 'collection') {\n        // Create Collection\n        const collectionSigner = generateSigner(umi);\n\n        const createCollectionIx = createCollectionV1(umi, {\n          collection: collectionSigner,\n          name: values.name,\n          uri: values.uri,\n          plugins: [\n            pluginAuthorityPair({\n              type: 'Royalties',\n              data: {\n                basisPoints: values.royalties * 100,\n                creators: values.creators.map(creator => ({\n                  address: umiPublicKey(creator.address),\n                  percentage: creator.share,\n                })),\n                ruleSet: ruleSet('None'),\n              },\n            }),\n            ...(values.transferable ? [] : [\n              pluginAuthorityPair({\n                type: 'FreezeDelegate',\n                data: {\n                  frozen: true,\n                },\n              })\n            ]),\n          ],\n        });\n\n        const collectionResult = await createCollectionIx.sendAndConfirm(umi);\n        signature = typeof collectionResult.signature === 'string'\n          ? collectionResult.signature\n          : Buffer.from(collectionResult.signature).toString('base64');\n        \n        assetAddress = collectionSigner.publicKey.toString();\n        collectionAddress = assetAddress;\n\n      } else {\n        // Create Single Asset\n        const assetSigner = generateSigner(umi);\n\n        // Prepare plugins\n        const plugins = [\n          pluginAuthorityPair({\n            type: 'Royalties',\n            data: {\n              basisPoints: values.royalties * 100,\n              creators: values.creators.map(creator => ({\n                address: umiPublicKey(creator.address),\n                percentage: creator.share,\n              })),\n              ruleSet: ruleSet('None'),\n            },\n          }),\n        ];\n\n        // Add attributes if provided\n        if (values.attributes.some(attr => attr.trait_type && attr.value)) {\n          plugins.push(\n            pluginAuthorityPair({\n              type: 'Attributes',\n              data: {\n                attributeList: values.attributes\n                  .filter(attr => attr.trait_type && attr.value)\n                  .map(attr => ({\n                    key: attr.trait_type,\n                    value: attr.value,\n                  })),\n              },\n            })\n          );\n        }\n\n        // Add freeze delegate if not transferable\n        if (!values.transferable) {\n          plugins.push(\n            pluginAuthorityPair({\n              type: 'FreezeDelegate',\n              data: {\n                frozen: true,\n              },\n            })\n          );\n        }\n\n        const createAssetIx = createV1(umi, {\n          asset: assetSigner,\n          collection: values.useExistingCollection && collectionAddress\n            ? some(umiPublicKey(collectionAddress))\n            : none(),\n          name: values.name,\n          uri: values.uri,\n          plugins,\n        });\n\n        const assetResult = await createAssetIx.sendAndConfirm(umi);\n        signature = typeof assetResult.signature === 'string'\n          ? assetResult.signature\n          : Buffer.from(assetResult.signature).toString('base64');\n        \n        assetAddress = assetSigner.publicKey.toString();\n      }\n\n      setResult({\n        assetAddress,\n        signature,\n        collectionAddress: values.assetType === 'collection' ? assetAddress : collectionAddress,\n        assetType: values.assetType,\n      });\n\n      if (onAssetCreated) {\n        onAssetCreated(assetAddress, signature, values.assetType);\n      }\n\n      setCurrentStage(\"success\");\n\n      toast.success(`Core ${values.assetType} created successfully!`, {\n        id: \"core-asset-create\",\n        description: `${values.assetType === 'collection' ? 'Collection' : 'Asset'}: ${assetAddress.slice(0, 8)}...${assetAddress.slice(-8)}`,\n      });\n\n    } catch (err: any) {\n      console.error(\"Error creating core asset:\", err);\n\n      setCurrentStage(\"error\");\n      setError(err.message || \"An unknown error occurred\");\n\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction rejected\", {\n          id: \"core-asset-create\",\n          description: \"You have rejected the transaction\",\n        });\n      } else {\n        toast.error(\"Cannot create Core Asset\", {\n          id: \"core-asset-create\",\n          description: err.message,\n        });\n\n        if (err.message?.includes(\"failed to fetch\") ||\n          err.message?.includes(\"timeout\") ||\n          err.message?.includes(\"429\") ||\n          err.message?.includes(\"503\")) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Creator management\n  const addCreator = () => {\n    const currentCreators = form.getValues(\"creators\");\n    form.setValue(\"creators\", [\n      ...currentCreators,\n      { address: \"\", verified: true, share: 0 }\n    ]);\n  };\n\n  const removeCreator = (index: number) => {\n    const currentCreators = form.getValues(\"creators\");\n    if (currentCreators.length > 1) {\n      form.setValue(\"creators\", currentCreators.filter((_, i) => i !== index));\n    }\n  };\n\n  // Attribute management\n  const addAttribute = () => {\n    const currentAttributes = form.getValues(\"attributes\");\n    form.setValue(\"attributes\", [\n      ...currentAttributes,\n      { trait_type: \"\", value: \"\" }\n    ]);\n  };\n\n  const removeAttribute = (index: number) => {\n    const currentAttributes = form.getValues(\"attributes\");\n    if (currentAttributes.length > 1) {\n      form.setValue(\"attributes\", currentAttributes.filter((_, i) => i !== index));\n    }\n  };\n\n  // View functions\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/tx/\"\n        : \"https://solscan.io/tx/\";\n      window.open(\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const viewAsset = () => {\n    if (result?.assetAddress) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/address/\"\n        : \"https://solscan.io/account/\";\n      window.open(\n        `${baseUrl}${result.assetAddress}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(\"Copied to clipboard!\");\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n    setActiveTab(\"basic\");\n  };\n\n  // Render functions\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n            <TabsTrigger value=\"creators\">Creators</TabsTrigger>\n            <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"basic\" className=\"space-y-6 mt-6\">\n            {/* Asset Type Selection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Asset Type</h3>\n              <FormField\n                control={form.control}\n                name=\"assetType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div \n                          className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                            field.value === 'single' ? 'border-primary bg-primary/5' : 'border-border'\n                          }`}\n                          onClick={() => field.onChange('single')}\n                        >\n                          <Cpu className=\"h-6 w-6 mb-2\" />\n                          <h4 className=\"font-medium\">Single Asset</h4>\n                          <p className=\"text-sm text-muted-foreground\">Create a single Core NFT</p>\n                        </div>\n                        <div \n                          className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                            field.value === 'collection' ? 'border-primary bg-primary/5' : 'border-border'\n                          }`}\n                          onClick={() => field.onChange('collection')}\n                        >\n                          <Plus className=\"h-6 w-6 mb-2\" />\n                          <h4 className=\"font-medium\">Collection</h4>\n                          <p className=\"text-sm text-muted-foreground\">Create a Core collection</p>\n                        </div>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Basic Asset Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Asset Details</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"My Core Asset\" {...field} disabled={isSubmitting} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"symbol\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Symbol</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"CORE\" {...field} disabled={isSubmitting} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"royalties\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Royalties (%)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          step=\"0.1\"\n                          placeholder=\"5\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe your asset...\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"uri\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Metadata URI</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"https://example.com/metadata.json\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"externalUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>External URL (Optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"https://yourproject.com\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Collection Settings for Single Assets */}\n            {form.watch(\"assetType\") === \"single\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Collection Settings</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"useExistingCollection\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <Label>Add to Existing Collection</Label>\n                    </FormItem>\n                  )}\n                />\n\n                {form.watch(\"useExistingCollection\") && (\n                  <FormField\n                    control={form.control}\n                    name=\"collectionAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Collection Address</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Collection mint address\"\n                            {...field}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n            )}\n\n            {/* Attributes for Single Assets */}\n            {form.watch(\"assetType\") === \"single\" && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold\">Attributes</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addAttribute}\n                    disabled={isSubmitting}\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Attribute\n                  </Button>\n                </div>\n\n                {form.watch(\"attributes\").map((_, index) => (\n                  <div key={index} className=\"flex gap-2 items-end\">\n                    <FormField\n                      control={form.control}\n                      name={`attributes.${index}.trait_type`}\n                      render={({ field }) => (\n                        <FormItem className=\"flex-1\">\n                          <FormLabel>Trait</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Color\" {...field} disabled={isSubmitting} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name={`attributes.${index}.value`}\n                      render={({ field }) => (\n                        <FormItem className=\"flex-1\">\n                          <FormLabel>Value</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Blue\" {...field} disabled={isSubmitting} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeAttribute(index)}\n                      disabled={form.watch(\"attributes\").length === 1 || isSubmitting}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"creators\" className=\"space-y-6 mt-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">Creator Information</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addCreator}\n                  disabled={isSubmitting}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Creator\n                </Button>\n              </div>\n\n              {form.watch(\"creators\").map((_, index) => (\n                <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Creator {index + 1}</Label>\n                    {form.watch(\"creators\").length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeCreator(index)}\n                        disabled={isSubmitting}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name={`creators.${index}.address`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Creator wallet address\" {...field} disabled={isSubmitting} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name={`creators.${index}.share`}\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Share (%)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              disabled={isSubmitting}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name={`creators.${index}.verified`}\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center space-x-2 mt-8\">\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              disabled={isSubmitting}\n                            />\n                          </FormControl>\n                          <Label>Verified</Label>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"advanced\" className=\"space-y-6 mt-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Advanced Settings</h3>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"isMutable\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <Label>Mutable</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Allow metadata updates after creation\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"transferable\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <Label>Transferable</Label>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Allow asset transfers\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertTitle>Core Asset Features</AlertTitle>\n                <AlertDescription>\n                  Core assets support advanced features like plugins, royalties, and flexible transfer controls. \n                  These settings will be applied as plugins to your asset.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Submit Button */}\n        <div className=\"pt-6\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2 mb-4\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n            {connected && publicKey && (\n              <div className=\"flex justify-between items-center text-sm\">\n                <span>Wallet</span>\n                <span className=\"font-mono text-xs\">\n                  {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {!connected ? (\n            <ConnectWalletButton className=\"w-full\" />\n          ) : (\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                <>\n                  <Cpu className=\"mr-2 h-4 w-4\" />\n                  Create Core {form.watch(\"assetType\") === 'collection' ? 'Collection' : 'Asset'}\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Core {result?.assetType} has been created successfully\n        </p>\n      </div>\n\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">{result?.assetType === 'collection' ? 'Collection' : 'Asset'}:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.assetAddress?.slice(0, 8)}...{result?.assetAddress?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => copyToClipboard(result?.assetAddress || \"\")}\n            >\n              <Copy className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Transaction:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={viewExplorer}\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {result?.collectionAddress && result?.assetType === 'single' && (\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Collection:</span>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-mono\">\n                {result.collectionAddress.slice(0, 8)}...{result.collectionAddress.slice(-8)}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => copyToClipboard(result.collectionAddress || \"\")}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex gap-2\">\n        <Button onClick={viewAsset} variant=\"outline\" className=\"flex-1\">\n          <Eye className=\"h-4 w-4 mr-2\" />\n          View Asset\n        </Button>\n        <Button onClick={resetForm} className=\"flex-1\">\n          Create Another\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <X className=\"h-10 w-10 text-red-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\n        <p className=\"text-muted-foreground\">\n          Failed to create Core Asset\n        </p>\n      </div>\n\n      <div className=\"rounded-lg bg-red-50 p-4\">\n        <p className=\"text-sm text-red-600\">{error}</p>\n      </div>\n\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Core Asset</h3>\n      <p className=\"text-muted-foreground\">\n        Please wait while your Core Asset is being created...\n      </p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case \"success\":\n        return renderSuccess();\n      case \"error\":\n        return renderError();\n      case \"confirming\":\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Core Asset Launchpad</CardTitle>\n          <CardDescription>\n            Create next-generation NFTs using Metaplex Core standard\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Cpu className=\"h-5 w-5\" />\n              Core Asset Launchpad\n            </CardTitle>\n            <CardDescription>\n              Create next-generation NFTs using Metaplex Core standard\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {connected && publicKey && (\n              <Badge variant=\"outline\">\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n              </Badge>\n            )}\n            <Badge variant=\"outline\">{network}</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport { CoreAssetLaunchpad };"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Core",
    "tags": [
        "nft",
        "core",
        "metaplex",
        "solana",
        "form",
        "launchpad",
        "collection",
        "asset",
        "next-generation",
        "plugins",
        "royalties"
    ]
}