{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-pending-indicator",
  "type": "registry:block",
  "title": "Global indicator showing pending transactions in the UI.",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/murphy/Txn-Feedback/txn-pending-indicator.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Loader2, X } from \"lucide-react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface PendingTransaction {\r\n  id: string\r\n  signature?: string\r\n  description: string\r\n  startTime: number\r\n}\r\n\r\ninterface TxnPendingIndicatorProps {\r\n  transactions: PendingTransaction[]\r\n  onCancel?: (id: string) => void\r\n  position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\r\n  className?: string\r\n}\r\n\r\nexport function TxnPendingIndicator({\r\n  transactions,\r\n  onCancel,\r\n  position = \"bottom-right\",\r\n  className,\r\n}: TxnPendingIndicatorProps) {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (transactions.length === 0) {\r\n      setIsExpanded(false)\r\n    }\r\n  }, [transactions.length])\r\n\r\n  if (transactions.length === 0) return null\r\n\r\n  const positionClasses = {\r\n    \"top-left\": \"top-4 left-4\",\r\n    \"top-right\": \"top-4 right-4\",\r\n    \"bottom-left\": \"bottom-4 left-4\",\r\n    \"bottom-right\": \"bottom-4 right-4\",\r\n  }\r\n\r\n  const getElapsedTime = (startTime: number) => {\r\n    const elapsed = Math.floor((Date.now() - startTime) / 1000)\r\n    if (elapsed < 60) return `${elapsed}s`\r\n    return `${Math.floor(elapsed / 60)}m ${elapsed % 60}s`\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"fixed z-50 max-w-sm\", positionClasses[position], className)}>\r\n      {!isExpanded ? (\r\n        <Button onClick={() => setIsExpanded(true)} className=\"rounded-full shadow-lg\" size=\"sm\">\r\n          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n          {transactions.length} pending\r\n          <Badge variant=\"secondary\" className=\"ml-2\">\r\n            {transactions.length}\r\n          </Badge>\r\n        </Button>\r\n      ) : (\r\n        <div className=\"bg-white rounded-lg shadow-lg border p-4 min-w-[300px]\">\r\n          <div className=\"flex items-center justify-between mb-3\">\r\n            <h3 className=\"font-medium text-gray-900\">Pending Transactions</h3>\r\n            <Button size=\"sm\" variant=\"ghost\" onClick={() => setIsExpanded(false)} className=\"h-6 w-6 p-0\">\r\n              <X className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"space-y-2 max-h-60 overflow-y-auto\">\r\n            {transactions.map((tx) => (\r\n              <div key={tx.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\r\n                <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\r\n                  <Loader2 className=\"w-4 h-4 animate-spin text-blue-500 flex-shrink-0\" />\r\n                  <div className=\"min-w-0 flex-1\">\r\n                    <p className=\"text-sm font-medium text-gray-900 truncate\">{tx.description}</p>\r\n                    <p className=\"text-xs text-gray-500\">{getElapsedTime(tx.startTime)}</p>\r\n                  </div>\r\n                </div>\r\n                {onCancel && (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"ghost\"\r\n                    onClick={() => onCancel(tx.id)}\r\n                    className=\"h-6 w-6 p-0 ml-2 flex-shrink-0\"\r\n                  >\r\n                    <X className=\"w-3 h-3\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "components/ui/murphy/Txn-Feedback/txn-pending-indicator.tsx"
    }
  ]
}