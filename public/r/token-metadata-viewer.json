{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-metadata-viewer",
  "type": "registry:block",
  "title": "Token Metadata Viewer",
  "description": "View and fetch token metadata using Metaplex Token Metadata standard.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "badge"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-metadata-viewer.tsx",
      "content": "'use client';\r\n\r\n// React vÃ  hooks\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Solana\r\nimport { useConnection } from '@solana/wallet-adapter-react';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\n\r\n// Icons and notifications\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, Search, Info, Copy, XCircle, CheckCircle, Eye } from \"lucide-react\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Import Metaplex libraries\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { mplTokenMetadata, fetchMetadata, Metadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { publicKey } from '@metaplex-foundation/umi';\r\n\r\n// Types\r\ntype FormValues = {\r\n  mintAddress: string;\r\n};\r\n\r\nexport interface TokenMetadataViewerProps {\r\n  mintAddress?: string;\r\n  className?: string;\r\n}\r\n\r\n// Custom resolver for form validation\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n  if (!data.mintAddress) {\r\n    errors.mintAddress = { type: \"required\", message: \"Mint address is required\" };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.mintAddress);\r\n    } catch (e) {\r\n      errors.mintAddress = { type: \"pattern\", message: \"Invalid Solana address format\" };\r\n    }\r\n  }\r\n  return { values: Object.keys(errors).length === 0 ? data : {}, errors };\r\n};\r\n\r\nexport default function TokenMetadataViewer({\r\n  mintAddress: propMintAddress,\r\n  className\r\n}: TokenMetadataViewerProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [metadata, setMetadata] = useState<Metadata | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'loading' | 'success' | 'error'>('input');\r\n\r\n  // Form setup\r\n  const form = useForm<FormValues>({\r\n    defaultValues: { mintAddress: propMintAddress || \"\" },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    if (propMintAddress) {\r\n      onSubmit({ mintAddress: propMintAddress });\r\n    }\r\n  }, [propMintAddress]);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Submit handler\r\n  const onSubmit = async (values: FormValues) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('loading');\r\n      setError(null);\r\n      setMetadata(null);\r\n\r\n      toast.loading(\"Fetching token metadata...\", { id: \"fetch-metadata\" });\r\n\r\n      const umi = createUmi(connection.rpcEndpoint).use(mplTokenMetadata());\r\n      const mint = publicKey(values.mintAddress);\r\n\r\n      const fetchedMetadata = await fetchMetadata(umi, mint);\r\n\r\n      setMetadata(fetchedMetadata);\r\n      setCurrentStage('success');\r\n      toast.success(\"Metadata fetched successfully!\", { id: \"fetch-metadata\" });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error fetching metadata:\", err);\r\n      setError(err.message || \"An unknown error occurred\");\r\n      setCurrentStage('error');\r\n      toast.error(\"Failed to fetch metadata\", { id: \"fetch-metadata\", description: err.message });\r\n\r\n      if (err.message?.includes(\"failed to fetch\") ||\r\n        err.message?.includes(\"timeout\") ||\r\n        err.message?.includes(\"429\") ||\r\n        err.message?.includes(\"503\")) {\r\n        switchToNextEndpoint();\r\n      }\r\n    }\r\n    finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = (address: string) => {\r\n    const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/token/';\r\n    window.open(`${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.reset({ mintAddress: \"\" });\r\n    setMetadata(null);\r\n    setError(null);\r\n    setCurrentStage('input');\r\n  };\r\n\r\n  // Render functions\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"mintAddress\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <FormLabel>Token Mint Address</FormLabel>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter token mint address\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                The mint address of the token you want to view metadata for\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\r\n          {isSubmitting ? (\r\n            <>\r\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n              Fetching...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Search className=\"h-4 w-4 mr-2\" />\r\n              View Metadata\r\n            </>\r\n          )}\r\n        </Button>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderLoading = () => (\r\n    <div className=\"flex flex-col items-center justify-center p-6 space-y-4\">\r\n      <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\r\n      <p className=\"text-muted-foreground\">Fetching metadata...</p>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <XCircle className=\"h-10 w-10 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\r\n      <p className=\"text-muted-foreground\">Failed to fetch token metadata.</p>\r\n      <Alert>\r\n        <AlertDescription className=\"text-sm text-red-600 break-all\">\r\n          {error}\r\n        </AlertDescription>\r\n      </Alert>\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        <Search className=\"h-4 w-4 mr-2\" />\r\n        Search Another Token\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 flex items-center gap-3\">\r\n        <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n        <div>\r\n          <h4 className=\"font-semibold text-green-800\">Metadata Found</h4>\r\n          <p className=\"text-sm text-green-700\">Successfully fetched on-chain metadata for the token.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-3\">\r\n        {/* Basic Info */}\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\r\n          <h4 className=\"font-semibold flex items-center gap-2\">\r\n            <Info className=\"h-4 w-4\" />\r\n            Basic Information\r\n          </h4>\r\n\r\n          <div className=\"grid grid-cols-1 gap-3 text-sm\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Name</span>\r\n              <span className=\"font-medium\">{metadata?.name}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Symbol</span>\r\n              <span className=\"font-medium\">{metadata?.symbol}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Mint Address</span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"font-mono text-xs truncate max-w-[150px]\">{metadata?.publicKey}</span>\r\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(metadata?.publicKey.toString() || '')}>\r\n                  <Copy className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Update Authority</span>\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"font-mono text-xs truncate max-w-[150px]\">{metadata?.updateAuthority}</span>\r\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(metadata?.updateAuthority.toString() || '')}>\r\n                  <Copy className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Metadata Details */}\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\r\n          <h4 className=\"font-semibold\">Metadata Details</h4>\r\n\r\n          <div className=\"grid grid-cols-1 gap-3 text-sm\">\r\n            <div className=\"flex justify-between items-start\">\r\n              <span className=\"text-muted-foreground\">URI</span>\r\n              <a\r\n                href={metadata?.uri}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"text-primary hover:underline truncate max-w-[200px] text-right\"\r\n              >\r\n                {metadata?.uri}\r\n              </a>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Seller Fee Basis Points</span>\r\n              <span className=\"font-medium\">\r\n                {metadata?.sellerFeeBasisPoints} ({((metadata?.sellerFeeBasisPoints || 0) / 100).toFixed(2)}%)\r\n              </span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Primary Sale Happened</span>\r\n              <Badge variant={metadata?.primarySaleHappened ? \"default\" : \"secondary\"}>\r\n                {metadata?.primarySaleHappened ? 'Yes' : 'No'}\r\n              </Badge>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-muted-foreground\">Is Mutable</span>\r\n              <Badge variant={metadata?.isMutable ? \"default\" : \"secondary\"}>\r\n                {metadata?.isMutable ? 'Yes' : 'No'}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Collection Info */}\r\n        {metadata?.collection && (metadata.collection as any).value && (\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\r\n            <h4 className=\"font-semibold\">Collection</h4>\r\n            <div className=\"grid grid-cols-1 gap-3 text-sm\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-muted-foreground\">Address</span>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"font-mono text-xs truncate max-w-[150px]\">\r\n                    {(metadata.collection as any).value.key.toString()}\r\n                  </span>\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard((metadata.collection as any).value.key.toString())}>\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-muted-foreground\">Verified</span>\r\n                <Badge variant={(metadata.collection as any).value.verified ? \"default\" : \"secondary\"}>\r\n                  {(metadata.collection as any).value.verified ? 'Yes' : 'No'}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Creators */}\r\n        {metadata?.creators && 'value' in metadata.creators && metadata.creators.value && (\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-3\">\r\n            <h4 className=\"font-semibold\">Creators</h4>\r\n            <div className=\"space-y-3\">\r\n              {metadata.creators.value.map((creator, index) => (\r\n                <div key={index} className=\"border-t pt-3 first:border-t-0 first:pt-0\">\r\n                  <div className=\"grid grid-cols-1 gap-2 text-xs\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Address</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"font-mono truncate max-w-[120px]\">\r\n                          {creator.address.toString()}\r\n                        </span>\r\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => copyToClipboard(creator.address.toString())}>\r\n                          <Copy className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Share</span>\r\n                      <span className=\"font-medium\">{creator.share}%</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-muted-foreground\">Verified</span>\r\n                      <Badge variant={creator.verified ? \"default\" : \"secondary\"}>\r\n                        {creator.verified ? 'Yes' : 'No'}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 mt-6\">\r\n        <Button variant=\"outline\" onClick={() => viewInExplorer(metadata?.publicKey.toString() || '')} className=\"flex-1\">\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View in Explorer\r\n        </Button>\r\n        <Button onClick={resetForm} className=\"flex-1\">\r\n          <Search className=\"h-4 w-4 mr-2\" />\r\n          Search Another\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success': return renderSuccess();\r\n      case 'error': return renderError();\r\n      case 'loading': return renderLoading();\r\n      default: return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <Skeleton className=\"h-6 w-3/4\" />\r\n          <Skeleton className=\"h-4 w-1/2\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Skeleton className=\"h-16 w-full\" />\r\n          <Skeleton className=\"h-10 w-full mt-4\" />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Eye className=\"h-5 w-5\" />\r\n          Token Metadata Viewer\r\n        </CardTitle>\r\n        <CardDescription>\r\n          View on-chain metadata for any Solana token (fungible or NFT).\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { TokenMetadataViewer };",
      "type": "registry:component",
      "target": "components/ui/murphy/token-metadata-viewer.tsx"
    }
  ]
}