{
    "name": "update-collection-form",
    "description": "A Solana NFT collection update component with shadcn UI styling.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-token-metadata",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "badge",
        "dialog",
        "label"
    ],
    "files": [
        {
            "name": "update-collection-form.tsx",
            "content": "'use client';\n\n// React vÃ  hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, RefreshCw } from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex libraries\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata, updateNft, fetchMetadata } from '@metaplex-foundation/mpl-token-metadata';\nimport { publicKey } from '@metaplex-foundation/umi';\n\ninterface UpdateCollectionResult {\n  mint: string;\n  signature: string;\n}\n\ntype UpdateCollectionFormValues = {\n  collectionMint: string;\n  name: string;\n  uri: string;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate collection mint address\n  if (!data.collectionMint) {\n    errors.collectionMint = {\n      type: \"required\",\n      message: \"Collection mint address is required\",\n    };\n  } else {\n    try {\n      publicKey(data.collectionMint);\n    } catch (e) {\n      errors.collectionMint = {\n        type: \"pattern\",\n        message: \"Invalid Solana public key format\",\n      };\n    }\n  }\n\n  // Validate collection name\n  if (!data.name) {\n    errors.name = {\n      type: \"required\",\n      message: \"Collection name is required\",\n    };\n  }\n\n  // Validate metadata URI\n  if (!data.uri) {\n    errors.uri = {\n      type: \"required\",\n      message: \"URI metadata is required\",\n    };\n  } else {\n    try {\n      new URL(data.uri);\n    } catch (e) {\n      errors.uri = {\n        type: \"pattern\",\n        message: \"Invalid URI. Please enter a full URI including https://\",\n      };\n    }\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport default function UpdateCollectionForm({\n  collectionMint: propCollectionMint,\n  onCollectionUpdated,\n  className\n}: {\n  collectionMint?: string;\n  onCollectionUpdated?: (collectionMint: string) => void;\n  className?: string;\n}) {\n  const { connection } = useConnection();\n  const { publicKey: walletPublicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [result, setResult] = useState<UpdateCollectionResult | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n\n  const form = useForm<UpdateCollectionFormValues>({\n    defaultValues: {\n      collectionMint: propCollectionMint || \"\",\n      name: \"\",\n      uri: \"\",\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  useEffect(() => {\n    setMounted(true);\n    if (propCollectionMint) {\n      loadCollectionMetadata(propCollectionMint);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  const loadCollectionMetadata = async (mintAddress: string) => {\n    if (!mintAddress) return;\n\n    try {\n      setIsLoading(true);\n      const umi = createUmi(connection.rpcEndpoint).use(mplTokenMetadata());\n      const collectionPublicKey = publicKey(mintAddress);\n      const metadata = await fetchMetadata(umi, collectionPublicKey);\n\n      form.setValue('name', metadata.name);\n      form.setValue('uri', metadata.uri);\n\n      toast.success(\"Collection metadata loaded!\", {\n        description: `Found: ${metadata.name}`\n      });\n\n    } catch (err: any) {\n      console.error(\"Error loading metadata:\", err);\n      toast.error(\"Failed to load collection metadata\", {\n        description: err.message\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onSubmit = async (values: UpdateCollectionFormValues) => {\n    if (!connected || !walletPublicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      const walletAdapter = {\n        publicKey: walletPublicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplTokenMetadata());\n\n      toast.loading(\"Updating collection...\", { id: \"update-collection\" });\n\n      const collectionPublicKey = publicKey(values.collectionMint);\n      const updateResult = await updateNft(umi, {\n        mint: collectionPublicKey,\n        name: values.name,\n        uri: values.uri,\n      }).sendAndConfirm(umi);\n\n      const signatureStr = typeof updateResult.signature === 'string'\n        ? updateResult.signature\n        : Buffer.from(updateResult.signature).toString('base64');\n\n      setResult({\n        mint: values.collectionMint,\n        signature: signatureStr\n      });\n\n      if (onCollectionUpdated) {\n        onCollectionUpdated(values.collectionMint);\n      }\n\n      toast.success(\"Collection updated successfully!\", {\n        id: \"update-collection\",\n        description: `Mint: ${values.collectionMint.slice(0, 8)}...${values.collectionMint.slice(-8)}`\n      });\n\n    } catch (err: any) {\n      console.error(\"Error updating collection:\", err);\n      toast.error(\"Cannot update collection\", {\n        id: \"update-collection\",\n        description: err.message\n      });\n\n      if (err.message.includes('failed to fetch') ||\n        err.message.includes('timeout') ||\n        err.message.includes('429') ||\n        err.message.includes('503')) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const viewCollection = () => {\n    if (result?.mint) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/token/';\n      window.open(`${baseUrl}${result.mint}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const resetForm = () => {\n    form.reset({ collectionMint: \"\", name: \"\", uri: \"\" });\n    setResult(null);\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Update Collection</CardTitle>\n          <CardDescription>Update an existing NFT collection on Solana</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Collection Updated!</h3>\n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Mint Address:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">{result?.mint}</div>\n      </div>\n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">{result?.signature}</div>\n      </div>\n      <div className=\"flex gap-2 mt-4\">\n        <Button variant=\"outline\" onClick={viewCollection} className=\"flex-1\"><ExternalLink className=\"h-4 w-4 mr-2\" />View Collection</Button>\n        <Button variant=\"outline\" onClick={viewExplorer} className=\"flex-1\"><ExternalLink className=\"h-4 w-4 mr-2\" />View Transaction</Button>\n      </div>\n      <Button onClick={resetForm} className=\"w-full\"><RefreshCw className=\"h-4 w-4 mr-2\" />Update Another Collection</Button>\n    </div>\n  );\n\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"collectionMint\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Collection Mint Address</FormLabel>\n                {field.value && !propCollectionMint && (\n                  <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => loadCollectionMetadata(field.value)} disabled={isLoading}>\n                    {isLoading ? <Loader2 className=\"h-4 w-4 animate-spin mr-1\" /> : <RefreshCw className=\"h-4 w-4 mr-1\" />}Load\n                  </Button>\n                )}\n              </div>\n              <FormControl>\n                <Input placeholder=\"Enter collection mint address\" {...field} disabled={isSubmitting || !!propCollectionMint} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">The mint address of the collection NFT you want to update</p>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>Collection Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"My updated collection\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">Enter the new name for your NFT collection</p>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"uri\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <FormLabel>URI Metadata</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/my-updated-collection.json\" {...field} disabled={isSubmitting} className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\" />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">URI to updated metadata JSON according to Metaplex standards</p>\n            </FormItem>\n          )}\n        />\n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>{network}</Badge>\n            </div>\n          </div>\n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting || isLoading}>\n                {isSubmitting ? <><Loader2 className=\"h-4 w-4 animate-spin mr-2\" />Updating...</> : \"Update Collection\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Update Collection</span>\n          {connected && walletPublicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">{walletPublicKey.toString().slice(0, 4)}...{walletPublicKey.toString().slice(-4)}</Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Update an existing NFT collection on Solana</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {result ? renderSuccess() : renderForm()}\n      </CardContent>\n    </Card>\n  );\n}\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Token-Metadata",
    "tags": [
        "nft",
        "collection",
        "update",
        "metaplex",
        "token-metadata",
        "solana",
        "form"
    ]
}