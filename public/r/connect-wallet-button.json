{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "connect-wallet-button",
  "type": "registry:block",
  "title": "Connect Wallet Button",
  "description": "A simple connect wallet button component.",
  "dependencies": [
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-base",
    "@lazorkit/wallet"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "collapsible",
    "dropdown-menu",
    "tabs"
  ],
  "files": [
    {
      "path": "components/ui/murphy/connect-wallet-button.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { type FC, useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { useWallet } from \"@solana/wallet-adapter-react\"\r\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\"\r\nimport { useWalletMultiButton } from \"@/hook/murphy/use-walletMultiButton\"\r\nimport { Button } from \"../button\"\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\"\r\nimport { useLazorKitWalletContext } from \"@/components/providers/lazorkit-wallet-context\"\r\n\r\nimport { Dialog, DialogClose, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"../dialog\"\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"../collapsible\"\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"../dropdown-menu\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../tabs\"\r\n// ----- Label Constants -----\r\nconst LABELS = {\r\n  \"change-wallet\": \"Change Wallet\",\r\n  connecting: \"Connecting...\",\r\n  \"copy-address\": \"Copy Address\",\r\n  copied: \"Copied\",\r\n  disconnect: \"Disconnect\",\r\n  \"has-wallet\": \"Connect Wallet\",\r\n  \"no-wallet\": \"Select Wallet\",\r\n  \"lazorkit-wallet\": \"Connect Passkey\",\r\n  \"standard-wallet\": \"Standard Wallet\",\r\n} as const\r\n\r\n// ----- Props -----\r\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\r\n  labels?: Partial<typeof LABELS>\r\n  asChild?: boolean\r\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\r\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\r\n}\r\n\r\ntype Props = WalletButtonProps\r\n\r\nexport interface WalletListItemProps {\r\n  handleClick: React.MouseEventHandler<HTMLButtonElement>\r\n  tabIndex?: number\r\n  wallet: {\r\n    adapter: {\r\n      name: string\r\n      icon?: string\r\n    }\r\n    readyState: WalletReadyState\r\n  }\r\n}\r\n\r\n// ----- Wallet List Item -----\r\nexport const WalletListItem: FC<WalletListItemProps> = ({ handleClick, tabIndex, wallet }) => (\r\n  <Button onClick={handleClick} tabIndex={tabIndex} variant=\"outline\" className=\"justify-start w-full\">\r\n    {wallet.adapter.icon && (\r\n      <img\r\n        src={wallet.adapter.icon || \"/placeholder.svg\"}\r\n        alt={`${wallet.adapter.name} icon`}\r\n        className=\"mr-2 h-5 w-5\"\r\n      />\r\n    )}\r\n    {wallet.adapter.name}\r\n    {wallet.readyState === WalletReadyState.Installed && (\r\n      <span className=\"ml-auto text-xs text-green-500\">Installed</span>\r\n    )}\r\n  </Button>\r\n)\r\n\r\n// ----- Enhanced Wallet Modal Component -----\r\nexport const EnhancedWalletModal: FC<{\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n}> = ({ open, onOpenChange }) => {\r\n  const { wallets, select } = useWallet()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const { connect: connectLazorKit, disconnect: disconnectLazorKit, isLoading: isLoadingLazorKit, isConnected: isLazorKitConnected, smartWalletAuthorityPubkey } = useLazorKitWalletContext()\r\n\r\n  // Access the modal context to get network information\r\n  const modalContext = React.useContext(ModalContext)\r\n  const isMainnet = modalContext?.isMainnet ?? true\r\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\r\n\r\n  const [listedWallets, collapsedWallets] = useMemo(() => {\r\n    const installed = wallets.filter((w) => w.readyState === WalletReadyState.Installed)\r\n    const notInstalled = wallets.filter((w) => w.readyState !== WalletReadyState.Installed)\r\n    return installed.length ? [installed, notInstalled] : [notInstalled, []]\r\n  }, [wallets])\r\n\r\n  const handleWalletClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\r\n      event.preventDefault()\r\n      select(walletName as WalletName)\r\n      setWalletType('standard')\r\n      onOpenChange(false)\r\n    },\r\n    [select, onOpenChange, setWalletType],\r\n  )\r\n\r\n  const handleLazorKitConnect = useCallback(async () => {\r\n    try {\r\n      await connectLazorKit()\r\n      setWalletType('lazorkit')\r\n      onOpenChange(false)\r\n    } catch (error) {\r\n      console.error(\"LazorKit connection error:\", error)\r\n    }\r\n  }, [connectLazorKit, onOpenChange, setWalletType])\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle>Connect wallet to continue</DialogTitle>\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            Network:{\" \"}\r\n            <span className={isMainnet ? \"text-green-500\" : \"text-yellow-500\"}>{isMainnet ? \"Mainnet\" : \"Devnet\"}</span>\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        <Tabs defaultValue=\"standard\" className=\"w-full mt-2\">\r\n          <TabsList className=\"grid w-full grid-cols-2\">\r\n            <TabsTrigger value=\"standard\">{LABELS[\"standard-wallet\"]}</TabsTrigger>\r\n            <TabsTrigger value=\"lazorkit\">{LABELS[\"lazorkit-wallet\"]}</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"standard\" className=\"mt-2\">\r\n            <div className=\"flex flex-col gap-2 py-2\">\r\n              {listedWallets.map((wallet) => (\r\n                <WalletListItem\r\n                  key={wallet.adapter.name}\r\n                  wallet={wallet}\r\n                  handleClick={(e) => handleWalletClick(e, wallet.adapter.name)}\r\n                />\r\n              ))}\r\n\r\n              {collapsedWallets.length > 0 && (\r\n                <Collapsible open={expanded} onOpenChange={setExpanded} className=\"w-full\">\r\n                  <CollapsibleTrigger asChild>\r\n                    <Button variant=\"ghost\" className=\"w-full justify-between\">\r\n                      {expanded ? \"Hide options\" : \"Show more options\"}\r\n                    </Button>\r\n                  </CollapsibleTrigger>\r\n                  <CollapsibleContent className=\"space-y-2 mt-2\">\r\n                    {collapsedWallets.map((wallet) => (\r\n                      <WalletListItem\r\n                        key={wallet.adapter.name}\r\n                        wallet={wallet}\r\n                        handleClick={(e) => handleWalletClick(e, wallet.adapter.name)}\r\n                      />\r\n                    ))}\r\n                  </CollapsibleContent>\r\n                </Collapsible>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"lazorkit\" className=\"mt-2\">\r\n            <div className=\"flex flex-col gap-4 py-2\">\r\n              <DialogDescription>\r\n                LazorKit Wallet provides a way to integrate Solana smart wallet with Passkey support into your dApp.\r\n              </DialogDescription>\r\n              <Button \r\n                onClick={handleLazorKitConnect} \r\n                disabled={isLoadingLazorKit}\r\n                className=\"w-full\"\r\n              >\r\n                {isLoadingLazorKit \r\n                  ? \"Connecting...\" \r\n                  : \"Connect with Passkey\"}\r\n              </Button>\r\n              \r\n              {/* Display wallet information if connected */}\r\n              {isLazorKitConnected && (\r\n                <div className=\"mt-2 text-sm\">\r\n                  <p className=\"text-green-500\">Connected</p>\r\n                  <p className=\"font-mono break-all\">{smartWalletAuthorityPubkey || \"No address\"}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <DialogClose asChild>\r\n          <Button variant=\"outline\" className=\"w-full mt-4\">\r\n            Close\r\n          </Button>\r\n        </DialogClose>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\n// ----- Wallet Multi Button -----\r\nexport function BaseWalletMultiButton({ children, labels = LABELS, ...props }: Props) {\r\n  // State hooks\r\n  const [walletModalOpen, setWalletModalOpen] = useState(false)\r\n  const [copied, setCopied] = useState(false)\r\n  const [menuOpen, setMenuOpen] = useState(false)\r\n  const [mounted, setMounted] = useState(false)\r\n\r\n  // Context hooks\r\n  const { buttonState, onConnect, onDisconnect, publicKey, walletIcon, walletName } = useWalletMultiButton({\r\n    onSelectWallet() {\r\n      setWalletModalOpen(true)\r\n    },\r\n  })\r\n  \r\n  const { connect: connectLazorKit, disconnect: disconnectLazorKit, isLoading: isLoadingLazorKit, isConnected: isLazorKitConnected, smartWalletAuthorityPubkey } = useLazorKitWalletContext()\r\n  \r\n  const modalContext = React.useContext(ModalContext)\r\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\r\n\r\n  // All useMemo must be declared here\r\n  const isAnyWalletConnected = useMemo(() => {\r\n    if (walletType === 'standard') {\r\n      return !!publicKey\r\n    } else {\r\n      // Only check isConnected, not dependent on smartWalletAuthorityPubkey\r\n      return isLazorKitConnected\r\n    }\r\n  }, [publicKey, isLazorKitConnected, walletType])\r\n\r\n  const content = useMemo(() => {\r\n    // Before component is mounted, always use \"Select Wallet\" to match SSR\r\n    if (!mounted) {\r\n      return labels[\"no-wallet\"]\r\n    }\r\n\r\n    // When connected to LazorKit, show LazorKit address or public key\r\n    if (walletType === 'lazorkit' && isLazorKitConnected) {\r\n      const address = smartWalletAuthorityPubkey || (publicKey ? publicKey.toBase58() : null)\r\n      return address ? address.slice(0, 4) + \"..\" + address.slice(-4) : \"Connected\"\r\n    }\r\n    \r\n    // When connected to standard wallet, show address\r\n    if (walletType === 'standard' && publicKey) {\r\n      const base58 = publicKey.toBase58()\r\n      return base58.slice(0, 4) + \"..\" + base58.slice(-4)\r\n    }\r\n\r\n    // When not connected, prioritize custom children text\r\n    if (children) {\r\n      return children\r\n    } else if (buttonState === \"connecting\") {\r\n      return labels[\"connecting\"]\r\n    } else {\r\n      return labels[\"has-wallet\"]\r\n    }\r\n  }, [buttonState, children, labels, publicKey, mounted, walletType, isLazorKitConnected, smartWalletAuthorityPubkey])\r\n\r\n  const currentWalletAddress = useMemo(() => {\r\n    if (walletType === 'lazorkit' && smartWalletAuthorityPubkey) {\r\n      return smartWalletAuthorityPubkey\r\n    } else if (walletType === 'standard' && publicKey) {\r\n      return publicKey.toBase58()\r\n    }\r\n    return \"\"\r\n  }, [walletType, smartWalletAuthorityPubkey, publicKey])\r\n\r\n  // useEffect hooks\r\n  useEffect(() => {\r\n    setMounted(true)\r\n  }, [])\r\n\r\n  // Handler functions\r\n  const handleDisconnect = () => {\r\n    if (walletType === 'lazorkit') {\r\n      disconnectLazorKit()\r\n      console.log('LazorKit Wallet disconnected')\r\n    } else if (onDisconnect) {\r\n      onDisconnect()\r\n    }\r\n    setMenuOpen(false)\r\n  }\r\n\r\n  // Render logic after declaring all hooks\r\n  if (!isAnyWalletConnected) {\r\n    return (\r\n      <>\r\n        <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\r\n        <Button\r\n          {...props}\r\n          onClick={() => {\r\n            if (buttonState === \"has-wallet\" && onConnect) {\r\n              onConnect()\r\n            } else {\r\n              setWalletModalOpen(true)\r\n            }\r\n          }}\r\n        >\r\n          {content}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  // If connected, show the dropdown menu\r\n  return (\r\n    <>\r\n      <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\r\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button {...props}>\r\n            {walletType === 'standard' && walletIcon && (\r\n              <img src={walletIcon || \"/partner/solana-logo.svg\"} alt=\"Wallet icon\" className=\"mr-2 h-4 w-4\" />\r\n            )}\r\n            {walletType === 'lazorkit' && (\r\n              <img src=\"/partner/solana-logo.svg\" alt=\"LazorKit Wallet\" className=\"mr-2 h-4 w-4\" />\r\n            )}\r\n            {content}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent>\r\n          {currentWalletAddress && (\r\n            <DropdownMenuItem\r\n              onClick={async () => {\r\n                await navigator.clipboard.writeText(currentWalletAddress)\r\n                setCopied(true)\r\n                setTimeout(() => setCopied(false), 400)\r\n              }}\r\n            >\r\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\r\n            </DropdownMenuItem>\r\n          )}\r\n          <DropdownMenuItem\r\n            onClick={() => {\r\n              setWalletModalOpen(true)\r\n              setMenuOpen(false)\r\n            }}\r\n          >\r\n            {labels[\"change-wallet\"]}\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={handleDisconnect}>\r\n            {labels[\"disconnect\"]}\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </>\r\n  )\r\n}\r\n\r\n// ----- Public Exported Button -----\r\nexport function ConnectWalletButton(props: WalletButtonProps) {\r\n  return <BaseWalletMultiButton {...props} />\r\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/connect-wallet-button.tsx"
    },
    {
      "path": "components/providers/wallet-provider.tsx",
      "content": "import React, { useState, useMemo, createContext, useCallback } from \"react\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport type { Adapter } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  WalletProvider as SolanaWalletProvider,\r\n  ConnectionProvider as SolanaConnectionProvider,\r\n  ConnectionProviderProps,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-wallets\";\r\nimport { TxnSettingsProvider } from \"@/components/ui/murphy/txn-settings\";\r\nimport { LazorKitWalletProvider } from \"./lazorkit-wallet-context\";\r\n\r\n// Import wallet adapter CSS\r\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\r\n\r\n// Create wrapper components\r\n// @ts-ignore - Ignore React 19 compatibility error\r\nconst ConnectionProviderWrapper = (props: ConnectionProviderProps) => (\r\n  <SolanaConnectionProvider {...props} />\r\n);\r\n// @ts-ignore - Ignore React 19 compatibility error\r\nconst WalletProviderWrapper = (props: any) => (\r\n  <SolanaWalletProvider {...props} />\r\n);\r\n\r\ninterface WalletProviderProps {\r\n  children: React.ReactNode;\r\n  network?: WalletAdapterNetwork;\r\n  endpoint?: string;\r\n  wallets?: Adapter[];\r\n  autoConnect?: boolean;\r\n}\r\n\r\ninterface ModalContextState {\r\n  isOpen: boolean;\r\n  setIsOpen: (open: boolean) => void;\r\n  endpoint?: string;\r\n  switchToNextEndpoint: () => void;\r\n  availableEndpoints: string[];\r\n  currentEndpointIndex: number;\r\n  isMainnet: boolean;\r\n  walletType: 'standard' | 'lazorkit';\r\n  setWalletType: (type: 'standard' | 'lazorkit') => void;\r\n}\r\n\r\nexport const ModalContext = createContext<ModalContextState>({\r\n  isOpen: false,\r\n  setIsOpen: () => null,\r\n  endpoint: undefined,\r\n  switchToNextEndpoint: () => null,\r\n  availableEndpoints: [],\r\n  currentEndpointIndex: 0,\r\n  isMainnet: true,\r\n  walletType: 'standard',\r\n  setWalletType: () => null,\r\n});\r\n\r\nexport const WalletProvider = ({ children, ...props }: WalletProviderProps) => {\r\n  // Add state to store endpoints and current endpoint\r\n  const [currentEndpointIndex, setCurrentEndpointIndex] = useState(0);\r\n\r\n  // Determine if we're using mainnet or devnet based on environment variable\r\n  const isMainnet = useMemo(() => {\r\n    const mainnetEnv = process.env.NEXT_PUBLIC_USE_MAINNET;\r\n    return mainnetEnv === undefined ? true : mainnetEnv === \"true\";\r\n  }, []);\r\n\r\n  // Network type based on the environment variable\r\n  const networkType = useMemo(\r\n    () =>\r\n      isMainnet ? WalletAdapterNetwork.Mainnet : WalletAdapterNetwork.Devnet,\r\n    [isMainnet]\r\n  );\r\n\r\n  // List of public RPC endpoints based on network type\r\n  const publicRPCs = useMemo(\r\n    () => [\r\n      isMainnet\r\n        ? (process.env.NEXT_PUBLIC_SOLANA_RPC_URL as string)\r\n        : (process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET as string),\r\n    ],\r\n    [isMainnet]\r\n  );\r\n\r\n  const defaultNetwork = useMemo(\r\n    () => props.network || networkType,\r\n    [props.network, networkType]\r\n  );\r\n\r\n  // Provided endpoint will be prioritized, otherwise use the current endpoint from the list\r\n  const endpoint = useMemo(() => {\r\n    if (props.endpoint) {\r\n      return props.endpoint;\r\n    }\r\n    return publicRPCs[currentEndpointIndex];\r\n  }, [props.endpoint, publicRPCs, currentEndpointIndex]);\r\n\r\n  // Function to switch to the next endpoint when an error occurs\r\n  const switchToNextEndpoint = useCallback(() => {\r\n    setCurrentEndpointIndex((prevIndex) => {\r\n      const nextIndex = (prevIndex + 1) % publicRPCs.length;\r\n      console.log(\r\n        `Switching RPC endpoint from ${publicRPCs[prevIndex]} to ${publicRPCs[nextIndex]}`\r\n      );\r\n      return nextIndex;\r\n    });\r\n  }, [publicRPCs]);\r\n\r\n  const wallets = useMemo(\r\n    () => props.wallets || [new PhantomWalletAdapter()],\r\n    [props.wallets]\r\n  );\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [walletType, setWalletType] = useState<'standard' | 'lazorkit'>('standard');\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        isOpen,\r\n        setIsOpen,\r\n        endpoint,\r\n        switchToNextEndpoint,\r\n        availableEndpoints: publicRPCs,\r\n        currentEndpointIndex,\r\n        isMainnet,\r\n        walletType,\r\n        setWalletType,\r\n      }}\r\n    >\r\n      <ConnectionProviderWrapper endpoint={endpoint}>\r\n        <WalletProviderWrapper wallets={wallets} autoConnect>\r\n          <WalletModalProvider>\r\n            <LazorKitWalletProvider>\r\n              <TxnSettingsProvider>{children}</TxnSettingsProvider>\r\n            </LazorKitWalletProvider>\r\n          </WalletModalProvider>\r\n        </WalletProviderWrapper>\r\n      </ConnectionProviderWrapper>\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n",
      "type": "registry:component",
      "target": "components/providers/wallet-provider.tsx"
    },
    {
      "path": "hook/murphy/use-walletMultiButton.ts",
      "content": "import { useWallet, type Wallet } from '@solana/wallet-adapter-react';\r\nimport type { PublicKey } from '@solana/web3.js';\r\nimport { useCallback } from 'react';\r\n\r\ntype ButtonState = {\r\n    buttonState: 'connecting' | 'connected' | 'disconnecting' | 'has-wallet' | 'no-wallet';\r\n    onConnect?: () => void;\r\n    onDisconnect?: () => void;\r\n    onSelectWallet?: () => void;\r\n    publicKey?: PublicKey;\r\n    walletIcon?: Wallet['adapter']['icon'];\r\n    walletName?: Wallet['adapter']['name'];\r\n};\r\n\r\ntype Config = {\r\n    onSelectWallet: (config: {\r\n        onSelectWallet: (walletName: Wallet['adapter']['name']) => void;\r\n        wallets: Wallet[];\r\n    }) => void;\r\n};\r\n\r\nexport function useWalletMultiButton({ onSelectWallet }: Config): ButtonState {\r\n    const { connect, connected, connecting, disconnect, disconnecting, publicKey, select, wallet, wallets } =\r\n        useWallet();\r\n    let buttonState: ButtonState['buttonState'];\r\n    if (connecting) {\r\n        buttonState = 'connecting';\r\n    } else if (connected) {\r\n        buttonState = 'connected';\r\n    } else if (disconnecting) {\r\n        buttonState = 'disconnecting';\r\n    } else if (wallet) {\r\n        buttonState = 'has-wallet';\r\n    } else {\r\n        buttonState = 'no-wallet';\r\n    }\r\n    const handleConnect = useCallback(() => {\r\n        connect().catch(() => {\r\n        });\r\n    }, [connect]);\r\n    const handleDisconnect = useCallback(() => {\r\n        disconnect().catch(() => {\r\n        });\r\n    }, [disconnect]);\r\n    const handleSelectWallet = useCallback(() => {\r\n        onSelectWallet({ onSelectWallet: select, wallets });\r\n    }, [onSelectWallet, select, wallets]);\r\n    return {\r\n        buttonState,\r\n        onConnect: buttonState === 'has-wallet' ? handleConnect : undefined,\r\n        onDisconnect: buttonState !== 'disconnecting' && buttonState !== 'no-wallet' ? handleDisconnect : undefined,\r\n        onSelectWallet: handleSelectWallet,\r\n        publicKey: publicKey ?? undefined,\r\n        walletIcon: wallet?.adapter.icon,\r\n        walletName: wallet?.adapter.name,\r\n    };\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletMultiButton.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "components/providers/lazorkit-wallet-context.tsx",
      "content": "// components/providers/lazorkit-wallet-context.tsx\r\n\"use client\"\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from \"react\"\r\nimport dynamic from \"next/dynamic\"\r\n\r\n// Interface for context\r\ninterface LazorKitWalletContextState {\r\n  isConnected: boolean\r\n  isLoading: boolean\r\n  publicKey: string | null\r\n  smartWalletAuthorityPubkey: string | null\r\n  error: string | null\r\n  credentialId?: string | null\r\n  connect: () => Promise<void>\r\n  disconnect: () => void\r\n  signMessage: (instruction: any) => Promise<string>\r\n}\r\n\r\n// Create context with default values\r\nexport const LazorKitWalletContext = createContext<LazorKitWalletContextState>({\r\n  isConnected: false,\r\n  isLoading: false,\r\n  publicKey: null,\r\n  smartWalletAuthorityPubkey: null,\r\n  error: null,\r\n  credentialId: null,\r\n  connect: async () => {},\r\n  disconnect: () => {},\r\n  signMessage: async () => \"\",\r\n})\r\n\r\n// Export hook to use context\r\nexport const useLazorKitWalletContext = () => useContext(LazorKitWalletContext)\r\n\r\n// Client-only component\r\nconst LazorKitWalletProviderClient = dynamic(() => import('./client-lazorkit-provider').then(mod => mod.ClientLazorKitProvider), {\r\n  ssr: false\r\n})\r\n\r\n// Provider Component\r\nexport function LazorKitWalletProvider({ children }: { children: React.ReactNode }) {\r\n  return <LazorKitWalletProviderClient>{children}</LazorKitWalletProviderClient>\r\n}",
      "type": "registry:component",
      "target": "components/providers/lazorkit-wallet-context.tsx"
    },
    {
      "path": "components/providers/client-lazorkit-provider.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useEffect } from \"react\"\r\nimport { useWallet } from \"@lazorkit/wallet\"\r\nimport { LazorKitWalletContext } from \"./lazorkit-wallet-context\"\r\n\r\nexport function ClientLazorKitProvider({ children }: { children: React.ReactNode }) {\r\n  const walletState = useWallet()\r\n  \r\n  return (\r\n    <LazorKitWalletContext.Provider value={walletState}>\r\n      {children}\r\n    </LazorKitWalletContext.Provider>\r\n  )\r\n}",
      "type": "registry:component",
      "target": "components/providers/client-lazorkit-provider.tsx"
    }
  ]
}