{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "connect-wallet-button",
  "type": "registry:block",
  "title": "Connect Wallet Button",
  "description": "A simple connect wallet button component.",
  "dependencies": [
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-base",
    "@lazorkit/wallet"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "collapsible",
    "dropdown-menu",
    "tabs"
  ],
  "files": [
    {
      "path": "components/ui/murphy/connect-wallet-button.tsx",
      "content": "\"use client\"\n\nimport React, { type FC, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useWallet } from \"@solana/wallet-adapter-react\"\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\"\nimport { useWalletMultiButton } from \"@/hook/murphy/use-walletMultiButton\"\nimport { Button } from \"../button\"\nimport { ModalContext } from \"@/components/providers/wallet-provider\"\nimport { useLazorKitWalletContext } from \"@/components/providers/lazorkit-wallet-context\"\nimport { PublicKey } from \"@solana/web3.js\"\n\nimport { Dialog, DialogClose, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"../dialog\"\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"../collapsible\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"../dropdown-menu\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../tabs\"\nimport { Badge } from \"../badge\"\nimport { Loader2, Key, ChevronDown } from \"lucide-react\"\n\n// Constants\nconst LABELS = {\n  \"change-wallet\": \"Change Wallet\",\n  connecting: \"Connecting...\",\n  \"copy-address\": \"Copy Address\",\n  copied: \"Copied\",\n  disconnect: \"Disconnect\",\n  \"has-wallet\": \"Connect Wallet\",\n  \"no-wallet\": \"Select Wallet\",\n  \"lazorkit-wallet\": \"Connect Passkey\",\n  \"standard-wallet\": \"Standard Wallet\",\n  \"connection-error\": \"Connection Error\",\n  \"retry-connection\": \"Retry Connection\",\n  \"initializing\": \"Initializing Smart Wallet...\",\n  \"initialization-error\": \"Failed to initialize wallet\",\n  \"creating-passkey\": \"Creating Passkey...\",\n  \"creating-smart-wallet\": \"Creating Smart Wallet...\",\n} as const\n\n// Types\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\n  labels?: Partial<typeof LABELS>\n  asChild?: boolean\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\n}\n\ntype Props = WalletButtonProps\n\nexport interface WalletListItemProps {\n  handleClick: React.MouseEventHandler<HTMLButtonElement>\n  tabIndex?: number\n  wallet: {\n    adapter: {\n      name: string\n      icon?: string\n    }\n    readyState: WalletReadyState\n  }\n}\n\n// Wallet List Item Component\nexport const WalletListItem: FC<WalletListItemProps> = ({ handleClick, tabIndex, wallet }) => {\n  const isInstalled = wallet.readyState === WalletReadyState.Installed\n  \n  return (\n    <Button \n      onClick={handleClick} \n      tabIndex={tabIndex} \n      variant=\"outline\" \n      className=\"justify-start w-full\"\n      disabled={!isInstalled && wallet.adapter.name !== \"Phantom\"}\n    >\n      {wallet.adapter.icon && (\n        <img\n          src={wallet.adapter.icon}\n          alt={`${wallet.adapter.name} icon`}\n          className=\"mr-2 h-5 w-5\"\n          onError={(e) => {\n            e.currentTarget.src = \"/placeholder.svg\"\n          }}\n        />\n      )}\n      {wallet.adapter.name}\n      {isInstalled && (\n        <span className=\"ml-auto text-xs text-green-500\">Installed</span>\n      )}\n    </Button>\n  )\n}\n\n// Enhanced Wallet Modal Component\nexport const EnhancedWalletModal: FC<{\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}> = ({ open, onOpenChange }) => {\n  const { wallets, select } = useWallet()\n  const [expanded, setExpanded] = useState(false)\n  const [activeTab, setActiveTab] = useState<'standard' | 'lazorkit'>('standard')\n  const [isInitializing, setIsInitializing] = useState(false)\n  const [isCreatingPasskey, setIsCreatingPasskey] = useState(false)\n  const [isCreatingSmartWallet, setIsCreatingSmartWallet] = useState(false)\n  \n  const { \n    connect: connectLazorKit,\n    createPasskeyOnly,\n    createSmartWalletOnly,\n    disconnect: disconnectLazorKit, \n    isLoading: isLoadingLazorKit, \n    isConnected: isLazorKitConnected,\n    smartWalletPubkey,\n    error: lazorKitError,\n    clearError\n  } = useLazorKitWalletContext()\n\n  const modalContext = React.useContext(ModalContext)\n  const isMainnet = modalContext?.isMainnet ?? false\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\n\n  // Memoize wallet lists\n  const { listedWallets, collapsedWallets } = useMemo(() => {\n    const installed = wallets.filter((w) => w.readyState === WalletReadyState.Installed)\n    const notInstalled = wallets.filter((w) => w.readyState !== WalletReadyState.Installed)\n    return {\n      listedWallets: installed.length ? installed : notInstalled,\n      collapsedWallets: installed.length ? notInstalled : []\n    }\n  }, [wallets])\n\n  const handleWalletClick = useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\n      event.preventDefault()\n      try {\n        await select(walletName as WalletName)\n        setWalletType('standard')\n        onOpenChange(false)\n      } catch (error) {\n        console.error('Failed to select wallet:', error)\n      }\n    },\n    [select, onOpenChange, setWalletType],\n  )\n\n  const handleLazorKitConnect = useCallback(async () => {\n    try {\n      clearError()\n      setIsInitializing(false)\n      setIsCreatingPasskey(false)\n      setIsCreatingSmartWallet(false)\n      console.log(\"Starting LazorKit connection...\")\n      \n      try {\n        // First try normal connection\n        const account = await connectLazorKit()\n        console.log(\"LazorKit connected, account:\", account)\n        \n        if (!account || !account.publicKey) {\n          throw new Error(\"Failed to get wallet account\")\n        }\n\n        const walletAddress = account.publicKey.toString()\n        console.log('Connected with address:', walletAddress)\n        \n        window.localStorage.setItem('SMART_WALLET_ADDRESS', walletAddress)\n        setWalletType('lazorkit')\n        onOpenChange(false)\n      } catch (error) {\n        // If normal connection fails, try step-by-step creation\n        if (error instanceof Error && \n            (error.message.includes('Account does not exist') || \n             error.message.includes('needs to be initialized'))) {\n          try {\n            // Step 1: Create passkey\n            setIsCreatingPasskey(true)\n            const passkeyData = await createPasskeyOnly()\n            console.log(\"Passkey created:\", passkeyData)\n            \n            // Step 2: Create smart wallet\n            setIsCreatingPasskey(false)\n            setIsCreatingSmartWallet(true)\n            const { smartWalletAddress, account } = await createSmartWalletOnly(passkeyData)\n            console.log(\"Smart wallet created:\", smartWalletAddress)\n\n            if (!account || !account.publicKey) {\n              throw new Error(\"Failed to initialize wallet\")\n            }\n\n            window.localStorage.setItem('SMART_WALLET_ADDRESS', smartWalletAddress)\n            setWalletType('lazorkit')\n            onOpenChange(false)\n          } catch (createError) {\n            console.error(\"Failed to create wallet:\", createError)\n            throw createError\n          }\n        } else {\n          throw error\n        }\n      }\n    } catch (error) {\n      console.error(\"LazorKit connection error:\", error)\n      setIsInitializing(false)\n      setIsCreatingPasskey(false)\n      setIsCreatingSmartWallet(false)\n    }\n  }, [connectLazorKit, createPasskeyOnly, createSmartWalletOnly, setWalletType, onOpenChange, clearError])\n\n  // Effect to handle successful connection\n  useEffect(() => {\n    if (isLazorKitConnected && smartWalletPubkey) {\n      const walletAddress = smartWalletPubkey.toString()\n      window.localStorage.setItem('SMART_WALLET_ADDRESS', walletAddress)\n      setWalletType('lazorkit')\n      onOpenChange(false)\n    }\n  }, [isLazorKitConnected, smartWalletPubkey, setWalletType, onOpenChange])\n\n  // Effect to sync active tab with wallet type\n  useEffect(() => {\n    setActiveTab(walletType)\n  }, [walletType])\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Connect wallet to continue</DialogTitle>\n          <DialogDescription>\n            Choose your preferred wallet to connect to this dApp.\n          </DialogDescription>\n          <div className=\"mt-3 space-y-3\">\n            <div className=\"text-warning font-medium\">\n              Note: LazorKit is currently in beta and only supports Devnet\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <span>Network Status:</span>\n              <Badge variant={activeTab === 'lazorkit' ? 'secondary' : (isMainnet ? 'default' : 'secondary')}>\n                {activeTab === 'lazorkit' ? 'Devnet' : (isMainnet ? 'Mainnet' : 'Devnet')}\n              </Badge>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'standard' | 'lazorkit')}>\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"standard\">\n              {LABELS[\"standard-wallet\"]}\n            </TabsTrigger>\n            <TabsTrigger value=\"lazorkit\">\n              {LABELS[\"lazorkit-wallet\"]}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"standard\">\n            <div className=\"space-y-4\">\n              {/* Standard wallet list */}\n              {listedWallets.map((wallet) => (\n                <button\n                  key={wallet.adapter.name}\n                  onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                  className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <img\n                      src={wallet.adapter.icon}\n                      alt={`${wallet.adapter.name} icon`}\n                      className=\"h-5 w-5\"\n                      onError={(e) => {\n                        e.currentTarget.src = \"/placeholder.jpg\"\n                      }}\n                    />\n                    <span className=\"font-medium\">{wallet.adapter.name}</span>\n                  </div>\n                  <Badge variant=\"outline\">\n                    {wallet.readyState === WalletReadyState.Installed\n                      ? \"Installed\"\n                      : \"Not Installed\"}\n                  </Badge>\n                </button>\n              ))}\n\n              {collapsedWallets.length > 0 && (\n                <Collapsible open={expanded} onOpenChange={setExpanded}>\n                  <CollapsibleTrigger asChild>\n                    <Button variant=\"ghost\" className=\"w-full justify-between\">\n                      <span>More wallet options</span>\n                      <ChevronDown className=\"h-4 w-4\" />\n                    </Button>\n                  </CollapsibleTrigger>\n                  <CollapsibleContent className=\"space-y-2\">\n                    {collapsedWallets.map((wallet) => (\n                      <button\n                        key={wallet.adapter.name}\n                        onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                        className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <img\n                            src={wallet.adapter.icon}\n                            alt={`${wallet.adapter.name} icon`}\n                            className=\"h-5 w-5\"\n                            onError={(e) => {\n                              e.currentTarget.src = \"/placeholder.jpg\"\n                            }}\n                          />\n                          <span className=\"font-medium\">\n                            {wallet.adapter.name}\n                          </span>\n                        </div>\n                        <Badge variant=\"outline\">\n                          {wallet.readyState === WalletReadyState.Installed\n                            ? \"Installed\"\n                            : \"Not Installed\"}\n                        </Badge>\n                      </button>\n                    ))}\n                  </CollapsibleContent>\n                </Collapsible>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"lazorkit\">\n            <div className=\"space-y-4\">\n              {!isLazorKitConnected ? (\n                <Button\n                  className=\"w-full\"\n                  onClick={handleLazorKitConnect}\n                  disabled={isLoadingLazorKit || isInitializing || isCreatingPasskey || isCreatingSmartWallet}\n                >\n                  {isLoadingLazorKit || isInitializing ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {LABELS[\"connecting\"]}\n                    </>\n                  ) : isCreatingPasskey ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {LABELS[\"creating-passkey\"]}\n                    </>\n                  ) : isCreatingSmartWallet ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {LABELS[\"creating-smart-wallet\"]}\n                    </>\n                  ) : (\n                    <>\n                      <img \n                        src=\"/brand-logos/passkey-logo.svg\"\n                        alt=\"LazorKit Passkey\"\n                        className=\"h-4 w-4 mr-2\"\n                        onError={(e) => {\n                          e.currentTarget.src = \"/placeholder.jpg\"\n                        }}\n                      />\n                      {LABELS[\"lazorkit-wallet\"]}\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <div className=\"flex flex-col gap-2\">\n                  <div className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\">\n                    <div className=\"flex items-center gap-2\">\n                      <img \n                        src=\"/brand-logos/passkey-logo.svg\" \n                        alt=\"LazorKit Passkey Wallet\" \n                        className=\"h-5 w-5\"\n                        onError={(e) => {\n                          e.currentTarget.src = \"/brand-logos/passkey-logo.svg\"\n                        }}\n                      />\n                      <span className=\"font-medium\">\n                        {smartWalletPubkey?.toString().slice(0, 8)}...{smartWalletPubkey?.toString().slice(-8)}\n                      </span>\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        disconnectLazorKit()\n                        window.localStorage.removeItem('SMART_WALLET_ADDRESS')\n                        setWalletType('standard')\n                      }}\n                    >\n                      {LABELS[\"disconnect\"]}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        <DialogClose asChild>\n          <Button variant=\"outline\" className=\"w-full mt-4\">\n            Close\n          </Button>\n        </DialogClose>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\n// Wallet Multi Button Component\nexport function BaseWalletMultiButton({ children, labels = LABELS, ...props }: Props) {\n  const [walletModalOpen, setWalletModalOpen] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const [menuOpen, setMenuOpen] = useState(false)\n  const [mounted, setMounted] = useState(false)\n\n  const { buttonState, onConnect, onDisconnect, publicKey, walletIcon, walletName } = useWalletMultiButton({\n    onSelectWallet() {\n      setWalletModalOpen(true)\n    },\n  })\n  \n  const { \n    disconnect: disconnectLazorKit, \n    isLoading: isLoadingLazorKit, \n    isConnected: isLazorKitConnected,\n    smartWalletPubkey \n  } = useLazorKitWalletContext()\n  \n  const modalContext = React.useContext(ModalContext)\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\n\n  const isAnyWalletConnected = useMemo(() => {\n    if (walletType === 'standard') {\n      return !!publicKey\n    } else {\n      return isLazorKitConnected && !!smartWalletPubkey\n    }\n  }, [publicKey, isLazorKitConnected, walletType, smartWalletPubkey])\n\n  const currentWalletAddress = useMemo(() => {\n    if (walletType === 'lazorkit' && smartWalletPubkey) {\n      // For LazorKit, the address is already in the correct format\n      return smartWalletPubkey.toString();\n    } else if (walletType === 'standard' && publicKey) {\n      return publicKey.toBase58();\n    }\n    return null;\n  }, [walletType, smartWalletPubkey, publicKey]);\n\n  const content = useMemo(() => {\n    if (!mounted) return labels[\"no-wallet\"];\n\n    if (children) {\n      return children;\n    } else if (isLoadingLazorKit) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent\"></div>\n          <span>{labels[\"connecting\"]}</span>\n        </div>\n      );\n    }\n\n    // Add wallet icon and address when connected\n    if (isAnyWalletConnected && currentWalletAddress) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {walletType === 'lazorkit' ? (\n            <img \n              src=\"/brand-logos/passkey-logo.svg\"\n              alt=\"LazorKit Passkey\"\n              className=\"h-5 w-5\"\n              onError={(e) => {\n                e.currentTarget.src = \"/placeholder.jpg\"\n              }}\n            />\n          ) : walletIcon ? (\n            <img\n              src={walletIcon}\n              alt={`${walletName} icon`}\n              className=\"h-5 w-5\"\n              onError={(e) => {\n                e.currentTarget.src = \"/placeholder.jpg\"\n              }}\n            />\n          ) : null}\n          <span>\n            {`${currentWalletAddress.slice(0, 6)}...${currentWalletAddress.slice(-4)}`}\n          </span>\n        </div>\n      );\n    }\n    \n    return labels[\"has-wallet\"];\n  }, [mounted, children, isLoadingLazorKit, isAnyWalletConnected, walletType, walletIcon, walletName, currentWalletAddress, labels]);\n\n  const handleDisconnect = useCallback(() => {\n    if (walletType === 'lazorkit') {\n      disconnectLazorKit()\n      window.localStorage.removeItem('SMART_WALLET_ADDRESS')\n      setWalletType('standard')\n    } else if (onDisconnect) {\n      onDisconnect()\n    }\n    setMenuOpen(false)\n  }, [walletType, disconnectLazorKit, onDisconnect, setWalletType])\n\n  const handleCopyAddress = useCallback(async () => {\n    if (currentWalletAddress) {\n      await navigator.clipboard.writeText(currentWalletAddress)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 400)\n    }\n  }, [currentWalletAddress])\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!isAnyWalletConnected) {\n    return (\n      <>\n        <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n        <Button\n          {...props}\n          onClick={() => {\n            if (buttonState === \"has-wallet\" && onConnect) {\n              onConnect()\n            } else {\n              setWalletModalOpen(true)\n            }\n          }}\n        >\n          {content}\n        </Button>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button {...props}>\n            {content}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          {currentWalletAddress && (\n            <DropdownMenuItem onClick={handleCopyAddress}>\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => {\n              setWalletModalOpen(true)\n              setMenuOpen(false)\n            }}\n          >\n            {labels[\"change-wallet\"]}\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleDisconnect}>\n            {labels[\"disconnect\"]}\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n\n// Public Exported Button\nexport function ConnectWalletButton(props: WalletButtonProps) {\n  return <BaseWalletMultiButton {...props} />\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/connect-wallet-button.tsx"
    },
    {
      "path": "components/providers/wallet-provider.tsx",
      "content": "\"use client\"\n\nimport React, { useState, useMemo, createContext, useCallback, useEffect } from \"react\"\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\"\nimport type { Adapter } from \"@solana/wallet-adapter-base\"\nimport {\n  WalletProvider as SolanaWalletProvider,\n  ConnectionProvider as SolanaConnectionProvider,\n  ConnectionProviderProps,\n} from \"@solana/wallet-adapter-react\"\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\"\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-wallets\"\nimport { TxnSettingsProvider } from \"@/components/ui/murphy/txn-settings\"\nimport { ClientLazorKitProvider } from \"./client-lazorkit-provider\"\nimport { LazorKitWalletProvider } from \"./lazorkit-wallet-context\"\n\nimport \"@solana/wallet-adapter-react-ui/styles.css\"\n\n// Constants\nconst DEFAULT_MAINNET_RPC = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || \"https://api.mainnet-beta.solana.com\"\nconst DEFAULT_DEVNET_RPC = process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET || \"https://api.devnet.solana.com\"\n\n// Create wrapper components\nconst ConnectionProviderWrapper = (props: ConnectionProviderProps) => (\n  <SolanaConnectionProvider {...props} />\n)\n\nconst WalletProviderWrapper = (props: any) => (\n  <SolanaWalletProvider {...props} />\n)\n\ninterface WalletProviderProps {\n  children: React.ReactNode\n  network?: WalletAdapterNetwork\n  endpoint?: string\n  wallets?: Adapter[]\n  autoConnect?: boolean\n}\n\ninterface ModalContextState {\n  isOpen: boolean\n  setIsOpen: (open: boolean) => void\n  endpoint?: string\n  switchToNextEndpoint: () => void\n  availableEndpoints: string[]\n  currentEndpointIndex: number\n  isMainnet: boolean\n  walletType: 'standard' | 'lazorkit'\n  setWalletType: (type: 'standard' | 'lazorkit') => void\n  networkType: WalletAdapterNetwork\n}\n\nexport const ModalContext = createContext<ModalContextState>({\n  isOpen: false,\n  setIsOpen: () => null,\n  endpoint: undefined,\n  switchToNextEndpoint: () => null,\n  availableEndpoints: [],\n  currentEndpointIndex: 0,\n  isMainnet: true, // Changed default to true for mainnet\n  walletType: 'standard',\n  setWalletType: () => null,\n  networkType: WalletAdapterNetwork.Mainnet, // Changed default to Mainnet\n})\n\nexport const WalletProvider = ({ children, ...props }: WalletProviderProps) => {\n  const [currentEndpointIndex, setCurrentEndpointIndex] = useState(0)\n  const [isOpen, setIsOpen] = useState(false)\n  const [walletType, setWalletType] = useState<'standard' | 'lazorkit'>(() => {\n    if (typeof window !== 'undefined') {\n      const savedType = localStorage.getItem('walletType')\n      return (savedType as 'standard' | 'lazorkit') || 'standard'\n    }\n    return 'standard'\n  })\n\n  // Network detection - only force devnet for LazorKit operations\n  const isMainnet = useMemo(() => {\n    const mainnetEnv = process.env.NEXT_PUBLIC_USE_MAINNET\n    return mainnetEnv === undefined ? true : mainnetEnv === \"true\" // Default to mainnet\n  }, [])\n\n  const networkType = useMemo(\n    () => walletType === 'lazorkit' ? WalletAdapterNetwork.Devnet : (isMainnet ? WalletAdapterNetwork.Mainnet : WalletAdapterNetwork.Devnet),\n    [isMainnet, walletType]\n  )\n\n  // RPC endpoints management - use devnet RPC for LazorKit, otherwise use configured endpoint\n  const publicRPCs = useMemo(\n    () => [walletType === 'lazorkit' ? DEFAULT_DEVNET_RPC : (isMainnet ? DEFAULT_MAINNET_RPC : DEFAULT_DEVNET_RPC)],\n    [isMainnet, walletType]\n  )\n\n  const endpoint = useMemo(() => {\n    if (props.endpoint) {\n      return props.endpoint\n    }\n    return publicRPCs[currentEndpointIndex]\n  }, [props.endpoint, publicRPCs, currentEndpointIndex])\n\n  // Endpoint switching with error handling\n  const switchToNextEndpoint = useCallback(() => {\n    setCurrentEndpointIndex((prevIndex) => {\n      const nextIndex = (prevIndex + 1) % publicRPCs.length\n      console.log(\n        `Switching RPC endpoint from ${publicRPCs[prevIndex]} to ${publicRPCs[nextIndex]}`\n      )\n      return nextIndex\n    })\n  }, [publicRPCs])\n\n  // Wallet adapters\n  const wallets = useMemo(\n    () => props.wallets || [new PhantomWalletAdapter()],\n    [props.wallets]\n  )\n\n  // Persist wallet type\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('walletType', walletType)\n    }\n  }, [walletType])\n\n  // Auto-connect effect\n  useEffect(() => {\n    if (props.autoConnect && walletType === 'lazorkit') {\n      // Attempt to reconnect LazorKit wallet on mount\n      const reconnectLazorKit = async () => {\n        try {\n          // The actual reconnection will be handled by the LazorKitWalletProvider\n          console.log('Attempting to reconnect LazorKit wallet...')\n        } catch (error) {\n          console.error('Failed to reconnect LazorKit wallet:', error)\n        }\n      }\n      reconnectLazorKit()\n    }\n  }, [props.autoConnect, walletType])\n\n  // Effect to handle network switching for LazorKit\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const cluster = walletType === 'lazorkit' ? \"devnet\" : (isMainnet ? \"mainnet\" : \"devnet\")\n      window.localStorage.setItem(\"NEXT_PUBLIC_CLUSTER\", cluster)\n      ;(window as any).NEXT_PUBLIC_CLUSTER = cluster\n      window.dispatchEvent(new CustomEvent(\"clusterChanged\", { detail: { cluster } }))\n    }\n  }, [walletType, isMainnet])\n\n  // Context value memoization\n  const contextValue = useMemo(() => ({\n    isOpen,\n    setIsOpen,\n    endpoint,\n    switchToNextEndpoint,\n    availableEndpoints: publicRPCs,\n    currentEndpointIndex,\n    isMainnet,\n    walletType,\n    setWalletType,\n    networkType,\n  }), [\n    isOpen,\n    endpoint,\n    switchToNextEndpoint,\n    publicRPCs,\n    currentEndpointIndex,\n    isMainnet,\n    walletType,\n    networkType,\n  ])\n\n  return (\n    <ModalContext.Provider value={contextValue}>\n      <ConnectionProviderWrapper endpoint={endpoint}>\n        <WalletProviderWrapper \n          wallets={wallets} \n          autoConnect={props.autoConnect}\n          onError={(error: Error) => {\n            console.error('Wallet error:', error)\n            // Attempt to switch endpoint on connection errors\n            if (error.message.includes('connection') || error.message.includes('network')) {\n              switchToNextEndpoint()\n            }\n          }}\n        >\n          <WalletModalProvider>\n            <ClientLazorKitProvider>\n              <LazorKitWalletProvider>\n                <TxnSettingsProvider>{children}</TxnSettingsProvider>\n              </LazorKitWalletProvider>\n            </ClientLazorKitProvider>\n          </WalletModalProvider>\n        </WalletProviderWrapper>\n      </ConnectionProviderWrapper>\n    </ModalContext.Provider>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/providers/wallet-provider.tsx"
    },
    {
      "path": "hook/murphy/use-walletMultiButton.ts",
      "content": "import { useWallet, type Wallet } from '@solana/wallet-adapter-react';\nimport type { PublicKey } from '@solana/web3.js';\nimport { useCallback } from 'react';\n\ntype ButtonState = {\n    buttonState: 'connecting' | 'connected' | 'disconnecting' | 'has-wallet' | 'no-wallet';\n    onConnect?: () => void;\n    onDisconnect?: () => void;\n    onSelectWallet?: () => void;\n    publicKey?: PublicKey;\n    walletIcon?: Wallet['adapter']['icon'];\n    walletName?: Wallet['adapter']['name'];\n};\n\ntype Config = {\n    onSelectWallet: (config: {\n        onSelectWallet: (walletName: Wallet['adapter']['name']) => void;\n        wallets: Wallet[];\n    }) => void;\n};\n\nexport function useWalletMultiButton({ onSelectWallet }: Config): ButtonState {\n    const { connect, connected, connecting, disconnect, disconnecting, publicKey, select, wallet, wallets } =\n        useWallet();\n    let buttonState: ButtonState['buttonState'];\n    if (connecting) {\n        buttonState = 'connecting';\n    } else if (connected) {\n        buttonState = 'connected';\n    } else if (disconnecting) {\n        buttonState = 'disconnecting';\n    } else if (wallet) {\n        buttonState = 'has-wallet';\n    } else {\n        buttonState = 'no-wallet';\n    }\n    const handleConnect = useCallback(() => {\n        connect().catch(() => {\n        });\n    }, [connect]);\n    const handleDisconnect = useCallback(() => {\n        disconnect().catch(() => {\n        });\n    }, [disconnect]);\n    const handleSelectWallet = useCallback(() => {\n        onSelectWallet({ onSelectWallet: select, wallets });\n    }, [onSelectWallet, select, wallets]);\n    return {\n        buttonState,\n        onConnect: buttonState === 'has-wallet' ? handleConnect : undefined,\n        onDisconnect: buttonState !== 'disconnecting' && buttonState !== 'no-wallet' ? handleDisconnect : undefined,\n        onSelectWallet: handleSelectWallet,\n        publicKey: publicKey ?? undefined,\n        walletIcon: wallet?.adapter.icon,\n        walletName: wallet?.adapter.name,\n    };\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletMultiButton.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "components/providers/lazorkit-wallet-context.tsx",
      "content": "// components/providers/lazorkit-wallet-context.tsx\n\"use client\"\n\nimport React, { createContext, useContext, useCallback, useState, useEffect, useMemo } from \"react\"\nimport { useWallet as useLazorKitWallet, WalletAccount } from \"@lazorkit/wallet\"\nimport { Transaction, PublicKey, TransactionInstruction } from \"@solana/web3.js\"\n\n// Custom error class for LazorKit errors\nclass LazorKitError extends Error {\n  constructor(message: string, public code?: string, public isAccountNotFound: boolean = false) {\n    super(message)\n    this.name = 'LazorKitError'\n  }\n}\n\n// Extended WalletAccount to include createSmartWallet\ninterface ExtendedWalletAccount extends WalletAccount {\n  createSmartWallet?: () => Promise<void>\n}\n\n// Connect Response type for createPasskeyOnly\ninterface ConnectResponse {\n  publicKey: string\n  credentialId: string\n  isCreated: boolean\n  connectionType: 'create' | 'get'\n  timestamp: number\n}\n\n// Extended LazorKit wallet interface\ninterface ExtendedLazorKitWallet {\n  smartWalletPubkey: PublicKey | null\n  isConnected: boolean\n  isLoading: boolean\n  isConnecting: boolean\n  isSigning: boolean\n  error: Error | null\n  account: WalletAccount | null\n  connect: () => Promise<WalletAccount>\n  disconnect: () => Promise<void>\n  signTransaction: (instruction: TransactionInstruction) => Promise<Transaction>\n  signAndSendTransaction: (instruction: TransactionInstruction) => Promise<string>\n  createPasskeyOnly: () => Promise<ConnectResponse>\n  createSmartWalletOnly: (passkeyData: ConnectResponse) => Promise<{smartWalletAddress: string, account: WalletAccount}>\n  reconnect: () => Promise<WalletAccount>\n}\n\ninterface LazorKitWalletContextState {\n  smartWalletPubkey: PublicKey | null\n  isConnected: boolean\n  isLoading: boolean\n  isConnecting: boolean\n  isSigning: boolean\n  error: Error | null\n  account: ExtendedWalletAccount | null\n  connect: () => Promise<ExtendedWalletAccount>\n  disconnect: () => Promise<void>\n  reconnect: () => Promise<ExtendedWalletAccount>\n  signTransaction: (instruction: TransactionInstruction) => Promise<Transaction>\n  signAndSendTransaction: (instruction: TransactionInstruction) => Promise<string>\n  createPasskeyOnly: () => Promise<ConnectResponse>\n  createSmartWalletOnly: (passkeyData: ConnectResponse) => Promise<{smartWalletAddress: string, account: ExtendedWalletAccount}>\n  clearError: () => void\n}\n\nconst defaultContext: LazorKitWalletContextState = {\n  smartWalletPubkey: null,\n  isConnected: false,\n  isLoading: false,\n  isConnecting: false,\n  isSigning: false,\n  error: null,\n  account: null,\n  connect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  disconnect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  reconnect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  signTransaction: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  signAndSendTransaction: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  createPasskeyOnly: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  createSmartWalletOnly: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\n  clearError: () => {}\n}\n\nexport const LazorKitWalletContext = createContext<LazorKitWalletContextState>(defaultContext)\n\nexport const useLazorKitWalletContext = () => {\n  const context = useContext(LazorKitWalletContext)\n  if (!context) {\n    throw new LazorKitError(\"useLazorKitWalletContext must be used within a LazorKitWalletProvider\")\n  }\n  return context\n}\n\n// Utility function for error handling\nconst handleError = (err: unknown): Error => {\n  if (err instanceof Error) {\n    // Check for specific error types\n    if (err.message.includes('Account does not exist') || \n        err.message.includes('has no data')) {\n      return new LazorKitError(\n        \"Smart wallet needs to be initialized. Please try connecting again.\", \n        'ACCOUNT_NOT_FOUND',\n        true\n      )\n    }\n    if (err.message.includes('NO_STORED_CREDENTIALS')) {\n      return new LazorKitError(\"No stored credentials found\", 'NO_STORED_CREDENTIALS')\n    }\n    if (err.message.includes('INVALID_CREDENTIALS')) {\n      return new LazorKitError(\"Invalid credentials\", 'INVALID_CREDENTIALS')\n    }\n    return err\n  }\n  return new LazorKitError(err instanceof Object ? JSON.stringify(err) : String(err))\n}\n\nexport function LazorKitWalletProvider({ children }: { children: React.ReactNode }) {\n  const wallet = useLazorKitWallet() as unknown as ExtendedLazorKitWallet\n\n  const [isConnecting, setIsConnecting] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n  const [retryCount, setRetryCount] = useState(0)\n  const MAX_RETRIES = 3\n\n  const clearError = useCallback(() => setError(null), [])\n\n  // Auto-retry connection on certain errors\n  useEffect(() => {\n    if (error && retryCount < MAX_RETRIES && !isConnecting) {\n      const timer = setTimeout(() => {\n        console.log(`Retrying connection (attempt ${retryCount + 1}/${MAX_RETRIES})`)\n        setRetryCount(prev => prev + 1)\n        connect()\n      }, Math.min(1000 * Math.pow(2, retryCount), 8000)) // Exponential backoff\n\n      return () => clearTimeout(timer)\n    }\n  }, [error, retryCount, isConnecting])\n\n  const connect = useCallback(async () => {\n    if (isConnecting) return wallet.account as ExtendedWalletAccount\n    \n    try {\n      setIsConnecting(true)\n      setError(null)\n      \n      // First try reconnecting with stored credentials\n      try {\n        const reconnectedAccount = await wallet.reconnect()\n        setRetryCount(0)\n        return reconnectedAccount as ExtendedWalletAccount\n      } catch (reconnectError) {\n        // If reconnect fails, try new connection\n        try {\n          const newAccount = await wallet.connect()\n          setRetryCount(0)\n          return newAccount as ExtendedWalletAccount\n        } catch (connectError) {\n          throw handleError(connectError)\n        }\n      }\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    } finally {\n      setIsConnecting(false)\n    }\n  }, [wallet.connect, wallet.reconnect, wallet.account, isConnecting])\n\n  const disconnect = useCallback(async () => {\n    try {\n      setError(null)\n      await wallet.disconnect()\n      setRetryCount(0)\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.disconnect])\n\n  const reconnect = useCallback(async () => {\n    try {\n      setError(null)\n      return await wallet.reconnect() as ExtendedWalletAccount\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.reconnect])\n\n  const createPasskeyOnly = useCallback(async () => {\n    try {\n      setError(null)\n      return await wallet.createPasskeyOnly()\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.createPasskeyOnly])\n\n  const createSmartWalletOnly = useCallback(async (passkeyData: ConnectResponse) => {\n    try {\n      setError(null)\n      return await wallet.createSmartWalletOnly(passkeyData)\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.createSmartWalletOnly])\n\n  const signTransaction = useCallback(async (instruction: TransactionInstruction) => {\n    try {\n      setError(null)\n      return await wallet.signTransaction(instruction)\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.signTransaction])\n\n  const signAndSendTransaction = useCallback(async (instruction: TransactionInstruction) => {\n    try {\n      setError(null)\n      return await wallet.signAndSendTransaction(instruction)\n    } catch (err) {\n      const error = handleError(err)\n      setError(error)\n      throw error\n    }\n  }, [wallet.signAndSendTransaction])\n\n  // Memoize the context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    smartWalletPubkey: wallet.smartWalletPubkey,\n    isConnected: wallet.isConnected,\n    isLoading: wallet.isLoading,\n    isConnecting,\n    isSigning: wallet.isSigning,\n    error,\n    account: wallet.account as ExtendedWalletAccount,\n    connect,\n    disconnect,\n    reconnect,\n    signTransaction,\n    signAndSendTransaction,\n    createPasskeyOnly,\n    createSmartWalletOnly,\n    clearError\n  }), [\n    wallet.smartWalletPubkey,\n    wallet.isConnected,\n    wallet.isLoading,\n    isConnecting,\n    wallet.isSigning,\n    error,\n    wallet.account,\n    connect,\n    disconnect,\n    reconnect,\n    signTransaction,\n    signAndSendTransaction,\n    createPasskeyOnly,\n    createSmartWalletOnly,\n    clearError\n  ])\n\n  return (\n    <LazorKitWalletContext.Provider value={value}>\n      {children}\n    </LazorKitWalletContext.Provider>\n  )\n}",
      "type": "registry:component",
      "target": "components/providers/lazorkit-wallet-context.tsx"
    },
    {
      "path": "components/providers/client-lazorkit-provider.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { LazorkitProvider } from \"@lazorkit/wallet\"\n\nconst DEFAULT_RPC_URL = \"https://api.devnet.solana.com\" // Changed to devnet as per docs\nconst DEFAULT_IPFS_URL = \"https://portal.lazor.sh\"\nconst DEFAULT_PAYMASTER_URL = \"https://lazorkit-paymaster.onrender.com\"\n\nexport function ClientLazorKitProvider({ children }: { children: React.ReactNode }) {\n  // Validate and use environment variables with fallbacks\n  const rpcUrl = process.env.LAZORKIT_RPC_URL || DEFAULT_RPC_URL\n  const ipfsUrl = process.env.LAZORKIT_PORTAL_URL || DEFAULT_IPFS_URL\n  const paymasterUrl = process.env.LAZORKIT_PAYMASTER_URL || DEFAULT_PAYMASTER_URL\n\n  // Enable debug mode in development\n  const debug = process.env.NODE_ENV === 'development'\n\n  // Log configuration in development\n  if (debug) {\n    console.debug('LazorKit Provider Configuration:', {\n      rpcUrl,\n      ipfsUrl,\n      paymasterUrl,\n      debug\n    })\n  }\n\n  return (\n    <LazorkitProvider\n      rpcUrl={rpcUrl}\n      ipfsUrl={ipfsUrl}\n      paymasterUrl={paymasterUrl}\n    >\n      {children}\n    </LazorkitProvider>\n  )\n}",
      "type": "registry:component",
      "target": "components/providers/client-lazorkit-provider.tsx"
    }
  ]
}