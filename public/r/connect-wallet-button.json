{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "connect-wallet-button",
  "type": "registry:block",
  "title": "Connect Wallet Button",
  "description": "A simple connect wallet button component.",
  "dependencies": [
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-base",
    "@lazorkit/wallet"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "collapsible",
    "dropdown-menu",
    "tabs"
  ],
  "files": [
    {
      "path": "components/ui/murphy/connect-wallet-button.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { type FC, useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { useWallet } from \"@solana/wallet-adapter-react\"\r\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\"\r\nimport { useWalletMultiButton } from \"@/hook/murphy/use-walletMultiButton\"\r\nimport { Button } from \"../button\"\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\"\r\nimport { useLazorKitWalletContext } from \"@/components/providers/lazorkit-wallet-context\"\r\nimport { PublicKey } from \"@solana/web3.js\"\r\n\r\nimport { Dialog, DialogClose, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"../dialog\"\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"../collapsible\"\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"../dropdown-menu\"\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"../tabs\"\r\nimport { Badge } from \"../badge\"\r\nimport { Loader2, Key, ChevronDown } from \"lucide-react\"\r\n\r\n// Constants\r\nconst LABELS = {\r\n  \"change-wallet\": \"Change Wallet\",\r\n  connecting: \"Connecting...\",\r\n  \"copy-address\": \"Copy Address\",\r\n  copied: \"Copied\",\r\n  disconnect: \"Disconnect\",\r\n  \"has-wallet\": \"Connect Wallet\",\r\n  \"no-wallet\": \"Select Wallet\",\r\n  \"lazorkit-wallet\": \"Connect Passkey\",\r\n  \"standard-wallet\": \"Standard Wallet\",\r\n  \"connection-error\": \"Connection Error\",\r\n  \"retry-connection\": \"Retry Connection\",\r\n  \"initializing\": \"Initializing Smart Wallet...\",\r\n  \"initialization-error\": \"Failed to initialize wallet\",\r\n  \"creating-passkey\": \"Creating Passkey...\",\r\n  \"creating-smart-wallet\": \"Creating Smart Wallet...\",\r\n} as const\r\n\r\n// Types\r\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\r\n  labels?: Partial<typeof LABELS>\r\n  asChild?: boolean\r\n  variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\r\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\"\r\n}\r\n\r\ntype Props = WalletButtonProps\r\n\r\nexport interface WalletListItemProps {\r\n  handleClick: React.MouseEventHandler<HTMLButtonElement>\r\n  tabIndex?: number\r\n  wallet: {\r\n    adapter: {\r\n      name: string\r\n      icon?: string\r\n    }\r\n    readyState: WalletReadyState\r\n  }\r\n}\r\n\r\n// Wallet List Item Component\r\nexport const WalletListItem: FC<WalletListItemProps> = ({ handleClick, tabIndex, wallet }) => {\r\n  const isInstalled = wallet.readyState === WalletReadyState.Installed\r\n  \r\n  return (\r\n    <Button \r\n      onClick={handleClick} \r\n      tabIndex={tabIndex} \r\n      variant=\"outline\" \r\n      className=\"justify-start w-full\"\r\n      disabled={!isInstalled && wallet.adapter.name !== \"Phantom\"}\r\n    >\r\n      {wallet.adapter.icon && (\r\n        <img\r\n          src={wallet.adapter.icon}\r\n          alt={`${wallet.adapter.name} icon`}\r\n          className=\"mr-2 h-5 w-5\"\r\n          onError={(e) => {\r\n            e.currentTarget.src = \"/placeholder.svg\"\r\n          }}\r\n        />\r\n      )}\r\n      {wallet.adapter.name}\r\n      {isInstalled && (\r\n        <span className=\"ml-auto text-xs text-green-500\">Installed</span>\r\n      )}\r\n    </Button>\r\n  )\r\n}\r\n\r\n// Enhanced Wallet Modal Component\r\nexport const EnhancedWalletModal: FC<{\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n}> = ({ open, onOpenChange }) => {\r\n  const { wallets, select } = useWallet()\r\n  const [expanded, setExpanded] = useState(false)\r\n  const [activeTab, setActiveTab] = useState<'standard' | 'lazorkit'>('standard')\r\n  const [isInitializing, setIsInitializing] = useState(false)\r\n  const [isCreatingPasskey, setIsCreatingPasskey] = useState(false)\r\n  const [isCreatingSmartWallet, setIsCreatingSmartWallet] = useState(false)\r\n  \r\n  const { \r\n    connect: connectLazorKit,\r\n    createPasskeyOnly,\r\n    createSmartWalletOnly,\r\n    disconnect: disconnectLazorKit, \r\n    isLoading: isLoadingLazorKit, \r\n    isConnected: isLazorKitConnected,\r\n    smartWalletPubkey,\r\n    error: lazorKitError,\r\n    clearError\r\n  } = useLazorKitWalletContext()\r\n\r\n  const modalContext = React.useContext(ModalContext)\r\n  const isMainnet = modalContext?.isMainnet ?? false\r\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\r\n\r\n  // Memoize wallet lists\r\n  const { listedWallets, collapsedWallets } = useMemo(() => {\r\n    const installed = wallets.filter((w) => w.readyState === WalletReadyState.Installed)\r\n    const notInstalled = wallets.filter((w) => w.readyState !== WalletReadyState.Installed)\r\n    return {\r\n      listedWallets: installed.length ? installed : notInstalled,\r\n      collapsedWallets: installed.length ? notInstalled : []\r\n    }\r\n  }, [wallets])\r\n\r\n  const handleWalletClick = useCallback(\r\n    async (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\r\n      event.preventDefault()\r\n      try {\r\n        await select(walletName as WalletName)\r\n        setWalletType('standard')\r\n        onOpenChange(false)\r\n      } catch (error) {\r\n        console.error('Failed to select wallet:', error)\r\n      }\r\n    },\r\n    [select, onOpenChange, setWalletType],\r\n  )\r\n\r\n  const handleLazorKitConnect = useCallback(async () => {\r\n    try {\r\n      clearError()\r\n      setIsInitializing(false)\r\n      setIsCreatingPasskey(false)\r\n      setIsCreatingSmartWallet(false)\r\n      console.log(\"Starting LazorKit connection...\")\r\n      \r\n      try {\r\n        // First try normal connection\r\n        const account = await connectLazorKit()\r\n        console.log(\"LazorKit connected, account:\", account)\r\n        \r\n        if (!account || !account.publicKey) {\r\n          throw new Error(\"Failed to get wallet account\")\r\n        }\r\n\r\n        const walletAddress = account.publicKey.toString()\r\n        console.log('Connected with address:', walletAddress)\r\n        \r\n        window.localStorage.setItem('SMART_WALLET_ADDRESS', walletAddress)\r\n        setWalletType('lazorkit')\r\n        onOpenChange(false)\r\n      } catch (error) {\r\n        // If normal connection fails, try step-by-step creation\r\n        if (error instanceof Error && \r\n            (error.message.includes('Account does not exist') || \r\n             error.message.includes('needs to be initialized'))) {\r\n          try {\r\n            // Step 1: Create passkey\r\n            setIsCreatingPasskey(true)\r\n            const passkeyData = await createPasskeyOnly()\r\n            console.log(\"Passkey created:\", passkeyData)\r\n            \r\n            // Step 2: Create smart wallet\r\n            setIsCreatingPasskey(false)\r\n            setIsCreatingSmartWallet(true)\r\n            const { smartWalletAddress, account } = await createSmartWalletOnly(passkeyData)\r\n            console.log(\"Smart wallet created:\", smartWalletAddress)\r\n\r\n            if (!account || !account.publicKey) {\r\n              throw new Error(\"Failed to initialize wallet\")\r\n            }\r\n\r\n            window.localStorage.setItem('SMART_WALLET_ADDRESS', smartWalletAddress)\r\n            setWalletType('lazorkit')\r\n            onOpenChange(false)\r\n          } catch (createError) {\r\n            console.error(\"Failed to create wallet:\", createError)\r\n            throw createError\r\n          }\r\n        } else {\r\n          throw error\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"LazorKit connection error:\", error)\r\n      setIsInitializing(false)\r\n      setIsCreatingPasskey(false)\r\n      setIsCreatingSmartWallet(false)\r\n    }\r\n  }, [connectLazorKit, createPasskeyOnly, createSmartWalletOnly, setWalletType, onOpenChange, clearError])\r\n\r\n  // Effect to handle successful connection\r\n  useEffect(() => {\r\n    if (isLazorKitConnected && smartWalletPubkey) {\r\n      const walletAddress = smartWalletPubkey.toString()\r\n      window.localStorage.setItem('SMART_WALLET_ADDRESS', walletAddress)\r\n      setWalletType('lazorkit')\r\n      onOpenChange(false)\r\n    }\r\n  }, [isLazorKitConnected, smartWalletPubkey, setWalletType, onOpenChange])\r\n\r\n  // Effect to sync active tab with wallet type\r\n  useEffect(() => {\r\n    setActiveTab(walletType)\r\n  }, [walletType])\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Connect wallet to continue</DialogTitle>\r\n          <DialogDescription>\r\n            Choose your preferred wallet to connect to this dApp.\r\n          </DialogDescription>\r\n          <div className=\"mt-3 space-y-3\">\r\n            <div className=\"text-warning font-medium\">\r\n              Note: LazorKit is currently in beta and only supports Devnet\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-sm\">\r\n              <span>Network Status:</span>\r\n              <Badge variant={activeTab === 'lazorkit' ? 'secondary' : (isMainnet ? 'default' : 'secondary')}>\r\n                {activeTab === 'lazorkit' ? 'Devnet' : (isMainnet ? 'Mainnet' : 'Devnet')}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'standard' | 'lazorkit')}>\r\n          <TabsList className=\"grid w-full grid-cols-2\">\r\n            <TabsTrigger value=\"standard\">\r\n              {LABELS[\"standard-wallet\"]}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"lazorkit\">\r\n              {LABELS[\"lazorkit-wallet\"]}\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"standard\">\r\n            <div className=\"space-y-4\">\r\n              {/* Standard wallet list */}\r\n              {listedWallets.map((wallet) => (\r\n                <button\r\n                  key={wallet.adapter.name}\r\n                  onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\r\n                  className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary\"\r\n                >\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <img\r\n                      src={wallet.adapter.icon}\r\n                      alt={`${wallet.adapter.name} icon`}\r\n                      className=\"h-5 w-5\"\r\n                      onError={(e) => {\r\n                        e.currentTarget.src = \"/placeholder.jpg\"\r\n                      }}\r\n                    />\r\n                    <span className=\"font-medium\">{wallet.adapter.name}</span>\r\n                  </div>\r\n                  <Badge variant=\"outline\">\r\n                    {wallet.readyState === WalletReadyState.Installed\r\n                      ? \"Installed\"\r\n                      : \"Not Installed\"}\r\n                  </Badge>\r\n                </button>\r\n              ))}\r\n\r\n              {collapsedWallets.length > 0 && (\r\n                <Collapsible open={expanded} onOpenChange={setExpanded}>\r\n                  <CollapsibleTrigger asChild>\r\n                    <Button variant=\"ghost\" className=\"w-full justify-between\">\r\n                      <span>More wallet options</span>\r\n                      <ChevronDown className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </CollapsibleTrigger>\r\n                  <CollapsibleContent className=\"space-y-2\">\r\n                    {collapsedWallets.map((wallet) => (\r\n                      <button\r\n                        key={wallet.adapter.name}\r\n                        onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\r\n                        className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary\"\r\n                      >\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <img\r\n                            src={wallet.adapter.icon}\r\n                            alt={`${wallet.adapter.name} icon`}\r\n                            className=\"h-5 w-5\"\r\n                            onError={(e) => {\r\n                              e.currentTarget.src = \"/placeholder.jpg\"\r\n                            }}\r\n                          />\r\n                          <span className=\"font-medium\">\r\n                            {wallet.adapter.name}\r\n                          </span>\r\n                        </div>\r\n                        <Badge variant=\"outline\">\r\n                          {wallet.readyState === WalletReadyState.Installed\r\n                            ? \"Installed\"\r\n                            : \"Not Installed\"}\r\n                        </Badge>\r\n                      </button>\r\n                    ))}\r\n                  </CollapsibleContent>\r\n                </Collapsible>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"lazorkit\">\r\n            <div className=\"space-y-4\">\r\n              {!isLazorKitConnected ? (\r\n                <Button\r\n                  className=\"w-full\"\r\n                  onClick={handleLazorKitConnect}\r\n                  disabled={isLoadingLazorKit || isInitializing || isCreatingPasskey || isCreatingSmartWallet}\r\n                >\r\n                  {isLoadingLazorKit || isInitializing ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      {LABELS[\"connecting\"]}\r\n                    </>\r\n                  ) : isCreatingPasskey ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      {LABELS[\"creating-passkey\"]}\r\n                    </>\r\n                  ) : isCreatingSmartWallet ? (\r\n                    <>\r\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                      {LABELS[\"creating-smart-wallet\"]}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <img \r\n                        src=\"/brand-logos/passkey-logo.svg\"\r\n                        alt=\"LazorKit Passkey\"\r\n                        className=\"h-4 w-4 mr-2\"\r\n                        onError={(e) => {\r\n                          e.currentTarget.src = \"/placeholder.jpg\"\r\n                        }}\r\n                      />\r\n                      {LABELS[\"lazorkit-wallet\"]}\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              ) : (\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <div className=\"flex items-center justify-between p-3 bg-secondary rounded-lg\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <img \r\n                        src=\"/brand-logos/passkey-logo.svg\" \r\n                        alt=\"LazorKit Passkey Wallet\" \r\n                        className=\"h-5 w-5\"\r\n                        onError={(e) => {\r\n                          e.currentTarget.src = \"/brand-logos/passkey-logo.svg\"\r\n                        }}\r\n                      />\r\n                      <span className=\"font-medium\">\r\n                        {smartWalletPubkey?.toString().slice(0, 8)}...{smartWalletPubkey?.toString().slice(-8)}\r\n                      </span>\r\n                    </div>\r\n                    <Button\r\n                      variant=\"destructive\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        disconnectLazorKit()\r\n                        window.localStorage.removeItem('SMART_WALLET_ADDRESS')\r\n                        setWalletType('standard')\r\n                      }}\r\n                    >\r\n                      {LABELS[\"disconnect\"]}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <DialogClose asChild>\r\n          <Button variant=\"outline\" className=\"w-full mt-4\">\r\n            Close\r\n          </Button>\r\n        </DialogClose>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\n// Wallet Multi Button Component\r\nexport function BaseWalletMultiButton({ children, labels = LABELS, ...props }: Props) {\r\n  const [walletModalOpen, setWalletModalOpen] = useState(false)\r\n  const [copied, setCopied] = useState(false)\r\n  const [menuOpen, setMenuOpen] = useState(false)\r\n  const [mounted, setMounted] = useState(false)\r\n\r\n  const { buttonState, onConnect, onDisconnect, publicKey, walletIcon, walletName } = useWalletMultiButton({\r\n    onSelectWallet() {\r\n      setWalletModalOpen(true)\r\n    },\r\n  })\r\n  \r\n  const { \r\n    disconnect: disconnectLazorKit, \r\n    isLoading: isLoadingLazorKit, \r\n    isConnected: isLazorKitConnected,\r\n    smartWalletPubkey \r\n  } = useLazorKitWalletContext()\r\n  \r\n  const modalContext = React.useContext(ModalContext)\r\n  const { walletType, setWalletType } = modalContext || { walletType: 'standard', setWalletType: () => {} }\r\n\r\n  const isAnyWalletConnected = useMemo(() => {\r\n    if (walletType === 'standard') {\r\n      return !!publicKey\r\n    } else {\r\n      return isLazorKitConnected && !!smartWalletPubkey\r\n    }\r\n  }, [publicKey, isLazorKitConnected, walletType, smartWalletPubkey])\r\n\r\n  const currentWalletAddress = useMemo(() => {\r\n    if (walletType === 'lazorkit' && smartWalletPubkey) {\r\n      // For LazorKit, the address is already in the correct format\r\n      return smartWalletPubkey.toString();\r\n    } else if (walletType === 'standard' && publicKey) {\r\n      return publicKey.toBase58();\r\n    }\r\n    return null;\r\n  }, [walletType, smartWalletPubkey, publicKey]);\r\n\r\n  const content = useMemo(() => {\r\n    if (!mounted) return labels[\"no-wallet\"];\r\n\r\n    if (children) {\r\n      return children;\r\n    } else if (isLoadingLazorKit) {\r\n      return (\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent\"></div>\r\n          <span>{labels[\"connecting\"]}</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Add wallet icon and address when connected\r\n    if (isAnyWalletConnected && currentWalletAddress) {\r\n      return (\r\n        <div className=\"flex items-center gap-2\">\r\n          {walletType === 'lazorkit' ? (\r\n            <img \r\n              src=\"/brand-logos/passkey-logo.svg\"\r\n              alt=\"LazorKit Passkey\"\r\n              className=\"h-5 w-5\"\r\n              onError={(e) => {\r\n                e.currentTarget.src = \"/placeholder.jpg\"\r\n              }}\r\n            />\r\n          ) : walletIcon ? (\r\n            <img\r\n              src={walletIcon}\r\n              alt={`${walletName} icon`}\r\n              className=\"h-5 w-5\"\r\n              onError={(e) => {\r\n                e.currentTarget.src = \"/placeholder.jpg\"\r\n              }}\r\n            />\r\n          ) : null}\r\n          <span>\r\n            {`${currentWalletAddress.slice(0, 6)}...${currentWalletAddress.slice(-4)}`}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return labels[\"has-wallet\"];\r\n  }, [mounted, children, isLoadingLazorKit, isAnyWalletConnected, walletType, walletIcon, walletName, currentWalletAddress, labels]);\r\n\r\n  const handleDisconnect = useCallback(() => {\r\n    if (walletType === 'lazorkit') {\r\n      disconnectLazorKit()\r\n      window.localStorage.removeItem('SMART_WALLET_ADDRESS')\r\n      setWalletType('standard')\r\n    } else if (onDisconnect) {\r\n      onDisconnect()\r\n    }\r\n    setMenuOpen(false)\r\n  }, [walletType, disconnectLazorKit, onDisconnect, setWalletType])\r\n\r\n  const handleCopyAddress = useCallback(async () => {\r\n    if (currentWalletAddress) {\r\n      await navigator.clipboard.writeText(currentWalletAddress)\r\n      setCopied(true)\r\n      setTimeout(() => setCopied(false), 400)\r\n    }\r\n  }, [currentWalletAddress])\r\n\r\n  useEffect(() => {\r\n    setMounted(true)\r\n  }, [])\r\n\r\n  if (!isAnyWalletConnected) {\r\n    return (\r\n      <>\r\n        <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\r\n        <Button\r\n          {...props}\r\n          onClick={() => {\r\n            if (buttonState === \"has-wallet\" && onConnect) {\r\n              onConnect()\r\n            } else {\r\n              setWalletModalOpen(true)\r\n            }\r\n          }}\r\n        >\r\n          {content}\r\n        </Button>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <EnhancedWalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\r\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button {...props}>\r\n            {content}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent>\r\n          {currentWalletAddress && (\r\n            <DropdownMenuItem onClick={handleCopyAddress}>\r\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\r\n            </DropdownMenuItem>\r\n          )}\r\n          <DropdownMenuItem\r\n            onClick={() => {\r\n              setWalletModalOpen(true)\r\n              setMenuOpen(false)\r\n            }}\r\n          >\r\n            {labels[\"change-wallet\"]}\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={handleDisconnect}>\r\n            {labels[\"disconnect\"]}\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </>\r\n  )\r\n}\r\n\r\n// Public Exported Button\r\nexport function ConnectWalletButton(props: WalletButtonProps) {\r\n  return <BaseWalletMultiButton {...props} />\r\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/connect-wallet-button.tsx"
    },
    {
      "path": "components/providers/wallet-provider.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { useState, useMemo, createContext, useCallback, useEffect } from \"react\"\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\"\r\nimport type { Adapter } from \"@solana/wallet-adapter-base\"\r\nimport {\r\n  WalletProvider as SolanaWalletProvider,\r\n  ConnectionProvider as SolanaConnectionProvider,\r\n  ConnectionProviderProps,\r\n} from \"@solana/wallet-adapter-react\"\r\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\"\r\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-wallets\"\r\nimport { TxnSettingsProvider } from \"@/components/ui/murphy/txn-settings\"\r\nimport { ClientLazorKitProvider } from \"./client-lazorkit-provider\"\r\nimport { LazorKitWalletProvider } from \"./lazorkit-wallet-context\"\r\n\r\nimport \"@solana/wallet-adapter-react-ui/styles.css\"\r\n\r\n// Constants\r\nconst DEFAULT_MAINNET_RPC = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || \"https://api.mainnet-beta.solana.com\"\r\nconst DEFAULT_DEVNET_RPC = process.env.NEXT_PUBLIC_SOLANA_RPC_URL_DEVNET || \"https://api.devnet.solana.com\"\r\n\r\n// Create wrapper components\r\nconst ConnectionProviderWrapper = (props: ConnectionProviderProps) => (\r\n  <SolanaConnectionProvider {...props} />\r\n)\r\n\r\nconst WalletProviderWrapper = (props: any) => (\r\n  <SolanaWalletProvider {...props} />\r\n)\r\n\r\ninterface WalletProviderProps {\r\n  children: React.ReactNode\r\n  network?: WalletAdapterNetwork\r\n  endpoint?: string\r\n  wallets?: Adapter[]\r\n  autoConnect?: boolean\r\n}\r\n\r\ninterface ModalContextState {\r\n  isOpen: boolean\r\n  setIsOpen: (open: boolean) => void\r\n  endpoint?: string\r\n  switchToNextEndpoint: () => void\r\n  availableEndpoints: string[]\r\n  currentEndpointIndex: number\r\n  isMainnet: boolean\r\n  walletType: 'standard' | 'lazorkit'\r\n  setWalletType: (type: 'standard' | 'lazorkit') => void\r\n  networkType: WalletAdapterNetwork\r\n}\r\n\r\nexport const ModalContext = createContext<ModalContextState>({\r\n  isOpen: false,\r\n  setIsOpen: () => null,\r\n  endpoint: undefined,\r\n  switchToNextEndpoint: () => null,\r\n  availableEndpoints: [],\r\n  currentEndpointIndex: 0,\r\n  isMainnet: true, // Changed default to true for mainnet\r\n  walletType: 'standard',\r\n  setWalletType: () => null,\r\n  networkType: WalletAdapterNetwork.Mainnet, // Changed default to Mainnet\r\n})\r\n\r\nexport const WalletProvider = ({ children, ...props }: WalletProviderProps) => {\r\n  const [currentEndpointIndex, setCurrentEndpointIndex] = useState(0)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [walletType, setWalletType] = useState<'standard' | 'lazorkit'>(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const savedType = localStorage.getItem('walletType')\r\n      return (savedType as 'standard' | 'lazorkit') || 'standard'\r\n    }\r\n    return 'standard'\r\n  })\r\n\r\n  // Network detection - only force devnet for LazorKit operations\r\n  const isMainnet = useMemo(() => {\r\n    const mainnetEnv = process.env.NEXT_PUBLIC_USE_MAINNET\r\n    return mainnetEnv === undefined ? true : mainnetEnv === \"true\" // Default to mainnet\r\n  }, [])\r\n\r\n  const networkType = useMemo(\r\n    () => walletType === 'lazorkit' ? WalletAdapterNetwork.Devnet : (isMainnet ? WalletAdapterNetwork.Mainnet : WalletAdapterNetwork.Devnet),\r\n    [isMainnet, walletType]\r\n  )\r\n\r\n  // RPC endpoints management - use devnet RPC for LazorKit, otherwise use configured endpoint\r\n  const publicRPCs = useMemo(\r\n    () => [walletType === 'lazorkit' ? DEFAULT_DEVNET_RPC : (isMainnet ? DEFAULT_MAINNET_RPC : DEFAULT_DEVNET_RPC)],\r\n    [isMainnet, walletType]\r\n  )\r\n\r\n  const endpoint = useMemo(() => {\r\n    if (props.endpoint) {\r\n      return props.endpoint\r\n    }\r\n    return publicRPCs[currentEndpointIndex]\r\n  }, [props.endpoint, publicRPCs, currentEndpointIndex])\r\n\r\n  // Endpoint switching with error handling\r\n  const switchToNextEndpoint = useCallback(() => {\r\n    setCurrentEndpointIndex((prevIndex) => {\r\n      const nextIndex = (prevIndex + 1) % publicRPCs.length\r\n      console.log(\r\n        `Switching RPC endpoint from ${publicRPCs[prevIndex]} to ${publicRPCs[nextIndex]}`\r\n      )\r\n      return nextIndex\r\n    })\r\n  }, [publicRPCs])\r\n\r\n  // Wallet adapters\r\n  const wallets = useMemo(\r\n    () => props.wallets || [new PhantomWalletAdapter()],\r\n    [props.wallets]\r\n  )\r\n\r\n  // Persist wallet type\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.setItem('walletType', walletType)\r\n    }\r\n  }, [walletType])\r\n\r\n  // Auto-connect effect\r\n  useEffect(() => {\r\n    if (props.autoConnect && walletType === 'lazorkit') {\r\n      // Attempt to reconnect LazorKit wallet on mount\r\n      const reconnectLazorKit = async () => {\r\n        try {\r\n          // The actual reconnection will be handled by the LazorKitWalletProvider\r\n          console.log('Attempting to reconnect LazorKit wallet...')\r\n        } catch (error) {\r\n          console.error('Failed to reconnect LazorKit wallet:', error)\r\n        }\r\n      }\r\n      reconnectLazorKit()\r\n    }\r\n  }, [props.autoConnect, walletType])\r\n\r\n  // Effect to handle network switching for LazorKit\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const cluster = walletType === 'lazorkit' ? \"devnet\" : (isMainnet ? \"mainnet\" : \"devnet\")\r\n      window.localStorage.setItem(\"NEXT_PUBLIC_CLUSTER\", cluster)\r\n      ;(window as any).NEXT_PUBLIC_CLUSTER = cluster\r\n      window.dispatchEvent(new CustomEvent(\"clusterChanged\", { detail: { cluster } }))\r\n    }\r\n  }, [walletType, isMainnet])\r\n\r\n  // Context value memoization\r\n  const contextValue = useMemo(() => ({\r\n    isOpen,\r\n    setIsOpen,\r\n    endpoint,\r\n    switchToNextEndpoint,\r\n    availableEndpoints: publicRPCs,\r\n    currentEndpointIndex,\r\n    isMainnet,\r\n    walletType,\r\n    setWalletType,\r\n    networkType,\r\n  }), [\r\n    isOpen,\r\n    endpoint,\r\n    switchToNextEndpoint,\r\n    publicRPCs,\r\n    currentEndpointIndex,\r\n    isMainnet,\r\n    walletType,\r\n    networkType,\r\n  ])\r\n\r\n  return (\r\n    <ModalContext.Provider value={contextValue}>\r\n      <ConnectionProviderWrapper endpoint={endpoint}>\r\n        <WalletProviderWrapper \r\n          wallets={wallets} \r\n          autoConnect={props.autoConnect}\r\n          onError={(error: Error) => {\r\n            console.error('Wallet error:', error)\r\n            // Attempt to switch endpoint on connection errors\r\n            if (error.message.includes('connection') || error.message.includes('network')) {\r\n              switchToNextEndpoint()\r\n            }\r\n          }}\r\n        >\r\n          <WalletModalProvider>\r\n            <ClientLazorKitProvider>\r\n              <LazorKitWalletProvider>\r\n                <TxnSettingsProvider>{children}</TxnSettingsProvider>\r\n              </LazorKitWalletProvider>\r\n            </ClientLazorKitProvider>\r\n          </WalletModalProvider>\r\n        </WalletProviderWrapper>\r\n      </ConnectionProviderWrapper>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/providers/wallet-provider.tsx"
    },
    {
      "path": "hook/murphy/use-walletMultiButton.ts",
      "content": "import { useWallet, type Wallet } from '@solana/wallet-adapter-react';\r\nimport type { PublicKey } from '@solana/web3.js';\r\nimport { useCallback } from 'react';\r\n\r\ntype ButtonState = {\r\n    buttonState: 'connecting' | 'connected' | 'disconnecting' | 'has-wallet' | 'no-wallet';\r\n    onConnect?: () => void;\r\n    onDisconnect?: () => void;\r\n    onSelectWallet?: () => void;\r\n    publicKey?: PublicKey;\r\n    walletIcon?: Wallet['adapter']['icon'];\r\n    walletName?: Wallet['adapter']['name'];\r\n};\r\n\r\ntype Config = {\r\n    onSelectWallet: (config: {\r\n        onSelectWallet: (walletName: Wallet['adapter']['name']) => void;\r\n        wallets: Wallet[];\r\n    }) => void;\r\n};\r\n\r\nexport function useWalletMultiButton({ onSelectWallet }: Config): ButtonState {\r\n    const { connect, connected, connecting, disconnect, disconnecting, publicKey, select, wallet, wallets } =\r\n        useWallet();\r\n    let buttonState: ButtonState['buttonState'];\r\n    if (connecting) {\r\n        buttonState = 'connecting';\r\n    } else if (connected) {\r\n        buttonState = 'connected';\r\n    } else if (disconnecting) {\r\n        buttonState = 'disconnecting';\r\n    } else if (wallet) {\r\n        buttonState = 'has-wallet';\r\n    } else {\r\n        buttonState = 'no-wallet';\r\n    }\r\n    const handleConnect = useCallback(() => {\r\n        connect().catch(() => {\r\n        });\r\n    }, [connect]);\r\n    const handleDisconnect = useCallback(() => {\r\n        disconnect().catch(() => {\r\n        });\r\n    }, [disconnect]);\r\n    const handleSelectWallet = useCallback(() => {\r\n        onSelectWallet({ onSelectWallet: select, wallets });\r\n    }, [onSelectWallet, select, wallets]);\r\n    return {\r\n        buttonState,\r\n        onConnect: buttonState === 'has-wallet' ? handleConnect : undefined,\r\n        onDisconnect: buttonState !== 'disconnecting' && buttonState !== 'no-wallet' ? handleDisconnect : undefined,\r\n        onSelectWallet: handleSelectWallet,\r\n        publicKey: publicKey ?? undefined,\r\n        walletIcon: wallet?.adapter.icon,\r\n        walletName: wallet?.adapter.name,\r\n    };\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletMultiButton.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "components/providers/lazorkit-wallet-context.tsx",
      "content": "// components/providers/lazorkit-wallet-context.tsx\r\n\"use client\"\r\n\r\nimport React, { createContext, useContext, useCallback, useState, useEffect, useMemo } from \"react\"\r\nimport { useWallet as useLazorKitWallet, WalletAccount } from \"@lazorkit/wallet\"\r\nimport { Transaction, PublicKey, TransactionInstruction } from \"@solana/web3.js\"\r\n\r\n// Custom error class for LazorKit errors\r\nclass LazorKitError extends Error {\r\n  constructor(message: string, public code?: string, public isAccountNotFound: boolean = false) {\r\n    super(message)\r\n    this.name = 'LazorKitError'\r\n  }\r\n}\r\n\r\n// Extended WalletAccount to include createSmartWallet\r\ninterface ExtendedWalletAccount extends WalletAccount {\r\n  createSmartWallet?: () => Promise<void>\r\n}\r\n\r\n// Connect Response type for createPasskeyOnly\r\ninterface ConnectResponse {\r\n  publicKey: string\r\n  credentialId: string\r\n  isCreated: boolean\r\n  connectionType: 'create' | 'get'\r\n  timestamp: number\r\n}\r\n\r\n// Extended LazorKit wallet interface\r\ninterface ExtendedLazorKitWallet {\r\n  smartWalletPubkey: PublicKey | null\r\n  isConnected: boolean\r\n  isLoading: boolean\r\n  isConnecting: boolean\r\n  isSigning: boolean\r\n  error: Error | null\r\n  account: WalletAccount | null\r\n  connect: () => Promise<WalletAccount>\r\n  disconnect: () => Promise<void>\r\n  signTransaction: (instruction: TransactionInstruction) => Promise<Transaction>\r\n  signAndSendTransaction: (instruction: TransactionInstruction) => Promise<string>\r\n  createPasskeyOnly: () => Promise<ConnectResponse>\r\n  createSmartWalletOnly: (passkeyData: ConnectResponse) => Promise<{smartWalletAddress: string, account: WalletAccount}>\r\n  reconnect: () => Promise<WalletAccount>\r\n}\r\n\r\ninterface LazorKitWalletContextState {\r\n  smartWalletPubkey: PublicKey | null\r\n  isConnected: boolean\r\n  isLoading: boolean\r\n  isConnecting: boolean\r\n  isSigning: boolean\r\n  error: Error | null\r\n  account: ExtendedWalletAccount | null\r\n  connect: () => Promise<ExtendedWalletAccount>\r\n  disconnect: () => Promise<void>\r\n  reconnect: () => Promise<ExtendedWalletAccount>\r\n  signTransaction: (instruction: TransactionInstruction) => Promise<Transaction>\r\n  signAndSendTransaction: (instruction: TransactionInstruction) => Promise<string>\r\n  createPasskeyOnly: () => Promise<ConnectResponse>\r\n  createSmartWalletOnly: (passkeyData: ConnectResponse) => Promise<{smartWalletAddress: string, account: ExtendedWalletAccount}>\r\n  clearError: () => void\r\n}\r\n\r\nconst defaultContext: LazorKitWalletContextState = {\r\n  smartWalletPubkey: null,\r\n  isConnected: false,\r\n  isLoading: false,\r\n  isConnecting: false,\r\n  isSigning: false,\r\n  error: null,\r\n  account: null,\r\n  connect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  disconnect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  reconnect: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  signTransaction: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  signAndSendTransaction: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  createPasskeyOnly: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  createSmartWalletOnly: async () => { throw new LazorKitError(\"LazorKitWalletContext not initialized\") },\r\n  clearError: () => {}\r\n}\r\n\r\nexport const LazorKitWalletContext = createContext<LazorKitWalletContextState>(defaultContext)\r\n\r\nexport const useLazorKitWalletContext = () => {\r\n  const context = useContext(LazorKitWalletContext)\r\n  if (!context) {\r\n    throw new LazorKitError(\"useLazorKitWalletContext must be used within a LazorKitWalletProvider\")\r\n  }\r\n  return context\r\n}\r\n\r\n// Utility function for error handling\r\nconst handleError = (err: unknown): Error => {\r\n  if (err instanceof Error) {\r\n    // Check for specific error types\r\n    if (err.message.includes('Account does not exist') || \r\n        err.message.includes('has no data')) {\r\n      return new LazorKitError(\r\n        \"Smart wallet needs to be initialized. Please try connecting again.\", \r\n        'ACCOUNT_NOT_FOUND',\r\n        true\r\n      )\r\n    }\r\n    if (err.message.includes('NO_STORED_CREDENTIALS')) {\r\n      return new LazorKitError(\"No stored credentials found\", 'NO_STORED_CREDENTIALS')\r\n    }\r\n    if (err.message.includes('INVALID_CREDENTIALS')) {\r\n      return new LazorKitError(\"Invalid credentials\", 'INVALID_CREDENTIALS')\r\n    }\r\n    return err\r\n  }\r\n  return new LazorKitError(err instanceof Object ? JSON.stringify(err) : String(err))\r\n}\r\n\r\nexport function LazorKitWalletProvider({ children }: { children: React.ReactNode }) {\r\n  const wallet = useLazorKitWallet() as unknown as ExtendedLazorKitWallet\r\n\r\n  const [isConnecting, setIsConnecting] = useState(false)\r\n  const [error, setError] = useState<Error | null>(null)\r\n  const [retryCount, setRetryCount] = useState(0)\r\n  const MAX_RETRIES = 3\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  // Auto-retry connection on certain errors\r\n  useEffect(() => {\r\n    if (error && retryCount < MAX_RETRIES && !isConnecting) {\r\n      const timer = setTimeout(() => {\r\n        console.log(`Retrying connection (attempt ${retryCount + 1}/${MAX_RETRIES})`)\r\n        setRetryCount(prev => prev + 1)\r\n        connect()\r\n      }, Math.min(1000 * Math.pow(2, retryCount), 8000)) // Exponential backoff\r\n\r\n      return () => clearTimeout(timer)\r\n    }\r\n  }, [error, retryCount, isConnecting])\r\n\r\n  const connect = useCallback(async () => {\r\n    if (isConnecting) return wallet.account as ExtendedWalletAccount\r\n    \r\n    try {\r\n      setIsConnecting(true)\r\n      setError(null)\r\n      \r\n      // First try reconnecting with stored credentials\r\n      try {\r\n        const reconnectedAccount = await wallet.reconnect()\r\n        setRetryCount(0)\r\n        return reconnectedAccount as ExtendedWalletAccount\r\n      } catch (reconnectError) {\r\n        // If reconnect fails, try new connection\r\n        try {\r\n          const newAccount = await wallet.connect()\r\n          setRetryCount(0)\r\n          return newAccount as ExtendedWalletAccount\r\n        } catch (connectError) {\r\n          throw handleError(connectError)\r\n        }\r\n      }\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    } finally {\r\n      setIsConnecting(false)\r\n    }\r\n  }, [wallet.connect, wallet.reconnect, wallet.account, isConnecting])\r\n\r\n  const disconnect = useCallback(async () => {\r\n    try {\r\n      setError(null)\r\n      await wallet.disconnect()\r\n      setRetryCount(0)\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.disconnect])\r\n\r\n  const reconnect = useCallback(async () => {\r\n    try {\r\n      setError(null)\r\n      return await wallet.reconnect() as ExtendedWalletAccount\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.reconnect])\r\n\r\n  const createPasskeyOnly = useCallback(async () => {\r\n    try {\r\n      setError(null)\r\n      return await wallet.createPasskeyOnly()\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.createPasskeyOnly])\r\n\r\n  const createSmartWalletOnly = useCallback(async (passkeyData: ConnectResponse) => {\r\n    try {\r\n      setError(null)\r\n      return await wallet.createSmartWalletOnly(passkeyData)\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.createSmartWalletOnly])\r\n\r\n  const signTransaction = useCallback(async (instruction: TransactionInstruction) => {\r\n    try {\r\n      setError(null)\r\n      return await wallet.signTransaction(instruction)\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.signTransaction])\r\n\r\n  const signAndSendTransaction = useCallback(async (instruction: TransactionInstruction) => {\r\n    try {\r\n      setError(null)\r\n      return await wallet.signAndSendTransaction(instruction)\r\n    } catch (err) {\r\n      const error = handleError(err)\r\n      setError(error)\r\n      throw error\r\n    }\r\n  }, [wallet.signAndSendTransaction])\r\n\r\n  // Memoize the context value to prevent unnecessary re-renders\r\n  const value = useMemo(() => ({\r\n    smartWalletPubkey: wallet.smartWalletPubkey,\r\n    isConnected: wallet.isConnected,\r\n    isLoading: wallet.isLoading,\r\n    isConnecting,\r\n    isSigning: wallet.isSigning,\r\n    error,\r\n    account: wallet.account as ExtendedWalletAccount,\r\n    connect,\r\n    disconnect,\r\n    reconnect,\r\n    signTransaction,\r\n    signAndSendTransaction,\r\n    createPasskeyOnly,\r\n    createSmartWalletOnly,\r\n    clearError\r\n  }), [\r\n    wallet.smartWalletPubkey,\r\n    wallet.isConnected,\r\n    wallet.isLoading,\r\n    isConnecting,\r\n    wallet.isSigning,\r\n    error,\r\n    wallet.account,\r\n    connect,\r\n    disconnect,\r\n    reconnect,\r\n    signTransaction,\r\n    signAndSendTransaction,\r\n    createPasskeyOnly,\r\n    createSmartWalletOnly,\r\n    clearError\r\n  ])\r\n\r\n  return (\r\n    <LazorKitWalletContext.Provider value={value}>\r\n      {children}\r\n    </LazorKitWalletContext.Provider>\r\n  )\r\n}",
      "type": "registry:component",
      "target": "components/providers/lazorkit-wallet-context.tsx"
    },
    {
      "path": "components/providers/client-lazorkit-provider.tsx",
      "content": "\"use client\"\r\n\r\nimport React from \"react\"\r\nimport { LazorkitProvider } from \"@lazorkit/wallet\"\r\n\r\nconst DEFAULT_RPC_URL = \"https://api.devnet.solana.com\" // Changed to devnet as per docs\r\nconst DEFAULT_IPFS_URL = \"https://portal.lazor.sh\"\r\nconst DEFAULT_PAYMASTER_URL = \"https://lazorkit-paymaster.onrender.com\"\r\n\r\nexport function ClientLazorKitProvider({ children }: { children: React.ReactNode }) {\r\n  // Validate and use environment variables with fallbacks\r\n  const rpcUrl = process.env.LAZORKIT_RPC_URL || DEFAULT_RPC_URL\r\n  const ipfsUrl = process.env.LAZORKIT_PORTAL_URL || DEFAULT_IPFS_URL\r\n  const paymasterUrl = process.env.LAZORKIT_PAYMASTER_URL || DEFAULT_PAYMASTER_URL\r\n\r\n  // Enable debug mode in development\r\n  const debug = process.env.NODE_ENV === 'development'\r\n\r\n  // Log configuration in development\r\n  if (debug) {\r\n    console.debug('LazorKit Provider Configuration:', {\r\n      rpcUrl,\r\n      ipfsUrl,\r\n      paymasterUrl,\r\n      debug\r\n    })\r\n  }\r\n\r\n  return (\r\n    <LazorkitProvider\r\n      rpcUrl={rpcUrl}\r\n      ipfsUrl={ipfsUrl}\r\n      paymasterUrl={paymasterUrl}\r\n    >\r\n      {children}\r\n    </LazorkitProvider>\r\n  )\r\n}",
      "type": "registry:component",
      "target": "components/providers/client-lazorkit-provider.tsx"
    }
  ]
}