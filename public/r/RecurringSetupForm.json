{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "RecurringSetupForm",
  "type": "registry:block",
  "author": "Murphy",
  "description": "Murphy component to create Jupiter Recurring DCA Orders on Solana mainnet",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "sonner"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Jupiter-Recurring/RecurringSetupForm.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\"\nimport { PublicKey } from \"@solana/web3.js\"\nimport { toast } from \"sonner\"\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup } from \"@/components/ui/select\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { ExternalLink, CheckCircle, AlertCircle, Clock, Hash, DollarSign } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Mock TOKENS constant for demo\nconst TOKENS = {\n  SOL: new PublicKey(\"So11111111111111111111111111111111111111112\"),\n  USDC: new PublicKey(\"EPjFWdd5AufqSSLUs2wyz9G1spG496EEefCcxyBmCEjz\"),\n  USDT: new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\n}\n\nexport type RecurringSetupFormValues = {\n  inputMint: string\n  outputMint: string\n  inAmount: number | undefined\n  numberOfOrders: number\n  interval: number // seconds\n  minPrice?: number | null\n  maxPrice?: number | null\n  startAt?: number | null\n}\n\nconst SUPPORTED_TOKENS = [\n  { symbol: \"SOL\", mint: TOKENS.SOL.toString() },\n  { symbol: \"USDC\", mint: TOKENS.USDC.toString() },\n  { symbol: \"USDT\", mint: TOKENS.USDT.toString() },\n]\n\nconst INTERVAL_PRESETS = [\n  { label: \"1 Hour\", value: 3600 },\n  { label: \"6 Hours\", value: 21600 },\n  { label: \"1 Day\", value: 86400 },\n  { label: \"1 Week\", value: 604800 },\n]\n\nexport function RecurringSetupForm({\n  onOrderCreated,\n  className,\n}: {\n  onOrderCreated?: (orderId: string) => void\n  className?: string\n}) {\n  const { publicKey, connected, signTransaction } = useWallet()\n  const { connection } = useConnection()\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [success, setSuccess] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  const form = useForm<RecurringSetupFormValues>({\n    defaultValues: {\n      inputMint: SUPPORTED_TOKENS[1].mint, // USDC\n      outputMint: SUPPORTED_TOKENS[0].mint, // SOL\n      inAmount: undefined,\n      numberOfOrders: 2,\n      interval: 86400, // 1 day\n      minPrice: null,\n      maxPrice: null,\n      startAt: null,\n    },\n    mode: \"onSubmit\",\n  })\n\n  // Only render after wallet is connected\n  if (!connected || !publicKey) {\n    return (\n      <Card className={cn(\"max-w-2xl mx-auto\", className)}>\n        <CardHeader className=\"text-center pb-4\">\n          <CardTitle className=\"text-2xl\">Setup Recurring DCA Order</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>Please connect your wallet to continue.</AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Handle submit\n  const onSubmit = async (values: RecurringSetupFormValues) => {\n    setIsSubmitting(true)\n    setError(null)\n    setSuccess(null)\n\n    try {\n      // Validate\n      if (!values.inAmount || values.inAmount <= 0) throw new Error(\"Amount must be greater than 0\")\n      if (values.inputMint === values.outputMint) throw new Error(\"Input and output tokens must be different\")\n      if (!publicKey) throw new Error(\"Wallet not connected\")\n\n      // Prepare payload for Jupiter Recurring API\n      // Convert amount to raw (assume 6 decimals for USDC/USDT, 9 for SOL)\n      const decimals = values.inputMint === TOKENS.SOL.toString() ? 9 : 6\n      const inAmountRaw = Math.floor((values.inAmount || 0) * Math.pow(10, decimals))\n\n      const payload = {\n        user: publicKey.toString(),\n        inputMint: values.inputMint,\n        outputMint: values.outputMint,\n        params: {\n          time: {\n            inAmount: inAmountRaw,\n            numberOfOrders: values.numberOfOrders,\n            interval: values.interval,\n            minPrice: values.minPrice || null,\n            maxPrice: values.maxPrice || null,\n            startAt: values.startAt || null,\n          },\n        },\n      }\n\n      // Simulate API call for demo\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n      const mockTxId = \"5j7K8L9M0N1O2P3Q4R5S6T7U8V9W0X1Y2Z3A4B5C6D7E8F9G0H1I2J3K4L5M6N7O8P9Q0R1S2T3U4V5W6X7Y8Z9\"\n\n      setSuccess(mockTxId)\n      toast.success(\"Recurring DCA order created!\", { description: `Tx: ${mockTxId}` })\n      if (onOrderCreated) onOrderCreated(mockTxId)\n    } catch (e: any) {\n      setError(e.message || \"Unknown error\")\n      toast.error(\"Failed to create recurring order\", { description: e.message })\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const selectedInputToken = SUPPORTED_TOKENS.find((t) => t.mint === form.watch(\"inputMint\"))\n  const selectedOutputToken = SUPPORTED_TOKENS.find((t) => t.mint === form.watch(\"outputMint\"))\n\n  return (\n    <Card className={cn(\"max-w-2xl mx-auto\", className)}>\n      <CardHeader className=\"text-center pb-4\">\n        <CardTitle className=\"text-2xl\">Setup Recurring DCA Order</CardTitle>\n        <p className=\"text-muted-foreground mt-2\">Automate your dollar-cost averaging strategy with recurring orders</p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Token Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"inputMint\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base\">From Token</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger className=\"h-12\">\n                          <SelectValue placeholder=\"Select token\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectGroup>\n                            {SUPPORTED_TOKENS.map((t) => (\n                              <SelectItem key={t.mint} value={t.mint}>\n                                {t.symbol}\n                              </SelectItem>\n                            ))}\n                          </SelectGroup>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"outputMint\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base\">To Token</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger className=\"h-12\">\n                          <SelectValue placeholder=\"Select token\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectGroup>\n                            {SUPPORTED_TOKENS.map((t) => (\n                              <SelectItem key={t.mint} value={t.mint}>\n                                {t.symbol}\n                              </SelectItem>\n                            ))}\n                          </SelectGroup>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Order Configuration */}\n            <div className=\"space-y-3\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                Order Configuration\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"inAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-base\">Amount per Order</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min={0}\n                          step={0.000001}\n                          placeholder=\"100\"\n                          className=\"h-12 text-lg\"\n                          {...field}\n                          value={field.value ?? \"\"}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"numberOfOrders\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-base\">Number of Orders</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min={1}\n                          step={1}\n                          placeholder=\"10\"\n                          className=\"h-12 text-lg\"\n                          {...field}\n                          value={field.value ?? 2}\n                          disabled={isSubmitting}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Timing Configuration */}\n            <div className=\"space-y-3\">\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Timing\n              </h3>\n\n              {/* Interval Presets */}\n              <div className=\"space-y-3\">\n                <FormLabel className=\"text-base\">Interval Presets</FormLabel>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                  {INTERVAL_PRESETS.map((preset) => (\n                    <Button\n                      key={preset.value}\n                      type=\"button\"\n                      variant={form.watch(\"interval\") === preset.value ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => form.setValue(\"interval\", preset.value)}\n                      disabled={isSubmitting}\n                    >\n                      {preset.label}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"interval\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base\">Custom Interval (seconds)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={60}\n                        step={60}\n                        placeholder=\"86400\"\n                        className=\"h-12 text-lg\"\n                        {...field}\n                        value={field.value ?? 86400}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"p-6 bg-muted rounded-lg space-y-3\">\n              <h4 className=\"font-semibold flex items-center gap-2\">\n                <Hash className=\"h-4 w-4\" />\n                Order Summary\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Total Amount:</span>\n                  <p className=\"font-mono font-semibold\">\n                    {((form.watch(\"inAmount\") || 0) * form.watch(\"numberOfOrders\")).toLocaleString()}{\" \"}\n                    {selectedInputToken?.symbol}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Frequency:</span>\n                  <p className=\"font-mono font-semibold\">\n                    Every {Math.floor(form.watch(\"interval\") / 3600)}h{\" \"}\n                    {Math.floor((form.watch(\"interval\") % 3600) / 60)}m\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Duration:</span>\n                  <p className=\"font-mono font-semibold\">\n                    ~{Math.floor((form.watch(\"interval\") * form.watch(\"numberOfOrders\")) / 86400)} days\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Button type=\"submit\" className=\"w-full h-12 text-lg\" disabled={isSubmitting}>\n              {isSubmitting ? \"Creating Order...\" : \"Create Recurring Order\"}\n            </Button>\n\n            {success && (\n              <Alert className=\"border-emerald-200 bg-emerald-50 dark:border-emerald-800 dark:bg-emerald-950\">\n                <CheckCircle className=\"h-4 w-4 text-emerald-600 dark:text-emerald-400\" />\n                <AlertDescription className=\"text-emerald-800 dark:text-emerald-200\">\n                  <div className=\"flex items-center justify-between gap-2\">\n                    <span>Order created successfully!</span>\n                    <Button variant=\"ghost\" size=\"sm\" asChild>\n                      <a\n                        href={`https://solscan.io/tx/${success}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center gap-1\"\n                      >\n                        View Tx <ExternalLink className=\"h-3 w-3\" />\n                      </a>\n                    </Button>\n                  </div>\n                  <code className=\"block mt-2 text-xs font-mono break-all bg-emerald-100 dark:bg-emerald-900 p-2 rounded\">\n                    {success}\n                  </code>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default RecurringSetupForm\n",
      "type": "registry:component",
      "target": "components/ui/murphy/Jupiter-Recurring/RecurringSetupForm.tsx"
    }
  ]
}