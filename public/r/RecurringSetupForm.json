{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "RecurringSetupForm",
  "type": "registry:block",
  "author": "Murphy",
  "description": "Murphy component to create Jupiter Recurring DCA Orders on Solana mainnet",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "sonner"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Jupiter-Recurring/RecurringSetupForm.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\"\r\nimport { PublicKey } from \"@solana/web3.js\"\r\nimport { toast } from \"sonner\"\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup } from \"@/components/ui/select\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\r\nimport { ExternalLink, CheckCircle, AlertCircle, Clock, Hash, DollarSign } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Mock TOKENS constant for demo\r\nconst TOKENS = {\r\n  SOL: new PublicKey(\"So11111111111111111111111111111111111111112\"),\r\n  USDC: new PublicKey(\"EPjFWdd5AufqSSLUs2wyz9G1spG496EEefCcxyBmCEjz\"),\r\n  USDT: new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"),\r\n}\r\n\r\nexport type RecurringSetupFormValues = {\r\n  inputMint: string\r\n  outputMint: string\r\n  inAmount: number | undefined\r\n  numberOfOrders: number\r\n  interval: number // seconds\r\n  minPrice?: number | null\r\n  maxPrice?: number | null\r\n  startAt?: number | null\r\n}\r\n\r\nconst SUPPORTED_TOKENS = [\r\n  { symbol: \"SOL\", mint: TOKENS.SOL.toString() },\r\n  { symbol: \"USDC\", mint: TOKENS.USDC.toString() },\r\n  { symbol: \"USDT\", mint: TOKENS.USDT.toString() },\r\n]\r\n\r\nconst INTERVAL_PRESETS = [\r\n  { label: \"1 Hour\", value: 3600 },\r\n  { label: \"6 Hours\", value: 21600 },\r\n  { label: \"1 Day\", value: 86400 },\r\n  { label: \"1 Week\", value: 604800 },\r\n]\r\n\r\nexport function RecurringSetupForm({\r\n  onOrderCreated,\r\n  className,\r\n}: {\r\n  onOrderCreated?: (orderId: string) => void\r\n  className?: string\r\n}) {\r\n  const { publicKey, connected, signTransaction } = useWallet()\r\n  const { connection } = useConnection()\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [success, setSuccess] = useState<string | null>(null)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const form = useForm<RecurringSetupFormValues>({\r\n    defaultValues: {\r\n      inputMint: SUPPORTED_TOKENS[1].mint, // USDC\r\n      outputMint: SUPPORTED_TOKENS[0].mint, // SOL\r\n      inAmount: undefined,\r\n      numberOfOrders: 2,\r\n      interval: 86400, // 1 day\r\n      minPrice: null,\r\n      maxPrice: null,\r\n      startAt: null,\r\n    },\r\n    mode: \"onSubmit\",\r\n  })\r\n\r\n  // Only render after wallet is connected\r\n  if (!connected || !publicKey) {\r\n    return (\r\n      <Card className={cn(\"max-w-2xl mx-auto\", className)}>\r\n        <CardHeader className=\"text-center pb-4\">\r\n          <CardTitle className=\"text-2xl\">Setup Recurring DCA Order</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert>\r\n            <AlertCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>Please connect your wallet to continue.</AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  // Handle submit\r\n  const onSubmit = async (values: RecurringSetupFormValues) => {\r\n    setIsSubmitting(true)\r\n    setError(null)\r\n    setSuccess(null)\r\n\r\n    try {\r\n      // Validate\r\n      if (!values.inAmount || values.inAmount <= 0) throw new Error(\"Amount must be greater than 0\")\r\n      if (values.inputMint === values.outputMint) throw new Error(\"Input and output tokens must be different\")\r\n      if (!publicKey) throw new Error(\"Wallet not connected\")\r\n\r\n      // Prepare payload for Jupiter Recurring API\r\n      // Convert amount to raw (assume 6 decimals for USDC/USDT, 9 for SOL)\r\n      const decimals = values.inputMint === TOKENS.SOL.toString() ? 9 : 6\r\n      const inAmountRaw = Math.floor((values.inAmount || 0) * Math.pow(10, decimals))\r\n\r\n      const payload = {\r\n        user: publicKey.toString(),\r\n        inputMint: values.inputMint,\r\n        outputMint: values.outputMint,\r\n        params: {\r\n          time: {\r\n            inAmount: inAmountRaw,\r\n            numberOfOrders: values.numberOfOrders,\r\n            interval: values.interval,\r\n            minPrice: values.minPrice || null,\r\n            maxPrice: values.maxPrice || null,\r\n            startAt: values.startAt || null,\r\n          },\r\n        },\r\n      }\r\n\r\n      // Simulate API call for demo\r\n      await new Promise((resolve) => setTimeout(resolve, 2000))\r\n      const mockTxId = \"5j7K8L9M0N1O2P3Q4R5S6T7U8V9W0X1Y2Z3A4B5C6D7E8F9G0H1I2J3K4L5M6N7O8P9Q0R1S2T3U4V5W6X7Y8Z9\"\r\n\r\n      setSuccess(mockTxId)\r\n      toast.success(\"Recurring DCA order created!\", { description: `Tx: ${mockTxId}` })\r\n      if (onOrderCreated) onOrderCreated(mockTxId)\r\n    } catch (e: any) {\r\n      setError(e.message || \"Unknown error\")\r\n      toast.error(\"Failed to create recurring order\", { description: e.message })\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  const selectedInputToken = SUPPORTED_TOKENS.find((t) => t.mint === form.watch(\"inputMint\"))\r\n  const selectedOutputToken = SUPPORTED_TOKENS.find((t) => t.mint === form.watch(\"outputMint\"))\r\n\r\n  return (\r\n    <Card className={cn(\"max-w-2xl mx-auto\", className)}>\r\n      <CardHeader className=\"text-center pb-4\">\r\n        <CardTitle className=\"text-2xl\">Setup Recurring DCA Order</CardTitle>\r\n        <p className=\"text-muted-foreground mt-2\">Automate your dollar-cost averaging strategy with recurring orders</p>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n            {/* Token Selection */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"inputMint\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-base\">From Token</FormLabel>\r\n                    <FormControl>\r\n                      <Select onValueChange={field.onChange} value={field.value}>\r\n                        <SelectTrigger className=\"h-12\">\r\n                          <SelectValue placeholder=\"Select token\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectGroup>\r\n                            {SUPPORTED_TOKENS.map((t) => (\r\n                              <SelectItem key={t.mint} value={t.mint}>\r\n                                {t.symbol}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectGroup>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"outputMint\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-base\">To Token</FormLabel>\r\n                    <FormControl>\r\n                      <Select onValueChange={field.onChange} value={field.value}>\r\n                        <SelectTrigger className=\"h-12\">\r\n                          <SelectValue placeholder=\"Select token\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectGroup>\r\n                            {SUPPORTED_TOKENS.map((t) => (\r\n                              <SelectItem key={t.mint} value={t.mint}>\r\n                                {t.symbol}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectGroup>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n\r\n            {/* Order Configuration */}\r\n            <div className=\"space-y-3\">\r\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n                <DollarSign className=\"h-5 w-5\" />\r\n                Order Configuration\r\n              </h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"inAmount\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-base\">Amount per Order</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min={0}\r\n                          step={0.000001}\r\n                          placeholder=\"100\"\r\n                          className=\"h-12 text-lg\"\r\n                          {...field}\r\n                          value={field.value ?? \"\"}\r\n                          disabled={isSubmitting}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"numberOfOrders\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-base\">Number of Orders</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min={1}\r\n                          step={1}\r\n                          placeholder=\"10\"\r\n                          className=\"h-12 text-lg\"\r\n                          {...field}\r\n                          value={field.value ?? 2}\r\n                          disabled={isSubmitting}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Timing Configuration */}\r\n            <div className=\"space-y-3\">\r\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                Timing\r\n              </h3>\r\n\r\n              {/* Interval Presets */}\r\n              <div className=\"space-y-3\">\r\n                <FormLabel className=\"text-base\">Interval Presets</FormLabel>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\r\n                  {INTERVAL_PRESETS.map((preset) => (\r\n                    <Button\r\n                      key={preset.value}\r\n                      type=\"button\"\r\n                      variant={form.watch(\"interval\") === preset.value ? \"default\" : \"outline\"}\r\n                      size=\"sm\"\r\n                      onClick={() => form.setValue(\"interval\", preset.value)}\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      {preset.label}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"interval\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-base\">Custom Interval (seconds)</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        type=\"number\"\r\n                        min={60}\r\n                        step={60}\r\n                        placeholder=\"86400\"\r\n                        className=\"h-12 text-lg\"\r\n                        {...field}\r\n                        value={field.value ?? 86400}\r\n                        disabled={isSubmitting}\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </div>\r\n\r\n            {/* Order Summary */}\r\n            <div className=\"p-6 bg-muted rounded-lg space-y-3\">\r\n              <h4 className=\"font-semibold flex items-center gap-2\">\r\n                <Hash className=\"h-4 w-4\" />\r\n                Order Summary\r\n              </h4>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Total Amount:</span>\r\n                  <p className=\"font-mono font-semibold\">\r\n                    {((form.watch(\"inAmount\") || 0) * form.watch(\"numberOfOrders\")).toLocaleString()}{\" \"}\r\n                    {selectedInputToken?.symbol}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Frequency:</span>\r\n                  <p className=\"font-mono font-semibold\">\r\n                    Every {Math.floor(form.watch(\"interval\") / 3600)}h{\" \"}\r\n                    {Math.floor((form.watch(\"interval\") % 3600) / 60)}m\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <span className=\"text-muted-foreground\">Duration:</span>\r\n                  <p className=\"font-mono font-semibold\">\r\n                    ~{Math.floor((form.watch(\"interval\") * form.watch(\"numberOfOrders\")) / 86400)} days\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <Button type=\"submit\" className=\"w-full h-12 text-lg\" disabled={isSubmitting}>\r\n              {isSubmitting ? \"Creating Order...\" : \"Create Recurring Order\"}\r\n            </Button>\r\n\r\n            {success && (\r\n              <Alert className=\"border-emerald-200 bg-emerald-50 dark:border-emerald-800 dark:bg-emerald-950\">\r\n                <CheckCircle className=\"h-4 w-4 text-emerald-600 dark:text-emerald-400\" />\r\n                <AlertDescription className=\"text-emerald-800 dark:text-emerald-200\">\r\n                  <div className=\"flex items-center justify-between gap-2\">\r\n                    <span>Order created successfully!</span>\r\n                    <Button variant=\"ghost\" size=\"sm\" asChild>\r\n                      <a\r\n                        href={`https://solscan.io/tx/${success}`}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"flex items-center gap-1\"\r\n                      >\r\n                        View Tx <ExternalLink className=\"h-3 w-3\" />\r\n                      </a>\r\n                    </Button>\r\n                  </div>\r\n                  <code className=\"block mt-2 text-xs font-mono break-all bg-emerald-100 dark:bg-emerald-900 p-2 rounded\">\r\n                    {success}\r\n                  </code>\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n\r\n            {error && (\r\n              <Alert variant=\"destructive\">\r\n                <AlertCircle className=\"h-4 w-4\" />\r\n                <AlertDescription>{error}</AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </form>\r\n        </Form>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default RecurringSetupForm\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/Jupiter-Recurring/RecurringSetupForm.tsx"
    }
  ]
}