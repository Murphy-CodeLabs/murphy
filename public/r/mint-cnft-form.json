{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mint-cnft-form",
  "type": "registry:block",
  "title": "Mint CNFT Form",
  "description": "A simple mint CNFT form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mint-cnft-form.tsx",
      "content": "'use client';\n\nimport { useState, useContext, useEffect } from 'react';\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { generateSigner, percentAmount } from '@metaplex-foundation/umi';\nimport { createNft } from '@metaplex-foundation/mpl-token-metadata';\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\nimport { publicKey as umiPublicKey } from '@metaplex-foundation/umi';\nimport { mintToCollectionV1 } from '@metaplex-foundation/mpl-bubblegum';\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Plus } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\nexport interface MintCNFTProps {\n  collectionMint?: string;\n  merkleTree?: string;\n  rpcUrl?: string;\n  className?: string;\n}\n\n// Type for CNFT form values\ntype CNFTFormValues = {\n  name: string;\n  symbol: string;\n  uri: string;\n  merkleTreeAddress: string;\n  collectionMint: string;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate name\n  if (!data.name) {\n    errors.name = {\n      type: \"required\",\n      message: \"Name is required\",\n    };\n  }\n\n  // Validate symbol\n  if (!data.symbol) {\n    errors.symbol = {\n      type: \"required\",\n      message: \"Symbol is required\",\n    };\n  }\n\n  // Validate uri\n  if (!data.uri) {\n    errors.uri = {\n      type: \"required\",\n      message: \"Metadata URI is required\",\n    };\n  }\n\n  // Validate merkleTreeAddress\n  if (!data.merkleTreeAddress) {\n    errors.merkleTreeAddress = {\n      type: \"required\",\n      message: \"Merkle Tree address is required\",\n    };\n  }\n\n  try {\n    // Validate address format for merkleTreeAddress\n    if (data.merkleTreeAddress) {\n      umiPublicKey(data.merkleTreeAddress);\n    }\n  } catch (err) {\n    errors.merkleTreeAddress = {\n      type: \"pattern\",\n      message: \"Invalid Solana address\",\n    };\n  }\n\n  try {\n    // Validate address format for collectionMint (if provided)\n    if (data.collectionMint) {\n      umiPublicKey(data.collectionMint);\n    }\n  } catch (err) {\n    errors.collectionMint = {\n      type: \"pattern\",\n      message: \"Invalid Solana address\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport function MintCNFT({ collectionMint: propCollectionMint, merkleTree: propMerkleTree, className }: MintCNFTProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n  \n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<{\n    signature: string;\n    nftAddress: string;\n  } | null>(null);\n\n  // Form setup with react-hook-form\n  const form = useForm<CNFTFormValues>({\n    defaultValues: {\n      name: \"\",\n      symbol: \"\",\n      uri: \"\",\n      merkleTreeAddress: propMerkleTree || \"\",\n      collectionMint: propCollectionMint || \"\",\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Only render after the component is mounted on the client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Update network state when endpoint changes\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Handle form submission\n  const onSubmit = async (values: CNFTFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setCurrentStage('confirming');\n      \n      toast.loading(\"Creating CNFT...\", {\n        id: \"create-cnft\"\n      });\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Create UMI instance\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplTokenMetadata());\n      \n      // Convert addresses\n      const walletPublicKey = publicKey.toBase58();\n      const leafOwnerPubkey = umiPublicKey(walletPublicKey);\n      const merkleTreePubkey = umiPublicKey(values.merkleTreeAddress);\n      \n      // Use mintToCollectionV1 instead of mintV1\n      const { mplBubblegum } = await import('@metaplex-foundation/mpl-bubblegum');\n      umi.use(mplBubblegum());\n      \n      // Check if collection exists\n      let collectionMintPubkey;\n      if (values.collectionMint) {\n        try {\n          collectionMintPubkey = umiPublicKey(values.collectionMint);\n          \n          // Check collection by direct fetch\n          try {\n            // Check if collection exists by getting account info\n            const collectionAccount = await umi.rpc.getAccount(collectionMintPubkey);\n            if (!collectionAccount.exists) {\n              throw new Error(\"Collection does not exist\");\n            }\n          } catch (err) {\n            throw new Error(\"Invalid or not found Collection NFT. Please try another collection.\");\n          }\n        } catch (err) {\n          throw new Error(\"Invalid collection. Please try another collection or leave empty to create new.\");\n        }\n      } else {\n        try {\n          // Create a temporary collection if none exists\n          const tempCollectionMint = generateSigner(umi);\n          \n          // Create collection NFT and wait for full confirmation\n          const createCollectionResult = await createNft(umi, {\n            mint: tempCollectionMint,\n            name: values.name + \" Collection\",\n            symbol: values.symbol,\n            uri: values.uri,\n            sellerFeeBasisPoints: percentAmount(5.0),\n            isCollection: true,\n          }).sendAndConfirm(umi);\n          \n          // Wait 2 seconds for transaction to be fully confirmed on network\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          \n          collectionMintPubkey = tempCollectionMint.publicKey;\n        } catch (err) {\n          throw new Error(\"Failed to create collection for CNFT. Please try with an existing collection.\");\n        }\n      }\n      \n      // Configure mintToCollectionV1\n      const metadataArgs = {\n        name: values.name,\n        uri: values.uri,\n        sellerFeeBasisPoints: 500,\n        collection: {\n          key: collectionMintPubkey,\n          verified: false\n        },\n        creators: [\n          { address: umi.identity.publicKey, verified: false, share: 100 }\n        ],\n      };\n      \n      const mintConfig = {\n        leafOwner: leafOwnerPubkey,\n        merkleTree: merkleTreePubkey,\n        collectionMint: collectionMintPubkey,\n        metadata: metadataArgs,\n      };\n      \n      try {\n        const nftSigner = generateSigner(umi);\n        const mintResult = await mintToCollectionV1(umi, mintConfig).sendAndConfirm(umi);\n        \n        // Save result\n        setResult({\n          signature: mintResult.signature.toString(),\n          nftAddress: nftSigner.publicKey.toString()\n        });\n        \n        toast.success(\"CNFT created successfully!\", {\n          id: \"create-cnft\",\n          description: `cNFT: ${values.name}`\n        });\n        \n        setCurrentStage('success');\n      } catch (mintErrorUnknown) {\n        const mintError = mintErrorUnknown as Error;\n        // If error is related to collection metadata, try creating new collection\n        if (mintError.message && mintError.message.includes(\"collection_metadata\")) {\n          // Create new collection\n          const newCollectionMint = generateSigner(umi);\n          \n          try {\n            // Create collection NFT and wait for confirmation\n            const createCollectionResult = await createNft(umi, {\n              mint: newCollectionMint,\n              name: values.name + \" Collection\",\n              symbol: values.symbol,\n              uri: values.uri,\n              sellerFeeBasisPoints: percentAmount(5.0),\n              isCollection: true,\n            }).sendAndConfirm(umi);\n            \n            // Wait 2 seconds for transaction confirmation\n            await new Promise(resolve => setTimeout(resolve, 2000));\n            \n            // Try minting again with new collection\n            const newMintConfig = {\n              ...mintConfig,\n              collectionMint: newCollectionMint.publicKey,\n              metadata: {\n                ...metadataArgs,\n                collection: {\n                  key: newCollectionMint.publicKey,\n                  verified: false\n                }\n              }\n            };\n            \n            const nftSigner = generateSigner(umi);\n            const newMintResult = await mintToCollectionV1(umi, newMintConfig).sendAndConfirm(umi);\n            \n            // Save result\n            setResult({\n              signature: newMintResult.signature.toString(),\n              nftAddress: nftSigner.publicKey.toString()\n            });\n            \n            toast.success(\"CNFT created successfully with new collection!\", {\n              id: \"create-cnft\",\n              description: `cNFT: ${values.name}`\n            });\n            \n            setCurrentStage('success');\n            \n            // Update form with new collection mint\n            form.setValue('collectionMint', newCollectionMint.publicKey.toString());\n          } catch (retryErrorUnknown) {\n            const retryError = retryErrorUnknown as Error;\n            throw new Error(`Cannot create CNFT: ${retryError.message}`);\n          }\n        } else {\n          // If it's a different error, throw it again\n          throw mintError;\n        }\n      }\n    } catch (err: any) {\n      console.error(\"Create CNFT error:\", err);\n      setError(err.message);\n      setCurrentStage('error');\n      \n      toast.error(\"Failed to create CNFT\", {\n        id: \"create-cnft\",\n        description: err.message\n      });\n      \n      // If transaction fails due to connection error, try switching to another endpoint\n      if (err.message.includes('failed to fetch') || \n          err.message.includes('timeout') || \n          err.message.includes('429') ||\n          err.message.includes('503')) {\n        switchToNextEndpoint();\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const viewNFT = () => {\n    if (result?.nftAddress) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\n      window.open(`${baseUrl}${result.nftAddress}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setError(null);\n    setCurrentStage('input');\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">CNFT Created!</h3>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">CNFT Address:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.nftAddress}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.signature}\n        </div>\n      </div>\n      \n      <div className=\"flex gap-2 mt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={viewNFT}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View CNFT\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          onClick={viewExplorer}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Transaction\n        </Button>\n      </div>\n      \n      <Button \n        onClick={resetForm}\n        className=\"w-full\"\n      >\n        <Plus className=\"h-4 w-4 mr-2\" />\n        Create New CNFT\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the CNFT.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating CNFT</h3>\n      <p className=\"text-muted-foreground\">Please wait while your CNFT is being created...</p>\n    </div>\n  );\n\n  // Render form view\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>CNFT Name</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter CNFT name\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Display name of the CNFT\n              </p>\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"symbol\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Symbol</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter symbol (e.g., BTC, ETH)\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Short symbol for your CNFT\n              </p>\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"uri\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Metadata URI</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter metadata URI\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Link to the metadata of the CNFT (JSON)\n              </p>\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"merkleTreeAddress\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Merkle Tree Address</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter Merkle Tree address\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Address of the Merkle Tree to mint CNFT into\n              </p>\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"collectionMint\"\n          render={({ field }) => (\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center\">\n                <FormLabel>Collection Mint (Optional)</FormLabel>\n              </div>\n              <FormControl>\n                <Input\n                  placeholder=\"Enter Collection Mint address or leave empty to create new\"\n                  {...field}\n                  disabled={isSubmitting}\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                />\n              </FormControl>\n              <FormMessage />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Collection NFT mint address, if left empty, a new collection will be created\n              </p>\n            </FormItem>\n          )}\n        />\n                \n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Creating...\n                  </>\n                ) : \"Create CNFT\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  // Avoid hydration error\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Create CNFT</CardTitle>\n          <CardDescription>Create a new compressed NFT on Solana</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Create CNFT</span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Create a new compressed NFT on Solana</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/mint-cnft-form.tsx"
    }
  ]
}