{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mint-cnft-form",
  "type": "registry:block",
  "title": "Mint CNFT Form",
  "description": "A simple mint CNFT form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mint-cnft-form.tsx",
      "content": "'use client';\r\n\r\nimport { useState, useContext, useEffect } from 'react';\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { generateSigner, percentAmount } from '@metaplex-foundation/umi';\r\nimport { createNft } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport { mplTokenMetadata } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { publicKey as umiPublicKey } from '@metaplex-foundation/umi';\r\nimport { mintToCollectionV1 } from '@metaplex-foundation/mpl-bubblegum';\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Plus } from \"lucide-react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\nexport interface MintCNFTProps {\r\n  collectionMint?: string;\r\n  merkleTree?: string;\r\n  rpcUrl?: string;\r\n  className?: string;\r\n}\r\n\r\n// Type for CNFT form values\r\ntype CNFTFormValues = {\r\n  name: string;\r\n  symbol: string;\r\n  uri: string;\r\n  merkleTreeAddress: string;\r\n  collectionMint: string;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate name\r\n  if (!data.name) {\r\n    errors.name = {\r\n      type: \"required\",\r\n      message: \"Name is required\",\r\n    };\r\n  }\r\n\r\n  // Validate symbol\r\n  if (!data.symbol) {\r\n    errors.symbol = {\r\n      type: \"required\",\r\n      message: \"Symbol is required\",\r\n    };\r\n  }\r\n\r\n  // Validate uri\r\n  if (!data.uri) {\r\n    errors.uri = {\r\n      type: \"required\",\r\n      message: \"Metadata URI is required\",\r\n    };\r\n  }\r\n\r\n  // Validate merkleTreeAddress\r\n  if (!data.merkleTreeAddress) {\r\n    errors.merkleTreeAddress = {\r\n      type: \"required\",\r\n      message: \"Merkle Tree address is required\",\r\n    };\r\n  }\r\n\r\n  try {\r\n    // Validate address format for merkleTreeAddress\r\n    if (data.merkleTreeAddress) {\r\n      umiPublicKey(data.merkleTreeAddress);\r\n    }\r\n  } catch (err) {\r\n    errors.merkleTreeAddress = {\r\n      type: \"pattern\",\r\n      message: \"Invalid Solana address\",\r\n    };\r\n  }\r\n\r\n  try {\r\n    // Validate address format for collectionMint (if provided)\r\n    if (data.collectionMint) {\r\n      umiPublicKey(data.collectionMint);\r\n    }\r\n  } catch (err) {\r\n    errors.collectionMint = {\r\n      type: \"pattern\",\r\n      message: \"Invalid Solana address\",\r\n    };\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport function MintCNFT({ collectionMint: propCollectionMint, merkleTree: propMerkleTree, className }: MintCNFTProps) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\r\n  \r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [result, setResult] = useState<{\r\n    signature: string;\r\n    nftAddress: string;\r\n  } | null>(null);\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<CNFTFormValues>({\r\n    defaultValues: {\r\n      name: \"\",\r\n      symbol: \"\",\r\n      uri: \"\",\r\n      merkleTreeAddress: propMerkleTree || \"\",\r\n      collectionMint: propCollectionMint || \"\",\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Only render after the component is mounted on the client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Update network state when endpoint changes\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (values: CNFTFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error('Please connect your wallet');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(null);\r\n      setCurrentStage('confirming');\r\n      \r\n      toast.loading(\"Creating CNFT...\", {\r\n        id: \"create-cnft\"\r\n      });\r\n\r\n      // Create wallet adapter for signing transactions\r\n      const walletAdapter = {\r\n        publicKey,\r\n        signTransaction,\r\n        signAllTransactions\r\n      };\r\n\r\n      // Create UMI instance\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity(walletAdapter))\r\n        .use(mplTokenMetadata());\r\n      \r\n      // Convert addresses\r\n      const walletPublicKey = publicKey.toBase58();\r\n      const leafOwnerPubkey = umiPublicKey(walletPublicKey);\r\n      const merkleTreePubkey = umiPublicKey(values.merkleTreeAddress);\r\n      \r\n      // Use mintToCollectionV1 instead of mintV1\r\n      const { mplBubblegum } = await import('@metaplex-foundation/mpl-bubblegum');\r\n      umi.use(mplBubblegum());\r\n      \r\n      // Check if collection exists\r\n      let collectionMintPubkey;\r\n      if (values.collectionMint) {\r\n        try {\r\n          collectionMintPubkey = umiPublicKey(values.collectionMint);\r\n          \r\n          // Check collection by direct fetch\r\n          try {\r\n            // Check if collection exists by getting account info\r\n            const collectionAccount = await umi.rpc.getAccount(collectionMintPubkey);\r\n            if (!collectionAccount.exists) {\r\n              throw new Error(\"Collection does not exist\");\r\n            }\r\n          } catch (err) {\r\n            throw new Error(\"Invalid or not found Collection NFT. Please try another collection.\");\r\n          }\r\n        } catch (err) {\r\n          throw new Error(\"Invalid collection. Please try another collection or leave empty to create new.\");\r\n        }\r\n      } else {\r\n        try {\r\n          // Create a temporary collection if none exists\r\n          const tempCollectionMint = generateSigner(umi);\r\n          \r\n          // Create collection NFT and wait for full confirmation\r\n          const createCollectionResult = await createNft(umi, {\r\n            mint: tempCollectionMint,\r\n            name: values.name + \" Collection\",\r\n            symbol: values.symbol,\r\n            uri: values.uri,\r\n            sellerFeeBasisPoints: percentAmount(5.0),\r\n            isCollection: true,\r\n          }).sendAndConfirm(umi);\r\n          \r\n          // Wait 2 seconds for transaction to be fully confirmed on network\r\n          await new Promise(resolve => setTimeout(resolve, 2000));\r\n          \r\n          collectionMintPubkey = tempCollectionMint.publicKey;\r\n        } catch (err) {\r\n          throw new Error(\"Failed to create collection for CNFT. Please try with an existing collection.\");\r\n        }\r\n      }\r\n      \r\n      // Configure mintToCollectionV1\r\n      const metadataArgs = {\r\n        name: values.name,\r\n        uri: values.uri,\r\n        sellerFeeBasisPoints: 500,\r\n        collection: {\r\n          key: collectionMintPubkey,\r\n          verified: false\r\n        },\r\n        creators: [\r\n          { address: umi.identity.publicKey, verified: false, share: 100 }\r\n        ],\r\n      };\r\n      \r\n      const mintConfig = {\r\n        leafOwner: leafOwnerPubkey,\r\n        merkleTree: merkleTreePubkey,\r\n        collectionMint: collectionMintPubkey,\r\n        metadata: metadataArgs,\r\n      };\r\n      \r\n      try {\r\n        const nftSigner = generateSigner(umi);\r\n        const mintResult = await mintToCollectionV1(umi, mintConfig).sendAndConfirm(umi);\r\n        \r\n        // Save result\r\n        setResult({\r\n          signature: mintResult.signature.toString(),\r\n          nftAddress: nftSigner.publicKey.toString()\r\n        });\r\n        \r\n        toast.success(\"CNFT created successfully!\", {\r\n          id: \"create-cnft\",\r\n          description: `cNFT: ${values.name}`\r\n        });\r\n        \r\n        setCurrentStage('success');\r\n      } catch (mintErrorUnknown) {\r\n        const mintError = mintErrorUnknown as Error;\r\n        // If error is related to collection metadata, try creating new collection\r\n        if (mintError.message && mintError.message.includes(\"collection_metadata\")) {\r\n          // Create new collection\r\n          const newCollectionMint = generateSigner(umi);\r\n          \r\n          try {\r\n            // Create collection NFT and wait for confirmation\r\n            const createCollectionResult = await createNft(umi, {\r\n              mint: newCollectionMint,\r\n              name: values.name + \" Collection\",\r\n              symbol: values.symbol,\r\n              uri: values.uri,\r\n              sellerFeeBasisPoints: percentAmount(5.0),\r\n              isCollection: true,\r\n            }).sendAndConfirm(umi);\r\n            \r\n            // Wait 2 seconds for transaction confirmation\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n            \r\n            // Try minting again with new collection\r\n            const newMintConfig = {\r\n              ...mintConfig,\r\n              collectionMint: newCollectionMint.publicKey,\r\n              metadata: {\r\n                ...metadataArgs,\r\n                collection: {\r\n                  key: newCollectionMint.publicKey,\r\n                  verified: false\r\n                }\r\n              }\r\n            };\r\n            \r\n            const nftSigner = generateSigner(umi);\r\n            const newMintResult = await mintToCollectionV1(umi, newMintConfig).sendAndConfirm(umi);\r\n            \r\n            // Save result\r\n            setResult({\r\n              signature: newMintResult.signature.toString(),\r\n              nftAddress: nftSigner.publicKey.toString()\r\n            });\r\n            \r\n            toast.success(\"CNFT created successfully with new collection!\", {\r\n              id: \"create-cnft\",\r\n              description: `cNFT: ${values.name}`\r\n            });\r\n            \r\n            setCurrentStage('success');\r\n            \r\n            // Update form with new collection mint\r\n            form.setValue('collectionMint', newCollectionMint.publicKey.toString());\r\n          } catch (retryErrorUnknown) {\r\n            const retryError = retryErrorUnknown as Error;\r\n            throw new Error(`Cannot create CNFT: ${retryError.message}`);\r\n          }\r\n        } else {\r\n          // If it's a different error, throw it again\r\n          throw mintError;\r\n        }\r\n      }\r\n    } catch (err: any) {\r\n      console.error(\"Create CNFT error:\", err);\r\n      setError(err.message);\r\n      setCurrentStage('error');\r\n      \r\n      toast.error(\"Failed to create CNFT\", {\r\n        id: \"create-cnft\",\r\n        description: err.message\r\n      });\r\n      \r\n      // If transaction fails due to connection error, try switching to another endpoint\r\n      if (err.message.includes('failed to fetch') || \r\n          err.message.includes('timeout') || \r\n          err.message.includes('429') ||\r\n          err.message.includes('503')) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\r\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  const viewNFT = () => {\r\n    if (result?.nftAddress) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\r\n      window.open(`${baseUrl}${result.nftAddress}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setError(null);\r\n    setCurrentStage('input');\r\n  };\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-center\">CNFT Created!</h3>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">CNFT Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.nftAddress}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewNFT}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View CNFT\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewExplorer}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Transaction\r\n        </Button>\r\n      </div>\r\n      \r\n      <Button \r\n        onClick={resetForm}\r\n        className=\"w-full\"\r\n      >\r\n        <Plus className=\"h-4 w-4 mr-2\" />\r\n        Create New CNFT\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\r\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the CNFT.'}</p>\r\n      <Button \r\n        onClick={() => {\r\n          setCurrentStage('input');\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render confirmation view\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creating CNFT</h3>\r\n      <p className=\"text-muted-foreground\">Please wait while your CNFT is being created...</p>\r\n    </div>\r\n  );\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"name\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>CNFT Name</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter CNFT name\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Display name of the CNFT\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        \r\n        <FormField\r\n          control={form.control}\r\n          name=\"symbol\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Symbol</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter symbol (e.g., BTC, ETH)\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Short symbol for your CNFT\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        \r\n        <FormField\r\n          control={form.control}\r\n          name=\"uri\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Metadata URI</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter metadata URI\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Link to the metadata of the CNFT (JSON)\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        \r\n        <FormField\r\n          control={form.control}\r\n          name=\"merkleTreeAddress\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Merkle Tree Address</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter Merkle Tree address\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Address of the Merkle Tree to mint CNFT into\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n        \r\n        <FormField\r\n          control={form.control}\r\n          name=\"collectionMint\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Collection Mint (Optional)</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter Collection Mint address or leave empty to create new\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                Collection NFT mint address, if left empty, a new collection will be created\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n                \r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Creating...\r\n                  </>\r\n                ) : \"Create CNFT\"}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render based on current stage\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  // Avoid hydration error\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Create CNFT</CardTitle>\r\n          <CardDescription>Create a new compressed NFT on Solana</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Create CNFT</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>Create a new compressed NFT on Solana</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/mint-cnft-form.tsx"
    }
  ]
}