{
    "name": "core-candy-machine-form",
    "description": "A Metaplex Core Candy Machine creation component with shadcn UI styling, supporting next-generation NFTs.",
    "type": "components:ui",
    "dependencies": [
        "@solana/web3.js",
        "@solana/wallet-adapter-react",
        "@metaplex-foundation/umi",
        "@metaplex-foundation/umi-bundle-defaults",
        "@metaplex-foundation/umi-signer-wallet-adapters",
        "@metaplex-foundation/mpl-core",
        "@metaplex-foundation/mpl-core-candy-machine",
        "react-hook-form",
        "sonner"
    ],
    "devDependencies": [],
    "registryDependencies": [
        "card",
        "form",
        "input",
        "button",
        "textarea",
        "switch",
        "label",
        "badge",
        "alert",
        "select",
        "dialog"
    ],
    "files": [
        {
            "name": "core-candy-machine-form.tsx",
            "content": "'use client';\n\n// React vÃ  hooks\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\n\n// Solana\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { PublicKey, Keypair } from '@solana/web3.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\n// Icons and notifications\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Settings, Plus, X } from \"lucide-react\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\n// Import Metaplex Core Candy Machine libraries\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\nimport { mplCore } from '@metaplex-foundation/mpl-core';\nimport { mplCandyMachine } from '@metaplex-foundation/mpl-core-candy-machine';\nimport {\n  create,\n  addConfigLines,\n  fetchCandyMachine,\n  CandyMachine,\n} from '@metaplex-foundation/mpl-core-candy-machine';\nimport {\n  generateSigner,\n  publicKey as umiPublicKey,\n  sol,\n  dateTime,\n  some,\n  none,\n  BigInt\n} from '@metaplex-foundation/umi';\n\ninterface CoreCandyMachineResult {\n  candyMachine: string;\n  signature: string;\n  collection?: string;\n}\n\ninterface ConfigLine {\n  name: string;\n  uri: string;\n}\n\ntype CoreCandyMachineFormValues = {\n  // Basic Settings\n  itemsAvailable: number;\n  price: number;\n  symbol: string;\n  sellerFeeBasisPoints: number;\n  isMutable: boolean;\n\n  // Collection (optional)\n  collection?: string;\n\n  // Sale Settings\n  goLiveDate?: string;\n  endDate?: string;\n\n  // Config Lines\n  configLines: ConfigLine[];\n\n  // Guards (simplified for Core)\n  enableBotTax: boolean;\n  enableSolPayment: boolean;\n  enableStartDate: boolean;\n  enableEndDate: boolean;\n  botTaxLamports: number;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate itemsAvailable\n  if (!data.itemsAvailable || data.itemsAvailable <= 0) {\n    errors.itemsAvailable = {\n      type: \"required\",\n      message: \"Items available must be greater than 0\",\n    };\n  }\n\n  // Validate price\n  if (data.price === undefined || data.price < 0) {\n    errors.price = {\n      type: \"required\",\n      message: \"Price must be 0 or greater\",\n    };\n  }\n\n  // Validate symbol\n  if (!data.symbol || data.symbol.length > 10) {\n    errors.symbol = {\n      type: \"maxLength\",\n      message: \"Symbol cannot exceed 10 characters\",\n    };\n  }\n\n  // Validate sellerFeeBasisPoints\n  if (data.sellerFeeBasisPoints === undefined || data.sellerFeeBasisPoints < 0 || data.sellerFeeBasisPoints > 10000) {\n    errors.sellerFeeBasisPoints = {\n      type: \"range\",\n      message: \"Royalty fee must be between 0 and 10000\",\n    };\n  }\n\n  // Validate configLines\n  if (data.configLines && data.configLines.length > 0) {\n    data.configLines.forEach((line: ConfigLine, index: number) => {\n      if (!line.name) {\n        errors[`configLines.${index}.name`] = {\n          type: \"required\",\n          message: \"Name is required\",\n        };\n      }\n      if (!line.uri) {\n        errors[`configLines.${index}.uri`] = {\n          type: \"required\",\n          message: \"URI is required\",\n        };\n      }\n    });\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport interface CoreCandyMachineFormProps {\n  collection?: string;\n  onCandyMachineCreated?: (candyMachine: string, signature: string) => void;\n  className?: string;\n}\n\nexport default function CoreCandyMachineForm({\n  collection: propCollection,\n  onCandyMachineCreated,\n  className\n}: CoreCandyMachineFormProps) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { endpoint, switchToNextEndpoint } = useContext(ModalContext);\n\n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<CoreCandyMachineResult | null>(null);\n\n  // Form setup\n  const form = useForm<CoreCandyMachineFormValues>({\n    defaultValues: {\n      itemsAvailable: 100,\n      price: 0.1,\n      symbol: \"CORE\",\n      sellerFeeBasisPoints: 500, // 5%\n      isMutable: true,\n      collection: propCollection || \"\",\n      configLines: [\n        { name: \"Core NFT #1\", uri: \"https://example.com/metadata/1.json\" }\n      ],\n      enableBotTax: false,\n      enableSolPayment: true,\n      enableStartDate: false,\n      enableEndDate: false,\n      botTaxLamports: 10000000, // 0.01 SOL\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  const onSubmit = async (values: CoreCandyMachineFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error(\"Please connect your wallet\");\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setCurrentStage(\"confirming\");\n      setError(\"\");\n\n      toast.loading(\"Creating Core Candy Machine...\", {\n        id: \"core-candy-machine-create\",\n      });\n\n      // Create wallet adapter for signing transactions\n      const walletAdapter = {\n        publicKey: publicKey,\n        signTransaction,\n        signAllTransactions\n      };\n\n      // Initialize UMI with Core Candy Machine\n      const umi = createUmi(connection.rpcEndpoint)\n        .use(walletAdapterIdentity(walletAdapter))\n        .use(mplCore())\n        .use(mplCandyMachine());\n\n      // Generate candy machine keypair\n      const candyMachine = generateSigner(umi);\n\n      // Prepare guards\n      const guards: any = {};\n\n      if (values.enableSolPayment) {\n        guards.solPayment = some({\n          lamports: sol(values.price),\n          destination: umi.identity.publicKey,\n        });\n      }\n\n      if (values.enableBotTax) {\n        guards.botTax = some({\n          lamports: BigInt(values.botTaxLamports),\n          lastInstruction: true,\n        });\n      }\n\n      if (values.enableStartDate && values.goLiveDate) {\n        guards.startDate = some({\n          date: dateTime(new Date(values.goLiveDate).toISOString()),\n        });\n      }\n\n      if (values.enableEndDate && values.endDate) {\n        guards.endDate = some({\n          date: dateTime(new Date(values.endDate).toISOString()),\n        });\n      }\n\n      // Create candy machine configuration\n      const createIx = create(umi, {\n        candyMachine,\n        collection: values.collection && values.collection.trim()\n          ? umiPublicKey(values.collection)\n          : undefined,\n        collectionUpdateAuthority: umi.identity,\n        itemsAvailable: values.itemsAvailable,\n        sellerFeeBasisPoints: values.sellerFeeBasisPoints,\n        configLineSettings: some({\n          prefixName: values.symbol + \" #\",\n          nameLength: 32,\n          prefixUri: \"\",\n          uriLength: 200,\n          isSequential: false,\n        }),\n        guards,\n      });\n\n      // Send transaction\n      const createResult = await createIx.sendAndConfirm(umi);\n\n      // Convert signature to string format\n      const createSignature = typeof createResult.signature === 'string'\n        ? createResult.signature\n        : Buffer.from(createResult.signature).toString('base64');\n\n      // Add config lines if provided\n      if (values.configLines.length > 0) {\n        const configLinesFormatted = values.configLines.map((line) => ({\n          name: line.name,\n          uri: line.uri,\n        }));\n\n        const addConfigLinesIx = addConfigLines(umi, {\n          candyMachine: candyMachine.publicKey,\n          index: 0,\n          configLines: configLinesFormatted,\n        });\n\n        await addConfigLinesIx.sendAndConfirm(umi);\n      }\n\n      const candyMachineAddress = candyMachine.publicKey.toString();\n\n      setResult({\n        candyMachine: candyMachineAddress,\n        signature: createSignature,\n        collection: values.collection || undefined,\n      });\n\n      if (onCandyMachineCreated) {\n        onCandyMachineCreated(candyMachineAddress, createSignature);\n      }\n\n      setCurrentStage(\"success\");\n\n      toast.success(\"Core Candy Machine created successfully!\", {\n        id: \"core-candy-machine-create\",\n        description: `Candy Machine: ${candyMachineAddress.slice(0, 8)}...${candyMachineAddress.slice(-8)}`,\n      });\n\n    } catch (err: any) {\n      console.error(\"Error creating Core Candy Machine:\", err);\n\n      setCurrentStage(\"error\");\n      setError(err.message || \"An unknown error occurred\");\n\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction rejected\", {\n          id: \"core-candy-machine-create\",\n          description: \"You have rejected the transaction\",\n        });\n      } else {\n        toast.error(\"Cannot create Core Candy Machine\", {\n          id: \"core-candy-machine-create\",\n          description: err.message,\n        });\n\n        if (err.message?.includes(\"failed to fetch\") ||\n          err.message?.includes(\"timeout\") ||\n          err.message?.includes(\"429\") ||\n          err.message?.includes(\"503\")) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Add config line\n  const addConfigLine = () => {\n    const currentLines = form.getValues(\"configLines\");\n    form.setValue(\"configLines\", [\n      ...currentLines,\n      { name: `Core NFT #${currentLines.length + 1}`, uri: \"\" }\n    ]);\n  };\n\n  // Remove config line\n  const removeConfigLine = (index: number) => {\n    const currentLines = form.getValues(\"configLines\");\n    if (currentLines.length > 1) {\n      form.setValue(\"configLines\", currentLines.filter((_, i) => i !== index));\n    }\n  };\n\n  // View functions\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/tx/\"\n        : \"https://solscan.io/tx/\";\n      window.open(\n        `${baseUrl}${result.signature}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const viewCandyMachine = () => {\n    if (result?.candyMachine) {\n      const baseUrl = network === \"devnet\"\n        ? \"https://explorer.solana.com/address/\"\n        : \"https://solscan.io/account/\";\n      window.open(\n        `${baseUrl}${result.candyMachine}${network === \"devnet\" ? \"?cluster=devnet\" : \"\"}`,\n        \"_blank\"\n      );\n    }\n  };\n\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setCurrentStage(\"input\");\n    setError(\"\");\n  };\n\n  // Render functions\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        {/* Basic Settings */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Basic Settings</h3>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"itemsAvailable\"\n              render={({ field }) => (\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                  <FormLabel>Items Available</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"100\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"price\"\n              render={({ field }) => (\n                <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                  <FormLabel>Price (SOL)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      step=\"0.001\"\n                      placeholder=\"0.1\"\n                      {...field}\n                      onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"symbol\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Symbol</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"CORE\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"sellerFeeBasisPoints\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Royalty Fee (Basis Points)</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"500\"\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  500 = 5% royalty fee\n                </p>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"collection\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <FormLabel>Collection (Optional)</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Collection mint address\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Guards */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Guards</h3>\n\n          <div className=\"space-y-3 bg-secondary/50 rounded-lg p-4\">\n            <FormField\n              control={form.control}\n              name=\"enableSolPayment\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <Label>Enable SOL Payment</Label>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"enableBotTax\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <Label>Enable Bot Tax</Label>\n                </FormItem>\n              )}\n            />\n\n            {form.watch(\"enableBotTax\") && (\n              <FormField\n                control={form.control}\n                name=\"botTaxLamports\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Bot Tax (Lamports)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"10000000\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      10,000,000 lamports = 0.01 SOL\n                    </p>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"enableStartDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <Label>Enable Start Date</Label>\n                </FormItem>\n              )}\n            />\n\n            {form.watch(\"enableStartDate\") && (\n              <FormField\n                control={form.control}\n                name=\"goLiveDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"enableEndDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2\">\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      disabled={isSubmitting}\n                    />\n                  </FormControl>\n                  <Label>Enable End Date</Label>\n                </FormItem>\n              )}\n            />\n\n            {form.watch(\"enableEndDate\") && (\n              <FormField\n                control={form.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>End Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        {...field}\n                        disabled={isSubmitting}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Config Lines */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Config Lines</h3>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={addConfigLine}\n              disabled={isSubmitting}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Line\n            </Button>\n          </div>\n\n          <div className=\"space-y-3\">\n            {form.watch(\"configLines\").map((_, index) => (\n              <div key={index} className=\"grid grid-cols-12 gap-2 items-end bg-secondary/50 rounded-lg p-3\">\n                <div className=\"col-span-4\">\n                  <FormField\n                    control={form.control}\n                    name={`configLines.${index}.name`}\n                    render={({ field }) => (\n                      <FormItem>\n                        {index === 0 && <FormLabel>Name</FormLabel>}\n                        <FormControl>\n                          <Input\n                            placeholder=\"Core NFT Name\"\n                            {...field}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-7\">\n                  <FormField\n                    control={form.control}\n                    name={`configLines.${index}.uri`}\n                    render={({ field }) => (\n                      <FormItem>\n                        {index === 0 && <FormLabel>Metadata URI</FormLabel>}\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://...\"\n                            {...field}\n                            disabled={isSubmitting}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-1\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removeConfigLine(index)}\n                    disabled={form.watch(\"configLines\").length === 1 || isSubmitting}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Submit */}\n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Create Core Candy Machine\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSuccess = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-green-600\">Success!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Core Candy Machine has been created successfully\n        </p>\n      </div>\n\n      <div className=\"space-y-3 rounded-lg bg-muted p-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Candy Machine:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.candyMachine?.slice(0, 8)}...{result?.candyMachine?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={viewCandyMachine}\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium\">Transaction:</span>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-mono\">\n              {result?.signature?.slice(0, 8)}...{result?.signature?.slice(-8)}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={viewExplorer}\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {result?.collection && (\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Collection:</span>\n            <span className=\"text-sm font-mono\">\n              {result.collection.slice(0, 8)}...{result.collection.slice(-8)}\n            </span>\n          </div>\n        )}\n      </div>\n\n      <Button onClick={resetForm} className=\"w-full\">\n        Create Another Core Candy Machine\n      </Button>\n    </div>\n  );\n\n  const renderError = () => (\n    <div className=\"space-y-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <X className=\"h-10 w-10 text-red-600\" />\n      </div>\n\n      <div className=\"space-y-2\">\n        <h3 className=\"text-xl font-bold text-red-600\">Error</h3>\n        <p className=\"text-muted-foreground\">\n          Failed to create Core Candy Machine\n        </p>\n      </div>\n\n      <div className=\"rounded-lg bg-red-50 p-4\">\n        <p className=\"text-sm text-red-600\">{error}</p>\n      </div>\n\n      <Button onClick={() => setCurrentStage(\"input\")} className=\"w-full\">\n        Try Again\n      </Button>\n    </div>\n  );\n\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Core Candy Machine</h3>\n      <p className=\"text-muted-foreground\">\n        Please wait while your Core Candy Machine is being created...\n      </p>\n    </div>\n  );\n\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case \"success\":\n        return renderSuccess();\n      case \"error\":\n        return renderError();\n      case \"confirming\":\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  if (!mounted) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Create Core Candy Machine</CardTitle>\n          <CardDescription>\n            Set up your Core NFT collection launchpad\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Create Core Candy Machine</CardTitle>\n            <CardDescription>\n              Set up your Core NFT collection launchpad using Metaplex Core standard\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {connected && publicKey && (\n              <Badge variant=\"outline\">\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n              </Badge>\n            )}\n            <Badge variant=\"outline\">{network}</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n"
        }
    ],
    "category": "Metaplex",
    "subcategory": "Core-Candy-Machine",
    "tags": [
        "nft",
        "core",
        "candy-machine",
        "metaplex",
        "solana",
        "form",
        "mint"
    ]
}