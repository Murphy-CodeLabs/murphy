{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "price-chart",
  "type": "registry:block",
  "title": "The PriceChart component is a chart that displays the price of a token over time.",
  "dependencies": [
    "recharts",
    "date-fns",
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "chart",
    "card",
    "toggle-group",
    "skeleton"
  ],
  "files": [
    {
      "path": "components/ui/murphy/price-chart.tsx",
      "content": "\"use client\";\nimport React from \"react\";\n\nimport { Area, AreaChart, XAxis } from \"recharts\";\nimport { format } from \"date-fns\";\n\nimport { formatUsd } from \"@/lib/utils\";\nimport { SolAsset } from \"@/types/assets\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n} from \"@/components/ui/chart\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nimport { TokenIcon } from \"@/components/ui/murphy/token-icon\";\n\nexport type TimeScale = \"time\" | \"day\" | \"date\" | \"month\";\n\nexport type PriceChartProps = {\n  asset: SolAsset | null;\n  data: {\n    timestamp: number;\n    price: number;\n  }[];\n  timeScale?: TimeScale;\n  title?: string;\n  description?: string;\n  onDateRangeChange?: (value: string) => void;\n  dateRangeOptions?: string[];\n  defaultDateRange?: string;\n};\n\nconst formatTimestamp = (timestamp: number, timeScale: TimeScale) => {\n  const ts = timestamp * 1000;\n  if (timeScale === \"month\") {\n    return format(ts, \"MMM\");\n  } else if (timeScale === \"date\") {\n    return format(ts, \"MMM dd\");\n  } else if (timeScale === \"day\") {\n    return format(ts, \"MMM do\");\n  }\n  return format(ts, \"HH:mm\");\n};\n\nconst PriceChart = ({\n  asset,\n  title,\n  description,\n  timeScale = \"time\",\n  onDateRangeChange,\n  dateRangeOptions,\n  defaultDateRange,\n  data,\n}: PriceChartProps) => {\n  const [dateRange, setDateRange] = React.useState(\n    defaultDateRange && dateRangeOptions?.includes(defaultDateRange)\n      ? defaultDateRange\n      : dateRangeOptions?.[0] || \"1D\",\n  );\n  const prevDateRange = React.useRef(dateRange);\n\n  const chartColor = React.useMemo(() => {\n    if (!data.length) return \"\";\n    return data[0].price > data[data.length - 1].price\n      ? \"hsl(var(--destructive))\"\n      : \"hsl(var(--chart-2))\";\n  }, [data]);\n\n  const formatXAxis = (timestamp: number) => {\n    return formatTimestamp(timestamp, timeScale);\n  };\n\n  const chartData = React.useMemo(() => {\n    return data.map((item) => ({\n      ...item,\n      label: formatTimestamp(item.timestamp, timeScale),\n    }));\n  }, [data, timeScale]);\n\n  const chartConfig = React.useMemo(() => {\n    if (!chartData.length || !asset) return null;\n\n    return {\n      desktop: {\n        label: asset.symbol,\n        color: chartColor,\n      },\n      mobile: {\n        label: asset.symbol,\n        color: chartColor,\n      },\n    } satisfies ChartConfig;\n  }, [chartData, asset, chartColor]);\n\n  const chartTitle = React.useMemo(() => {\n    if (!asset) return title || \"Price Chart\";\n    return asset.symbol ? `${asset.symbol} Price` : title;\n  }, [asset, title]);\n\n  React.useEffect(() => {\n    if (prevDateRange.current !== dateRange) {\n      onDateRangeChange?.(dateRange);\n      prevDateRange.current = dateRange;\n    }\n  }, [dateRange, onDateRangeChange]);\n\n  if (!data.length || !chartConfig) {\n    return (\n      <Card className=\"w-full\">\n        <CardHeader className=\"relative gap-1.5\">\n          <CardTitle className=\"flex items-center gap-3 text-xl\">\n            <Skeleton className=\"h-[32px] w-[32px] shrink-0 rounded-full\" />\n            <Skeleton className=\"h-[16px] w-1/4\" />\n            <Skeleton className=\"ml-auto h-[16px] w-1/4\" />\n            <span className=\"sr-only\">Loading...</span>\n          </CardTitle>\n          <CardDescription className=\"sr-only\">Loading...</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative w-full pt-[55%]\">\n            <Skeleton className=\"absolute inset-0\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"relative gap-1.5\">\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\n          <TokenIcon asset={asset} /> {chartTitle}\n        </CardTitle>\n        {description && <CardDescription>{description}</CardDescription>}\n        <ToggleGroup\n          type=\"single\"\n          value={dateRange}\n          className=\"absolute right-6 top-6\"\n          onValueChange={(value) => setDateRange(value)}\n        >\n          {dateRangeOptions?.map((value) => (\n            <ToggleGroupItem key={value} value={value}>\n              {value}\n            </ToggleGroupItem>\n          ))}\n        </ToggleGroup>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig}>\n          <AreaChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 12,\n              bottom: 20,\n              left: 12,\n            }}\n          >\n            <XAxis\n              dataKey=\"timestamp\"\n              axisLine={false}\n              tickLine={false}\n              tickFormatter={formatXAxis}\n              interval=\"preserveStart\"\n              minTickGap={50}\n              fontSize={12}\n              className=\"text-muted-foreground\"\n            />\n            <ChartTooltip\n              cursor={false}\n              content={(props) => {\n                if (!props.active || !props.payload || !props.payload[0]) {\n                  return null;\n                }\n\n                const data = props.payload[0].payload;\n                return (\n                  <div className=\"rounded-lg border bg-background p-2 shadow-sm\">\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {data.label}\n                      </span>\n                      <div className=\"flex items-center gap-2\">\n                        <strong className=\"font-medium\">Price:</strong>\n                        <span>\n                          {data.price > 0.00001\n                            ? formatUsd(data.price)\n                            : `$${data.price.toExponential(2)}`}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              }}\n            />\n            <defs>\n              <linearGradient id=\"fillToken\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stopColor={chartConfig.desktop.color}\n                  stopOpacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor={chartConfig.desktop.color}\n                  stopOpacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n            <Area\n              dataKey=\"price\"\n              type=\"natural\"\n              fill=\"url(#fillToken)\"\n              fillOpacity={0.4}\n              stroke={chartConfig.desktop.color}\n              stackId=\"a\"\n            />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport { PriceChart };\n",
      "type": "registry:file",
      "target": "components/ui/murphy/price-chart.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport millify from \"millify\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\n};\n\nexport const formatUsd = (num: number): string => {\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\n};\n\nexport const formatNumber = (\n  num: number,\n  options: Intl.NumberFormatOptions = {},\n): string => {\n  if (num === null || num === undefined) return \"0\";\n\n  const absNum = Math.abs(num);\n  let decimals = 2;\n\n  if (absNum < 1) {\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\n  }\n\n  return new Intl.NumberFormat(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(num);\n};\n\nexport const formatNumberShort = (num: number): string => {\n  if (num < 1000) return formatNumber(num);\n  return millify(num, {\n    precision: 2,\n  });\n};\n\nexport const formatNumberGrouped = (\n  value: number,\n  expThreshold: number = 0.0001,\n  expPrecision: number = 1,\n) => {\n  if (value === 0) return \"0\";\n\n  if (Math.abs(value) < expThreshold) {\n    return value.toExponential(expPrecision);\n  }\n\n  if (Number.isInteger(value)) {\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\n  }\n\n  const valueParts = value.toString().split(\".\");\n  const decimalPart = valueParts[1] ?? \"\";\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\n\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: true,\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\n  }).format(value);\n};\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch (error) {\n        return false;\n\n  }\n};\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\n\nexport type SolAsset = {\n  mint: PublicKey;\n  name: string;\n  symbol: string;\n  image: string;\n  decimals: number;\n  price: number;\n  userTokenAccount?: {\n    address: PublicKey;\n    amount: number;\n  };\n};\n\nexport type FetchWalletArgs = {\n  owner: PublicKey;\n  limit?: number;\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    }
  ]
}