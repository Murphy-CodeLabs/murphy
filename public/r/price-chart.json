{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "price-chart",
  "type": "registry:block",
  "title": "The PriceChart component is a chart that displays the price of a token over time.",
  "dependencies": [
    "recharts",
    "date-fns",
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "chart",
    "card",
    "toggle-group",
    "skeleton"
  ],
  "files": [
    {
      "path": "components/ui/murphy/price-chart.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\n\r\nimport { Area, AreaChart, XAxis } from \"recharts\";\r\nimport { format } from \"date-fns\";\r\n\r\nimport { formatUsd } from \"@/lib/utils\";\r\nimport { SolAsset } from \"@/types/assets\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  ChartConfig,\r\n  ChartContainer,\r\n  ChartTooltip,\r\n} from \"@/components/ui/chart\";\r\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\n\r\nimport { TokenIcon } from \"@/components/ui/murphy/token-icon\";\r\n\r\nexport type TimeScale = \"time\" | \"day\" | \"date\" | \"month\";\r\n\r\nexport type PriceChartProps = {\r\n  asset: SolAsset | null;\r\n  data: {\r\n    timestamp: number;\r\n    price: number;\r\n  }[];\r\n  timeScale?: TimeScale;\r\n  title?: string;\r\n  description?: string;\r\n  onDateRangeChange?: (value: string) => void;\r\n  dateRangeOptions?: string[];\r\n  defaultDateRange?: string;\r\n};\r\n\r\nconst formatTimestamp = (timestamp: number, timeScale: TimeScale) => {\r\n  const ts = timestamp * 1000;\r\n  if (timeScale === \"month\") {\r\n    return format(ts, \"MMM\");\r\n  } else if (timeScale === \"date\") {\r\n    return format(ts, \"MMM dd\");\r\n  } else if (timeScale === \"day\") {\r\n    return format(ts, \"MMM do\");\r\n  }\r\n  return format(ts, \"HH:mm\");\r\n};\r\n\r\nconst PriceChart = ({\r\n  asset,\r\n  title,\r\n  description,\r\n  timeScale = \"time\",\r\n  onDateRangeChange,\r\n  dateRangeOptions,\r\n  defaultDateRange,\r\n  data,\r\n}: PriceChartProps) => {\r\n  const [dateRange, setDateRange] = React.useState(\r\n    defaultDateRange && dateRangeOptions?.includes(defaultDateRange)\r\n      ? defaultDateRange\r\n      : dateRangeOptions?.[0] || \"1D\",\r\n  );\r\n  const prevDateRange = React.useRef(dateRange);\r\n\r\n  const chartColor = React.useMemo(() => {\r\n    if (!data.length) return \"\";\r\n    return data[0].price > data[data.length - 1].price\r\n      ? \"hsl(var(--destructive))\"\r\n      : \"hsl(var(--chart-2))\";\r\n  }, [data]);\r\n\r\n  const formatXAxis = (timestamp: number) => {\r\n    return formatTimestamp(timestamp, timeScale);\r\n  };\r\n\r\n  const chartData = React.useMemo(() => {\r\n    return data.map((item) => ({\r\n      ...item,\r\n      label: formatTimestamp(item.timestamp, timeScale),\r\n    }));\r\n  }, [data, timeScale]);\r\n\r\n  const chartConfig = React.useMemo(() => {\r\n    if (!chartData.length || !asset) return null;\r\n\r\n    return {\r\n      desktop: {\r\n        label: asset.symbol,\r\n        color: chartColor,\r\n      },\r\n      mobile: {\r\n        label: asset.symbol,\r\n        color: chartColor,\r\n      },\r\n    } satisfies ChartConfig;\r\n  }, [chartData, asset, chartColor]);\r\n\r\n  const chartTitle = React.useMemo(() => {\r\n    if (!asset) return title || \"Price Chart\";\r\n    return asset.symbol ? `${asset.symbol} Price` : title;\r\n  }, [asset, title]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevDateRange.current !== dateRange) {\r\n      onDateRangeChange?.(dateRange);\r\n      prevDateRange.current = dateRange;\r\n    }\r\n  }, [dateRange, onDateRangeChange]);\r\n\r\n  if (!data.length || !chartConfig) {\r\n    return (\r\n      <Card className=\"w-full\">\r\n        <CardHeader className=\"relative gap-1.5\">\r\n          <CardTitle className=\"flex items-center gap-3 text-xl\">\r\n            <Skeleton className=\"h-[32px] w-[32px] shrink-0 rounded-full\" />\r\n            <Skeleton className=\"h-[16px] w-1/4\" />\r\n            <Skeleton className=\"ml-auto h-[16px] w-1/4\" />\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </CardTitle>\r\n          <CardDescription className=\"sr-only\">Loading...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"relative w-full pt-[55%]\">\r\n            <Skeleton className=\"absolute inset-0\" />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader className=\"relative gap-1.5\">\r\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\r\n          <TokenIcon asset={asset} /> {chartTitle}\r\n        </CardTitle>\r\n        {description && <CardDescription>{description}</CardDescription>}\r\n        <ToggleGroup\r\n          type=\"single\"\r\n          value={dateRange}\r\n          className=\"absolute right-6 top-6\"\r\n          onValueChange={(value) => setDateRange(value)}\r\n        >\r\n          {dateRangeOptions?.map((value) => (\r\n            <ToggleGroupItem key={value} value={value}>\r\n              {value}\r\n            </ToggleGroupItem>\r\n          ))}\r\n        </ToggleGroup>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <ChartContainer config={chartConfig}>\r\n          <AreaChart\r\n            accessibilityLayer\r\n            data={chartData}\r\n            margin={{\r\n              top: 10,\r\n              right: 12,\r\n              bottom: 20,\r\n              left: 12,\r\n            }}\r\n          >\r\n            <XAxis\r\n              dataKey=\"timestamp\"\r\n              axisLine={false}\r\n              tickLine={false}\r\n              tickFormatter={formatXAxis}\r\n              interval=\"preserveStart\"\r\n              minTickGap={50}\r\n              fontSize={12}\r\n              className=\"text-muted-foreground\"\r\n            />\r\n            <ChartTooltip\r\n              cursor={false}\r\n              content={(props) => {\r\n                if (!props.active || !props.payload || !props.payload[0]) {\r\n                  return null;\r\n                }\r\n\r\n                const data = props.payload[0].payload;\r\n                return (\r\n                  <div className=\"rounded-lg border bg-background p-2 shadow-sm\">\r\n                    <div className=\"flex flex-col\">\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {data.label}\r\n                      </span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <strong className=\"font-medium\">Price:</strong>\r\n                        <span>\r\n                          {data.price > 0.00001\r\n                            ? formatUsd(data.price)\r\n                            : `$${data.price.toExponential(2)}`}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            <defs>\r\n              <linearGradient id=\"fillToken\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop\r\n                  offset=\"5%\"\r\n                  stopColor={chartConfig.desktop.color}\r\n                  stopOpacity={0.8}\r\n                />\r\n                <stop\r\n                  offset=\"95%\"\r\n                  stopColor={chartConfig.desktop.color}\r\n                  stopOpacity={0.1}\r\n                />\r\n              </linearGradient>\r\n            </defs>\r\n            <Area\r\n              dataKey=\"price\"\r\n              type=\"natural\"\r\n              fill=\"url(#fillToken)\"\r\n              fillOpacity={0.4}\r\n              stroke={chartConfig.desktop.color}\r\n              stackId=\"a\"\r\n            />\r\n          </AreaChart>\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport { PriceChart };\r\n",
      "type": "registry:file",
      "target": "components/ui/murphy/price-chart.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "types/assets/index.ts",
      "content": "import { PublicKey,Connection } from \"@solana/web3.js\";\r\n\r\nexport type SolAsset = {\r\n  mint: PublicKey;\r\n  name: string;\r\n  symbol: string;\r\n  image: string;\r\n  decimals: number;\r\n  price: number;\r\n  userTokenAccount?: {\r\n    address: PublicKey;\r\n    amount: number;\r\n  };\r\n};\r\n\r\nexport type FetchWalletArgs = {\r\n  owner: PublicKey;\r\n  limit?: number;\r\n};",
      "type": "registry:file",
      "target": "types/assets/index.ts"
    }
  ]
}