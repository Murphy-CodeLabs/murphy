{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mpl-hybrid-form",
  "type": "registry:block",
  "title": "MPL Hybrid Form",
  "description": "Create hybrid assets (escrow, token, capture, release) using Metaplex.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react",
    "@metaplex-foundation/umi-bundle-defaults",
    "@metaplex-foundation/umi-signer-wallet-adapters",
    "@metaplex-foundation/mpl-token-metadata",
    "@metaplex-foundation/umi"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu",
    "tabs",
    "switch",
    "label",
    "badge"
  ],
  "files": [
    {
      "path": "components/ui/murphy/mpl-hybrid-form.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\r\nimport { PublicKey, Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\r\n\r\n// Metaplex UMI imports\r\nimport { createUmi } from \"@metaplex-foundation/umi-bundle-defaults\";\r\nimport { walletAdapterIdentity } from \"@metaplex-foundation/umi-signer-wallet-adapters\";\r\nimport {\r\n  mplTokenMetadata,\r\n  createV1 as createNftV1,\r\n  createFungible,\r\n  TokenStandard\r\n} from \"@metaplex-foundation/mpl-token-metadata\";\r\nimport {\r\n  generateSigner,\r\n  publicKey as umiPublicKey,\r\n  percentAmount,\r\n  some,\r\n  none,\r\n  sol,\r\n  dateTime,\r\n  createGenericFile\r\n} from \"@metaplex-foundation/umi\";\r\n\r\n// SPL Token imports for fungible tokens\r\nimport {\r\n  createMint,\r\n  createAssociatedTokenAccount,\r\n  mintTo,\r\n  TOKEN_PROGRAM_ID,\r\n  getAssociatedTokenAddress\r\n} from \"@solana/spl-token\";\r\n\r\n// UI Components\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\n\r\n// Icons\r\nimport {\r\n  Loader2,\r\n  Upload,\r\n  Plus,\r\n  X,\r\n  Copy,\r\n  ExternalLink,\r\n  Coins,\r\n  FileImage,\r\n  Settings,\r\n  Shield,\r\n  CheckCircle,\r\n  Layers,\r\n  Lock,\r\n  Unlock,\r\n  ArrowLeftRight,\r\n  RefreshCw\r\n} from \"lucide-react\";\r\n\r\n// Notifications\r\nimport { toast } from \"sonner\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Types\r\ninterface MPLHybridResult {\r\n  escrow?: string;\r\n  token?: string;\r\n  nft?: string;\r\n  transactionSignature: string;\r\n  hybridSignatures?: string[];\r\n}\r\n\r\ninterface EscrowConfig {\r\n  name: string;\r\n  uri: string;\r\n  max: number;\r\n  min: number;\r\n  amount: number;\r\n  feeLocation: string;\r\n  feeAmount: number;\r\n  solFeeAmount: number;\r\n  path: number;\r\n  bump: number;\r\n}\r\n\r\ntype HybridType = 'escrow' | 'token' | 'capture' | 'release';\r\ntype TokenType = 'fungible' | 'nft' | 'pnft';\r\n\r\nconst formSchema = z.object({\r\n  hybridType: z.enum(['escrow', 'token', 'capture', 'release']),\r\n  tokenType: z.enum(['fungible', 'nft', 'pnft']),\r\n  escrowName: z.string(),\r\n  escrowUri: z.string(),\r\n  maxAmount: z.number().min(0, \"Max amount must be non-negative\"),\r\n  minAmount: z.number().min(0, \"Min amount must be non-negative\"),\r\n  escrowAmount: z.number().min(0, \"Amount must be non-negative\"),\r\n  tokenName: z.string(),\r\n  tokenSymbol: z.string(),\r\n  tokenUri: z.string(),\r\n  tokenDecimals: z.number().min(0).max(9),\r\n  tokenSupply: z.number().min(1, \"Supply must be greater than 0\"),\r\n  nftName: z.string(),\r\n  nftDescription: z.string(),\r\n  nftImage: z.string(),\r\n  nftAttributes: z.array(z.object({\r\n    trait_type: z.string(),\r\n    value: z.string(),\r\n  })),\r\n\r\n  feeLocation: z.string(),\r\n  feeAmount: z.number().min(0, \"Fee amount must be non-negative\"),\r\n  solFeeAmount: z.number().min(0, \"SOL fee amount must be non-negative\"),\r\n\r\n  // Hybrid Settings\r\n  enableRoyalties: z.boolean(),\r\n  royaltyPercentage: z.number().min(0).max(100),\r\n\r\n  enableTimelock: z.boolean(),\r\n  unlockDate: z.string(),\r\n\r\n  enableWhitelist: z.boolean(),\r\n  whitelistAddresses: z.array(z.string()),\r\n\r\n  // Advanced Settings\r\n  path: z.number().min(0),\r\n  bump: z.number().min(0),\r\n\r\n  // Capture/Release specific\r\n  targetEscrow: z.string(),\r\n  targetToken: z.string(),\r\n  captureAmount: z.number().min(0, \"Capture amount must be non-negative\"),\r\n  releaseAmount: z.number().min(0, \"Release amount must be non-negative\"),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\ninterface MPLHybridFormProps {\r\n  className?: string;\r\n  onHybridCreated?: (result: MPLHybridResult) => void;\r\n  defaultHybridType?: HybridType;\r\n}\r\n\r\nexport function MPLHybridForm({\r\n  className,\r\n  onHybridCreated,\r\n  defaultHybridType = 'escrow'\r\n}: MPLHybridFormProps) {\r\n  // Hooks\r\n  const { publicKey, connected, wallet, sendTransaction } = useWallet();\r\n  const { connection } = useConnection();\r\n  const { endpoint } = useContext(ModalContext);\r\n\r\n  // State\r\n  const [mounted, setMounted] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [currentStage, setCurrentStage] = useState<'input' | 'confirming' | 'success' | 'error'>('input');\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [result, setResult] = useState<MPLHybridResult | null>(null);\r\n  const [network, setNetwork] = useState<'devnet' | 'mainnet'>('devnet');\r\n  const [activeFormTab, setActiveFormTab] = useState(\"basic\");\r\n\r\n  // Form\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      hybridType: defaultHybridType,\r\n      tokenType: 'fungible',\r\n      escrowName: \"\",\r\n      escrowUri: \"\",\r\n      maxAmount: 1000000,\r\n      minAmount: 0,\r\n      escrowAmount: 0,\r\n      tokenName: \"\",\r\n      tokenSymbol: \"\",\r\n      tokenUri: \"\",\r\n      tokenDecimals: 9,\r\n      tokenSupply: 1000000,\r\n      nftName: \"\",\r\n      nftDescription: \"\",\r\n      nftImage: \"\",\r\n      nftAttributes: [],\r\n      feeLocation: \"\",\r\n      feeAmount: 0,\r\n      solFeeAmount: 0,\r\n      enableRoyalties: false,\r\n      royaltyPercentage: 5,\r\n      enableTimelock: false,\r\n      unlockDate: \"\",\r\n      enableWhitelist: false,\r\n      whitelistAddresses: [],\r\n      path: 0,\r\n      bump: 0,\r\n      targetEscrow: \"\",\r\n      targetToken: \"\",\r\n      captureAmount: 0,\r\n      releaseAmount: 0,\r\n    },\r\n  });\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      form.setValue('feeLocation', publicKey.toString());\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  // Helper functions\r\n  const copyToClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    toast.success(\"Copied to clipboard!\");\r\n  };\r\n\r\n  const viewInExplorer = (address: string, type: 'address' | 'tx' = 'address') => {\r\n    const baseUrl = network === 'devnet'\r\n      ? `https://explorer.solana.com/${type}/`\r\n      : `https://solscan.io/${type === 'address' ? 'account' : 'tx'}/`;\r\n    window.open(\r\n      `${baseUrl}${address}${network === 'devnet' ? '?cluster=devnet' : ''}`,\r\n      '_blank'\r\n    );\r\n  };\r\n\r\n  // Attribute management\r\n  const addAttribute = () => {\r\n    const currentAttributes = form.getValues('nftAttributes');\r\n    form.setValue('nftAttributes', [\r\n      ...currentAttributes,\r\n      { trait_type: \"\", value: \"\" }\r\n    ]);\r\n  };\r\n\r\n  const removeAttribute = (index: number) => {\r\n    const currentAttributes = form.getValues('nftAttributes');\r\n    form.setValue('nftAttributes', currentAttributes.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Whitelist management\r\n  const addWhitelistAddress = () => {\r\n    const currentAddresses = form.getValues('whitelistAddresses');\r\n    form.setValue('whitelistAddresses', [...currentAddresses, \"\"]);\r\n  };\r\n\r\n  const removeWhitelistAddress = (index: number) => {\r\n    const currentAddresses = form.getValues('whitelistAddresses');\r\n    form.setValue('whitelistAddresses', currentAddresses.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const createEscrow = async (values: FormValues) => {\r\n    if (!connected || !publicKey) {\r\n      throw new Error(\"Wallet not connected\");\r\n    }\r\n\r\n    try {\r\n      // Create a PDA for the escrow account\r\n      const escrowSeed = Buffer.from(\"escrow\");\r\n      const [escrowPDA] = PublicKey.findProgramAddressSync(\r\n        [escrowSeed, publicKey.toBuffer()],\r\n        new PublicKey(\"11111111111111111111111111111111\") // System program as placeholder\r\n      );\r\n\r\n      // Create escrow account transaction\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.createAccount({\r\n          fromPubkey: publicKey,\r\n          newAccountPubkey: escrowPDA,\r\n          lamports: await connection.getMinimumBalanceForRentExemption(256),\r\n          space: 256,\r\n          programId: SystemProgram.programId,\r\n        })\r\n      );\r\n\r\n      // Get latest blockhash\r\n      const { blockhash } = await connection.getLatestBlockhash();\r\n      transaction.recentBlockhash = blockhash;\r\n      transaction.feePayer = publicKey;\r\n\r\n      // Sign and send transaction\r\n      const signature = await sendTransaction(transaction, connection);\r\n\r\n      // Wait for confirmation\r\n      await connection.confirmTransaction(signature, 'confirmed');\r\n\r\n      return {\r\n        escrow: escrowPDA.toString(),\r\n        signature: signature,\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(\"Error creating escrow:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Create Token (simplified mock implementation)\r\n  const createToken = async (values: FormValues) => {\r\n    if (!connected || !publicKey) {\r\n      throw new Error(\"Wallet not connected\");\r\n    }\r\n\r\n    try {\r\n      // Create UMI instance\r\n      const umi = createUmi(connection.rpcEndpoint)\r\n        .use(walletAdapterIdentity({ publicKey }))\r\n        .use(mplTokenMetadata());\r\n\r\n      // Generate mint keypair\r\n      const mint = generateSigner(umi);\r\n\r\n      let signature: string;\r\n\r\n      if (values.tokenType === 'fungible') {\r\n        // Create fungible token\r\n        const createResult = await createFungible(umi, {\r\n          mint,\r\n          name: values.tokenName,\r\n          symbol: values.tokenSymbol,\r\n          uri: values.tokenUri,\r\n          sellerFeeBasisPoints: percentAmount(5), // 5% royalty\r\n          decimals: values.tokenDecimals,\r\n          isMutable: true,\r\n        }).send(umi);\r\n\r\n        signature = createResult.toString();\r\n\r\n      } else {\r\n        // Create NFT or Programmable NFT\r\n        const createResult = await createNftV1(umi, {\r\n          mint,\r\n          name: values.tokenName,\r\n          symbol: values.tokenSymbol,\r\n          uri: values.tokenUri,\r\n          sellerFeeBasisPoints: percentAmount(5),\r\n          isMutable: true,\r\n          tokenStandard: values.tokenType === 'pnft' ? TokenStandard.ProgrammableNonFungible : TokenStandard.NonFungible,\r\n        }).send(umi);\r\n\r\n        signature = createResult.toString();\r\n      }\r\n\r\n      return {\r\n        token: mint.publicKey.toString(),\r\n        signature: signature,\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(\"Error creating token:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Capture tokens (simplified mock implementation)\r\n  const captureTokens = async (values: FormValues) => {\r\n    if (!connected || !publicKey) {\r\n      throw new Error(\"Wallet not connected\");\r\n    }\r\n\r\n    try {\r\n      // Validate addresses\r\n      const escrowAddress = new PublicKey(values.targetEscrow);\r\n      const tokenAddress = new PublicKey(values.targetToken);\r\n\r\n      // Get token account addresses\r\n      const fromTokenAccount = await getAssociatedTokenAddress(\r\n        tokenAddress,\r\n        publicKey\r\n      );\r\n\r\n      const toTokenAccount = await getAssociatedTokenAddress(\r\n        tokenAddress,\r\n        escrowAddress\r\n      );\r\n\r\n      // Create transfer transaction\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: publicKey,\r\n          toPubkey: escrowAddress,\r\n          lamports: Math.floor(values.captureAmount * 1e9), // Convert to lamports\r\n        })\r\n      );\r\n\r\n      // Get latest blockhash\r\n      const { blockhash } = await connection.getLatestBlockhash();\r\n      transaction.recentBlockhash = blockhash;\r\n      transaction.feePayer = publicKey;\r\n\r\n      // Sign and send transaction\r\n      const signature = await wallet!.adapter.sendTransaction(transaction, connection);\r\n\r\n      // Wait for confirmation\r\n      await connection.confirmTransaction(signature, 'confirmed');\r\n\r\n      return {\r\n        signature: signature,\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(\"Error capturing tokens:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const releaseTokens = async (values: FormValues) => {\r\n    if (!connected || !publicKey) {\r\n      throw new Error(\"Wallet not connected\");\r\n    }\r\n\r\n    try {\r\n      // Validate addresses\r\n      const escrowAddress = new PublicKey(values.targetEscrow);\r\n      const tokenAddress = new PublicKey(values.targetToken);\r\n\r\n      // For release, we would typically need to sign as the escrow authority\r\n      // This is a simplified implementation\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: escrowAddress,\r\n          toPubkey: publicKey,\r\n          lamports: Math.floor(values.releaseAmount * 1e9), // Convert to lamports\r\n        })\r\n      );\r\n\r\n      // Get latest blockhash\r\n      const { blockhash } = await connection.getLatestBlockhash();\r\n      transaction.recentBlockhash = blockhash;\r\n      transaction.feePayer = publicKey;\r\n\r\n      // Sign and send transaction\r\n      const signature = await wallet!.adapter.sendTransaction(transaction, connection);\r\n\r\n      // Wait for confirmation\r\n      await connection.confirmTransaction(signature, 'confirmed');\r\n\r\n      return {\r\n        signature: signature,\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error(\"Error releasing tokens:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Main submission handler\r\n  const onSubmit = async (values: FormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error(\"Please connect your wallet\");\r\n      return;\r\n    }\r\n\r\n    // Validate based on hybrid type\r\n    if (values.hybridType === 'escrow') {\r\n      if (!values.escrowName || values.escrowName.trim() === '') {\r\n        toast.error(\"Escrow name is required\");\r\n        return;\r\n      }\r\n      if (values.maxAmount <= 0) {\r\n        toast.error(\"Max amount must be greater than 0\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (values.hybridType === 'token') {\r\n      if (!values.tokenName || values.tokenName.trim() === '') {\r\n        toast.error(\"Token name is required\");\r\n        return;\r\n      }\r\n      if (!values.tokenSymbol || values.tokenSymbol.trim() === '') {\r\n        toast.error(\"Token symbol is required\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (values.hybridType === 'capture' || values.hybridType === 'release') {\r\n      if (!values.targetEscrow || values.targetEscrow.trim() === '') {\r\n        toast.error(\"Target escrow address is required\");\r\n        return;\r\n      }\r\n      if (!values.targetToken || values.targetToken.trim() === '') {\r\n        toast.error(\"Target token address is required\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setCurrentStage('confirming');\r\n      setError(\"\");\r\n\r\n      toast.loading(\"Processing Hybrid operation...\", { id: \"mpl-hybrid\" });\r\n\r\n      let operationResult;\r\n      const hybridSignatures: string[] = [];\r\n\r\n      switch (values.hybridType) {\r\n        case 'escrow':\r\n          operationResult = await createEscrow(values);\r\n          setResult({\r\n            escrow: operationResult.escrow,\r\n            transactionSignature: operationResult.signature,\r\n            hybridSignatures,\r\n          });\r\n          break;\r\n\r\n        case 'token':\r\n          operationResult = await createToken(values);\r\n          setResult({\r\n            token: operationResult.token,\r\n            transactionSignature: operationResult.signature,\r\n            hybridSignatures,\r\n          });\r\n          break;\r\n\r\n        case 'capture':\r\n          operationResult = await captureTokens(values);\r\n          setResult({\r\n            transactionSignature: operationResult.signature,\r\n            hybridSignatures,\r\n          });\r\n          break;\r\n\r\n        case 'release':\r\n          operationResult = await releaseTokens(values);\r\n          setResult({\r\n            transactionSignature: operationResult.signature,\r\n            hybridSignatures,\r\n          });\r\n          break;\r\n\r\n        default:\r\n          throw new Error(\"Invalid hybrid type\");\r\n      }\r\n\r\n      setCurrentStage('success');\r\n\r\n      toast.success(\"Hybrid operation completed successfully!\", {\r\n        id: \"mpl-hybrid\",\r\n        description: `${values.hybridType} operation completed`\r\n      });\r\n\r\n      if (onHybridCreated && result) {\r\n        onHybridCreated(result);\r\n      }\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error processing hybrid operation:\", err);\r\n      setError(err.message || \"Failed to process hybrid operation\");\r\n      setCurrentStage('error');\r\n\r\n      toast.error(\"Hybrid operation failed\", {\r\n        id: \"mpl-hybrid\",\r\n        description: err.message\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setCurrentStage('input');\r\n    setError(\"\");\r\n  };\r\n\r\n  // Render stages\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"text-center\">\r\n        <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100\">\r\n          <CheckCircle className=\"h-6 w-6 text-green-600\" />\r\n        </div>\r\n        <h3 className=\"mt-2 text-lg font-semibold\">Hybrid Operation Completed!</h3>\r\n        <p className=\"text-muted-foreground\">Your hybrid operation was successful</p>\r\n      </div>\r\n\r\n      {result && (\r\n        <div className=\"bg-secondary/50 rounded-lg p-4\">\r\n          <div className=\"space-y-3\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Operation Type</Label>\r\n                <p className=\"text-sm\">{form.getValues('hybridType')}</p>\r\n              </div>\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Token Type</Label>\r\n                <p className=\"text-sm\">{form.getValues('tokenType')}</p>\r\n              </div>\r\n            </div>\r\n\r\n            {result.escrow && (\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Escrow Address</Label>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-sm font-mono\">\r\n                    {result.escrow.slice(0, 8)}...{result.escrow.slice(-8)}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(result.escrow!)}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {result.token && (\r\n              <div>\r\n                <Label className=\"text-sm font-medium\">Token Address</Label>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-sm font-mono\">\r\n                    {result.token.slice(0, 8)}...{result.token.slice(-8)}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => copyToClipboard(result.token!)}\r\n                  >\r\n                    <Copy className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"flex gap-2 pt-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => viewInExplorer(result.transactionSignature, 'tx')}\r\n                className=\"flex-1\"\r\n              >\r\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                View Transaction\r\n              </Button>\r\n              {(result.escrow || result.token) && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => viewInExplorer(result.escrow || result.token!)}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n                  View Asset\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Button onClick={resetForm} className=\"w-full\">\r\n        Create Another Hybrid Operation\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100\">\r\n        <X className=\"h-6 w-6 text-red-600\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Operation Failed</h3>\r\n      <div className=\"bg-destructive/10 text-destructive rounded-lg p-4\">\r\n        <p className=\"text-sm\">{error}</p>\r\n      </div>\r\n      <Button onClick={() => setCurrentStage('input')} className=\"w-full\">\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 text-center\">\r\n      <div className=\"mx-auto flex h-12 w-12 items-center justify-center\">\r\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-lg font-semibold\">Processing Hybrid Operation</h3>\r\n      <p className=\"text-muted-foreground\">\r\n        Please confirm the transaction in your wallet...\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        {/* Hybrid Type Selection */}\r\n        <FormField\r\n          control={form.control}\r\n          name=\"hybridType\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Operation Type</FormLabel>\r\n              <FormControl>\r\n                <Tabs value={field.value} onValueChange={field.onChange}>\r\n                  <TabsList className=\"grid w-full grid-cols-4\">\r\n                    <TabsTrigger value=\"escrow\">\r\n                      <Lock className=\"h-4 w-4 mr-2\" />\r\n                      Escrow\r\n                    </TabsTrigger>\r\n                    <TabsTrigger value=\"token\">\r\n                      <Coins className=\"h-4 w-4 mr-2\" />\r\n                      Token\r\n                    </TabsTrigger>\r\n                    <TabsTrigger value=\"capture\">\r\n                      <ArrowLeftRight className=\"h-4 w-4 mr-2\" />\r\n                      Capture\r\n                    </TabsTrigger>\r\n                    <TabsTrigger value=\"release\">\r\n                      <Unlock className=\"h-4 w-4 mr-2\" />\r\n                      Release\r\n                    </TabsTrigger>\r\n                  </TabsList>\r\n                </Tabs>\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <Tabs value={activeFormTab} onValueChange={setActiveFormTab} className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\r\n            <TabsTrigger value=\"config\">Configuration</TabsTrigger>\r\n            <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"basic\" className=\"space-y-4\">\r\n            {/* Escrow Configuration */}\r\n            {form.watch('hybridType') === 'escrow' && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"escrowName\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Escrow Name</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"My Hybrid Escrow\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"escrowUri\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Escrow Metadata URI</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"https://example.com/metadata.json\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <div className=\"grid grid-cols-3 gap-4\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"minAmount\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Min Amount</FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            placeholder=\"0\"\r\n                            {...field}\r\n                            onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"maxAmount\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Max Amount</FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            type=\"number\"\r\n                            min=\"1\"\r\n                            placeholder=\"1000000\"\r\n                            {...field}\r\n                            onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"escrowAmount\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Initial Amount</FormLabel>\r\n                        <FormControl>\r\n                          <Input\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            placeholder=\"0\"\r\n                            {...field}\r\n                            onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                          />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {/* Token Configuration */}\r\n            {form.watch('hybridType') === 'token' && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"tokenType\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Token Type</FormLabel>\r\n                      <FormControl>\r\n                        <Select value={field.value} onValueChange={field.onChange}>\r\n                          <SelectTrigger>\r\n                            <SelectValue placeholder=\"Select token type\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"fungible\">Fungible Token</SelectItem>\r\n                            <SelectItem value=\"nft\">NFT</SelectItem>\r\n                            <SelectItem value=\"pnft\">Programmable NFT</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"tokenName\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Token Name</FormLabel>\r\n                        <FormControl>\r\n                          <Input placeholder=\"My Hybrid Token\" {...field} />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n\r\n                  <FormField\r\n                    control={form.control}\r\n                    name=\"tokenSymbol\"\r\n                    render={({ field }) => (\r\n                      <FormItem>\r\n                        <FormLabel>Token Symbol</FormLabel>\r\n                        <FormControl>\r\n                          <Input placeholder=\"HYB\" {...field} />\r\n                        </FormControl>\r\n                        <FormMessage />\r\n                      </FormItem>\r\n                    )}\r\n                  />\r\n                </div>\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"tokenUri\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Token Metadata URI</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"https://example.com/token-metadata.json\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                {form.watch('tokenType') === 'fungible' && (\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"tokenDecimals\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Decimals</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              type=\"number\"\r\n                              min=\"0\"\r\n                              max=\"9\"\r\n                              placeholder=\"9\"\r\n                              {...field}\r\n                              onChange={e => field.onChange(parseInt(e.target.value) || 9)}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n\r\n                    <FormField\r\n                      control={form.control}\r\n                      name=\"tokenSupply\"\r\n                      render={({ field }) => (\r\n                        <FormItem>\r\n                          <FormLabel>Supply</FormLabel>\r\n                          <FormControl>\r\n                            <Input\r\n                              type=\"number\"\r\n                              min=\"1\"\r\n                              placeholder=\"1000000\"\r\n                              {...field}\r\n                              onChange={e => field.onChange(parseFloat(e.target.value) || 1000000)}\r\n                            />\r\n                          </FormControl>\r\n                          <FormMessage />\r\n                        </FormItem>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {/* Capture/Release Configuration */}\r\n            {(form.watch('hybridType') === 'capture' || form.watch('hybridType') === 'release') && (\r\n              <>\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"targetEscrow\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Target Escrow Address</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Escrow address to interact with\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"targetToken\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Target Token Address</FormLabel>\r\n                      <FormControl>\r\n                        <Input placeholder=\"Token address to transfer\" {...field} />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name={form.watch('hybridType') === 'capture' ? 'captureAmount' : 'releaseAmount'}\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>\r\n                        {form.watch('hybridType') === 'capture' ? 'Capture Amount' : 'Release Amount'}\r\n                      </FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </>\r\n            )}\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"config\" className=\"space-y-4\">\r\n            {/* Fee Configuration */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <Label className=\"text-base font-semibold\">Fee Configuration</Label>\r\n\r\n              <FormField\r\n                control={form.control}\r\n                name=\"feeLocation\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>Fee Recipient Address</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder=\"Fee recipient wallet address\" {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"feeAmount\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Token Fee Amount</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"solFeeAmount\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>SOL Fee Amount</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          step=\"0.001\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"advanced\" className=\"space-y-4\">\r\n            {/* Advanced settings content */}\r\n            <div className=\"space-y-4 border rounded-lg p-4\">\r\n              <Label className=\"text-base font-semibold\">Advanced Settings</Label>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"path\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Path</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseInt(e.target.value) || 0)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"bump\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel>Bump</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          placeholder=\"0\"\r\n                          {...field}\r\n                          onChange={e => field.onChange(parseInt(e.target.value) || 0)}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Network Info */}\r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n          <div className=\"flex justify-between items-center text-sm\">\r\n            <span>Network</span>\r\n            <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n              {network}\r\n            </Badge>\r\n          </div>\r\n          {connected && publicKey && (\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Wallet</span>\r\n              <span className=\"font-mono text-xs\">\r\n                {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <div className=\"pt-2\">\r\n          {!connected ? (\r\n            <ConnectWalletButton className=\"w-full\" />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"w-full\"\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Processing...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <ArrowLeftRight className=\"mr-2 h-4 w-4\" />\r\n                  Execute Hybrid Operation\r\n                </>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>MPL Hybrid Form</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <RefreshCw className=\"h-6 w-6\" />\r\n          MPL Hybrid Operations\r\n        </CardTitle>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          Manage hybrid token and escrow operations with advanced functionality\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/mpl-hybrid-form.tsx"
    }
  ]
}