{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-list",
  "type": "registry:block",
  "title": "The TxnList component is a table of transactions with metadata.",
  "dependencies": [
    "@solana/web3.js",
    "date-fns",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "table",
    "skeleton"
  ],
  "files": [
    {
      "path": "components/ui/murphy/txn-list.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\n\r\nimport {\r\n  VersionedTransactionResponse,\r\n  LAMPORTS_PER_SOL,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { useConnection } from \"@solana/wallet-adapter-react\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport { AlertCircleIcon, ExternalLinkIcon } from \"lucide-react\";\r\n\r\nimport { shortAddress, cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\n\r\ntype TxnListProps = {\r\n  transactions: VersionedTransactionResponse[];\r\n  onClick?: (txn: VersionedTransactionResponse) => void;\r\n};\r\n\r\nconst TxnList = ({ transactions, onClick }: TxnListProps) => {\r\n  const { connection } = useConnection();\r\n  const [currentSlot, setCurrentSlot] = React.useState<number | null>(null);\r\n  const [averageBlockTime, setAverageBlockTime] = React.useState<number>(0.4);\r\n    React.useEffect(() => {\r\n    console.log(\"transactions: \",transactions)\r\n},[transactions])\r\n  React.useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        const [slot, recentPerformanceSamples] = await Promise.all([\r\n          connection.getSlot(),\r\n          connection.getRecentPerformanceSamples(30),\r\n        ]);\r\n        const totalSampleSeconds = recentPerformanceSamples.reduce(\r\n          (acc, sample) => acc + sample.samplePeriodSecs,\r\n          0,\r\n        );\r\n\r\n        const totalSamples = recentPerformanceSamples.reduce(\r\n          (acc, sample) => acc + sample.numSlots,\r\n          0,\r\n        );\r\n        const calculatedAverageBlockTime = totalSampleSeconds / totalSamples;\r\n        setCurrentSlot(slot);\r\n        setAverageBlockTime(calculatedAverageBlockTime);\r\n      } catch (error) {\r\n        console.error(\"Error fetching block time:\", error);\r\n      }\r\n    };\r\n    if (!connection) return;\r\n    init();\r\n  }, [connection]);\r\n  const estimateTimestamp = (blockTime: number | null | undefined) => {\r\n    if (blockTime == null || blockTime == undefined || currentSlot === null) {\r\n      return \"Unknown\";\r\n    }\r\n    const currentTime = Date.now() / 1000;\r\n    const blockDifference = currentSlot - blockTime;\r\n    const estimatedTimestamp = currentTime - blockDifference * averageBlockTime;\r\n    return formatDistanceToNow(new Date(estimatedTimestamp * 1000), {\r\n      addSuffix: true,\r\n    });\r\n  };\r\n  return (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow className=\"hover:bg-transparent\">\r\n          <TableHead>Signature</TableHead>\r\n          <TableHead>Block</TableHead>\r\n          <TableHead>Time</TableHead>\r\n          <TableHead>By</TableHead>\r\n          <TableHead>Fee</TableHead>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {transactions?.length === 0 ? (\r\n          <>\r\n            {[...Array(5)].map((_, index) => (\r\n              <TableRow key={index} className=\"hover:bg-transparent\">\r\n                {[...Array(5)].map((_, index) => (\r\n                  <TableCell key={index}>\r\n                    <Skeleton className=\"h-[22px] w-full\" />\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          transactions?.length && transactions.map((txn) => (\r\n            <TableRow\r\n              key={txn.transaction.signatures[0]}\r\n              className={cn(\r\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\r\n                onClick && \"cursor-pointer\",\r\n              )}\r\n              onClick={() => onClick && onClick(txn)}\r\n            >\r\n              <TableCell>\r\n                <Link\r\n                  href={`https://solscan.io/tx/${txn.transaction.signatures[0]}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"group inline-flex items-center gap-1\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <ExternalLinkIcon size={16} />\r\n                  <span className=\"border-b border-transparent group-hover:border-border\">\r\n                    {shortAddress(txn.transaction.signatures[0])}\r\n                  </span>\r\n                  {txn.meta?.err && (\r\n                    <AlertCircleIcon className=\"h-4 w-4 text-destructive\" />\r\n                  )}\r\n                </Link>\r\n              </TableCell>\r\n              <TableCell>{txn.blockTime}</TableCell>\r\n              <TableCell>{estimateTimestamp(txn.slot)}</TableCell>\r\n              <TableCell>\r\n                <Link\r\n                  href={`https://solscan.io/account/${txn.transaction.message.staticAccountKeys[0]}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"group inline-flex items-center gap-1\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <ExternalLinkIcon size={16} />\r\n                  <span className=\"border-b border-transparent group-hover:border-border\">\r\n                    {shortAddress(txn.transaction.message.staticAccountKeys[0])}\r\n                  </span>\r\n                </Link>\r\n              </TableCell>\r\n              <TableCell>{(txn.meta?.fee || 0) / LAMPORTS_PER_SOL}</TableCell>\r\n            </TableRow>\r\n          ))\r\n        )}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default TxnList;",
      "type": "registry:file",
      "target": "components/ui/murphy/txn-list.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    }
  ]
}