{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-list",
  "type": "registry:block",
  "title": "The TxnList component is a table of transactions with metadata.",
  "dependencies": [
    "@solana/web3.js",
    "date-fns",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "table",
    "skeleton"
  ],
  "files": [
    {
      "path": "components/ui/murphy/txn-list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\n\nimport {\n  VersionedTransactionResponse,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\n\nimport { useConnection } from \"@solana/wallet-adapter-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { AlertCircleIcon, ExternalLinkIcon } from \"lucide-react\";\n\nimport { shortAddress, cn } from \"@/lib/utils\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ntype TxnListProps = {\n  transactions: VersionedTransactionResponse[];\n  onClick?: (txn: VersionedTransactionResponse) => void;\n};\n\nconst TxnList = ({ transactions, onClick }: TxnListProps) => {\n  const { connection } = useConnection();\n  const [currentSlot, setCurrentSlot] = React.useState<number | null>(null);\n  const [averageBlockTime, setAverageBlockTime] = React.useState<number>(0.4);\n    React.useEffect(() => {\n    console.log(\"transactions: \",transactions)\n},[transactions])\n  React.useEffect(() => {\n    const init = async () => {\n      try {\n        const [slot, recentPerformanceSamples] = await Promise.all([\n          connection.getSlot(),\n          connection.getRecentPerformanceSamples(30),\n        ]);\n        const totalSampleSeconds = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.samplePeriodSecs,\n          0,\n        );\n\n        const totalSamples = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.numSlots,\n          0,\n        );\n        const calculatedAverageBlockTime = totalSampleSeconds / totalSamples;\n        setCurrentSlot(slot);\n        setAverageBlockTime(calculatedAverageBlockTime);\n      } catch (error) {\n        console.error(\"Error fetching block time:\", error);\n      }\n    };\n    if (!connection) return;\n    init();\n  }, [connection]);\n  const estimateTimestamp = (blockTime: number | null | undefined) => {\n    if (blockTime == null || blockTime == undefined || currentSlot === null) {\n      return \"Unknown\";\n    }\n    const currentTime = Date.now() / 1000;\n    const blockDifference = currentSlot - blockTime;\n    const estimatedTimestamp = currentTime - blockDifference * averageBlockTime;\n    return formatDistanceToNow(new Date(estimatedTimestamp * 1000), {\n      addSuffix: true,\n    });\n  };\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow className=\"hover:bg-transparent\">\n          <TableHead>Signature</TableHead>\n          <TableHead>Block</TableHead>\n          <TableHead>Time</TableHead>\n          <TableHead>By</TableHead>\n          <TableHead>Fee</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {transactions?.length === 0 ? (\n          <>\n            {[...Array(5)].map((_, index) => (\n              <TableRow key={index} className=\"hover:bg-transparent\">\n                {[...Array(5)].map((_, index) => (\n                  <TableCell key={index}>\n                    <Skeleton className=\"h-[22px] w-full\" />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </>\n        ) : (\n          transactions?.length && transactions.map((txn) => (\n            <TableRow\n              key={txn.transaction.signatures[0]}\n              className={cn(\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\n                onClick && \"cursor-pointer\",\n              )}\n              onClick={() => onClick && onClick(txn)}\n            >\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/tx/${txn.transaction.signatures[0]}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <ExternalLinkIcon size={16} />\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(txn.transaction.signatures[0])}\n                  </span>\n                  {txn.meta?.err && (\n                    <AlertCircleIcon className=\"h-4 w-4 text-destructive\" />\n                  )}\n                </Link>\n              </TableCell>\n              <TableCell>{txn.blockTime}</TableCell>\n              <TableCell>{estimateTimestamp(txn.slot)}</TableCell>\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/account/${txn.transaction.message.staticAccountKeys[0]}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <ExternalLinkIcon size={16} />\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(txn.transaction.message.staticAccountKeys[0])}\n                  </span>\n                </Link>\n              </TableCell>\n              <TableCell>{(txn.meta?.fee || 0) / LAMPORTS_PER_SOL}</TableCell>\n            </TableRow>\n          ))\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default TxnList;",
      "type": "registry:file",
      "target": "components/ui/murphy/txn-list.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport millify from \"millify\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\n};\n\nexport const formatUsd = (num: number): string => {\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\n};\n\nexport const formatNumber = (\n  num: number,\n  options: Intl.NumberFormatOptions = {},\n): string => {\n  if (num === null || num === undefined) return \"0\";\n\n  const absNum = Math.abs(num);\n  let decimals = 2;\n\n  if (absNum < 1) {\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\n  }\n\n  return new Intl.NumberFormat(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(num);\n};\n\nexport const formatNumberShort = (num: number): string => {\n  if (num < 1000) return formatNumber(num);\n  return millify(num, {\n    precision: 2,\n  });\n};\n\nexport const formatNumberGrouped = (\n  value: number,\n  expThreshold: number = 0.0001,\n  expPrecision: number = 1,\n) => {\n  if (value === 0) return \"0\";\n\n  if (Math.abs(value) < expThreshold) {\n    return value.toExponential(expPrecision);\n  }\n\n  if (Number.isInteger(value)) {\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\n  }\n\n  const valueParts = value.toString().split(\".\");\n  const decimalPart = valueParts[1] ?? \"\";\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\n\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: true,\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\n  }).format(value);\n};\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch (error) {\n        return false;\n\n  }\n};\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    }
  ]
}