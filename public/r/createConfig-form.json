{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "createConfig-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config Form",
  "description": "A simple build curve and create config form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/createConfig-form.tsx",
      "content": "'use client';\r\n\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\r\nimport { PublicKey, Transaction, Keypair } from \"@solana/web3.js\";\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { DynamicBondingCurveClient } from '@meteora-ag/dynamic-bonding-curve-sdk';\r\nimport BN from 'bn.js';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\nenum FeeSchedulerMode {\r\n  Linear = 0\r\n}\r\n\r\ninterface CreateConfigResult {\r\n  config: string;\r\n  signature: string;\r\n}\r\n\r\ntype CreateConfigFormValues = {\r\n  feeClaimer: string;\r\n  leftoverReceiver: string;\r\n  quoteMint: string;\r\n  cliffFeeNumerator: string;\r\n  binStep: number;\r\n  tokenDecimal: number;\r\n  partnerLpPercentage: number;\r\n  creatorLpPercentage: number;\r\n  partnerLockedLpPercentage: number;\r\n  creatorLockedLpPercentage: number;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate feeClaimer\r\n  if (!data.feeClaimer) {\r\n    errors.feeClaimer = {\r\n      type: \"required\",\r\n      message: \"Fee claimer address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.feeClaimer);\r\n    } catch (e) {\r\n      errors.feeClaimer = {\r\n        type: \"pattern\",\r\n        message: \"Invalid address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate leftoverReceiver\r\n  if (!data.leftoverReceiver) {\r\n    errors.leftoverReceiver = {\r\n      type: \"required\",\r\n      message: \"Leftover receiver address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.leftoverReceiver);\r\n    } catch (e) {\r\n      errors.leftoverReceiver = {\r\n        type: \"pattern\",\r\n        message: \"Invalid address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate quoteMint\r\n  if (!data.quoteMint) {\r\n    errors.quoteMint = {\r\n      type: \"required\",\r\n      message: \"Quote mint address is required\",\r\n    };\r\n  }\r\n\r\n  // Validate cliffFeeNumerator\r\n  if (!data.cliffFeeNumerator) {\r\n    errors.cliffFeeNumerator = {\r\n      type: \"required\",\r\n      message: \"Cliff fee numerator is required\",\r\n    };\r\n  }\r\n\r\n  // Validate binStep\r\n  if (data.binStep === undefined || data.binStep === null || data.binStep === \"\") {\r\n    errors.binStep = {\r\n      type: \"required\",\r\n      message: \"Bin step is required\",\r\n    };\r\n  } else if (Number(data.binStep) < 1) {\r\n    errors.binStep = {\r\n      type: \"min\",\r\n      message: \"Bin step must be greater than 0\",\r\n    };\r\n  }\r\n\r\n  // Validate tokenDecimal\r\n  if (data.tokenDecimal === undefined || data.tokenDecimal === null || data.tokenDecimal === \"\") {\r\n    errors.tokenDecimal = {\r\n      type: \"required\",\r\n      message: \"Token decimal is required\",\r\n    };\r\n  } else if (Number(data.tokenDecimal) < 0 || Number(data.tokenDecimal) > 18) {\r\n    errors.tokenDecimal = {\r\n      type: \"range\",\r\n      message: \"Token decimal must be between 0 and 18\",\r\n    };\r\n  }\r\n\r\n  // Validate LP percentages\r\n  const validatePercentage = (field: string, name: string) => {\r\n    if (data[field] === undefined || data[field] === null || data[field] === \"\") {\r\n      errors[field] = {\r\n        type: \"required\",\r\n        message: `${name} is required`,\r\n      };\r\n    } else if (Number(data[field]) < 0 || Number(data[field]) > 100) {\r\n      errors[field] = {\r\n        type: \"range\",\r\n        message: `${name} must be between 0 and 100`,\r\n      };\r\n    }\r\n  };\r\n\r\n  validatePercentage(\"partnerLpPercentage\", \"Partner LP percentage\");\r\n  validatePercentage(\"creatorLpPercentage\", \"Creator LP percentage\");\r\n  validatePercentage(\"partnerLockedLpPercentage\", \"Partner locked LP percentage\");\r\n  validatePercentage(\"creatorLockedLpPercentage\", \"Creator locked LP percentage\");\r\n\r\n  // Validate that percentages sum to 100\r\n  const totalPercentage = Number(data.partnerLpPercentage || 0) + \r\n                          Number(data.creatorLpPercentage || 0) + \r\n                          Number(data.partnerLockedLpPercentage || 0) + \r\n                          Number(data.creatorLockedLpPercentage || 0);\r\n  \r\n  if (totalPercentage !== 100) {\r\n    errors.partnerLpPercentage = {\r\n      type: \"validate\",\r\n      message: \"LP percentages must sum to 100%\",\r\n    };\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport function CreateConfigForm({ onConfigCreated }: { onConfigCreated?: (configAddress: string) => void }) {\r\n  // Hooks\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\r\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\r\n  \r\n  // State\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [result, setResult] = useState<CreateConfigResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<CreateConfigFormValues>({\r\n    defaultValues: {\r\n      feeClaimer: \"\",\r\n      leftoverReceiver: \"\",\r\n      quoteMint: \"So11111111111111111111111111111111111111112\", // SOL by default\r\n      cliffFeeNumerator: \"2500000\",\r\n      binStep: 1,\r\n      tokenDecimal: 9,\r\n      partnerLpPercentage: 25,\r\n      creatorLpPercentage: 25,\r\n      partnerLockedLpPercentage: 25,\r\n      creatorLockedLpPercentage: 25,\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Only render after the component is mounted on the client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Update network state when endpoint changes\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Auto-fill wallet address into form fields when wallet is connected\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      const walletAddress = publicKey.toString();\r\n      \r\n      // Only set if fields are empty\r\n      if (!form.getValues(\"feeClaimer\")) {\r\n        form.setValue(\"feeClaimer\", walletAddress, { shouldValidate: false });\r\n      }\r\n      \r\n      if (!form.getValues(\"leftoverReceiver\")) {\r\n        form.setValue(\"leftoverReceiver\", walletAddress, { shouldValidate: false });\r\n      }\r\n    }\r\n  }, [connected, publicKey, form]);\r\n\r\n  // Handle form submission\r\n  const onSubmit = async (values: CreateConfigFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error('Please connect your wallet');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      setError(null);\r\n      setCurrentStage('confirming');\r\n\r\n      toast.loading(\"Creating config...\", {\r\n        id: \"create-config\"\r\n      });\r\n\r\n      // Create a new keypair for config\r\n      const configKeypair = Keypair.generate();\r\n      \r\n      // Initialize DBC client\r\n      const client = new DynamicBondingCurveClient(connection);\r\n      \r\n      // Create params for createConfig\r\n      const createConfigParams = {\r\n        payer: publicKey,\r\n        config: configKeypair.publicKey,\r\n        feeClaimer: new PublicKey(values.feeClaimer),\r\n        leftoverReceiver: new PublicKey(values.leftoverReceiver),\r\n        quoteMint: new PublicKey(values.quoteMint),\r\n    poolFees: {\r\n        baseFee: {\r\n            cliffFeeNumerator: new BN(values.cliffFeeNumerator),\r\n            numberOfPeriod: 0,\r\n            reductionFactor: new BN('0'),\r\n            periodFrequency: new BN('0'),\r\n            feeSchedulerMode: FeeSchedulerMode.Linear,\r\n        },\r\n        dynamicFee: {\r\n            binStep: values.binStep,\r\n            binStepU128: new BN('1844674407370955'),\r\n            filterPeriod: 10,\r\n            decayPeriod: 120,\r\n            reductionFactor: 1000,\r\n            variableFeeControl: 100000,\r\n            maxVolatilityAccumulator: 100000,\r\n        },\r\n    },\r\n    activationType: 0,\r\n    collectFeeMode: 0,\r\n        migrationOption: 0,\r\n    tokenType: 0,\r\n        tokenDecimal: values.tokenDecimal,\r\n    migrationQuoteThreshold: new BN('1000000000'),\r\n        partnerLpPercentage: values.partnerLpPercentage,\r\n        creatorLpPercentage: values.creatorLpPercentage,\r\n        partnerLockedLpPercentage: values.partnerLockedLpPercentage,\r\n        creatorLockedLpPercentage: values.creatorLockedLpPercentage,\r\n    sqrtStartPrice: new BN('58333726687135158'),\r\n    lockedVesting: {\r\n        amountPerPeriod: new BN('0'),\r\n        cliffDurationFromMigrationTime: new BN('0'),\r\n        frequency: new BN('0'),\r\n        numberOfPeriod: new BN('0'),\r\n        cliffUnlockAmount: new BN('0'),\r\n    },\r\n    migrationFeeOption: 0,\r\n    tokenSupply: {\r\n        preMigrationTokenSupply: new BN('10000000000000000000'),\r\n        postMigrationTokenSupply: new BN('10000000000000000000'),\r\n    },\r\n    padding: [\r\n        new BN(0),\r\n        new BN(0),\r\n        new BN(0),\r\n        new BN(0),\r\n        new BN(0),\r\n        new BN(0),\r\n        new BN(0),\r\n    ],\r\n    curve: [\r\n        {\r\n            sqrtPrice: new BN('233334906748540631'),\r\n            liquidity: new BN('622226417996106429201027821619672729'),\r\n        },\r\n        {\r\n            sqrtPrice: new BN('79226673521066979257578248091'),\r\n            liquidity: new BN('1'),\r\n        },\r\n    ],\r\n      };\r\n      \r\n      // Create transaction\r\n      const transaction = await client.partners.createConfig(createConfigParams);\r\n      \r\n      // Get recentBlockhash\r\n      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\r\n      transaction.recentBlockhash = blockhash;\r\n      transaction.lastValidBlockHeight = lastValidBlockHeight;\r\n      \r\n      // Set feePayer for transaction\r\n      transaction.feePayer = publicKey;\r\n      \r\n      // Partially sign transaction with config keypair if needed\r\n      transaction.partialSign(configKeypair);\r\n      \r\n      // Sign and send transaction\r\n      const signature = await wallet.adapter.sendTransaction(transaction, connection);\r\n      \r\n      // Wait for confirmation\r\n      await connection.confirmTransaction({\r\n        blockhash,\r\n        lastValidBlockHeight,\r\n        signature\r\n      });\r\n      \r\n      // Save result\r\n      const configAddress = configKeypair.publicKey.toString();\r\n      setResult({\r\n        config: configAddress,\r\n        signature: signature\r\n      });\r\n      \r\n      // Call callback if provided\r\n      if (onConfigCreated) {\r\n        onConfigCreated(configAddress);\r\n      }\r\n      \r\n      toast.success(\"Configuration created successfully!\", {\r\n        id: \"create-config\",\r\n        description: `Config: ${configAddress.slice(0, 8)}...${configAddress.slice(-8)}`\r\n      });\r\n      \r\n      setCurrentStage('success');\r\n      \r\n    } catch (err: any) {\r\n      console.error(\"Create Config error:\", err);\r\n      setError(err.message);\r\n      setCurrentStage('error');\r\n      \r\n      // Check if user canceled/rejected the transaction\r\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\r\n        toast.error(\"Transaction canceled\", {\r\n          id: \"create-config\",\r\n          description: \"You canceled the transaction\"\r\n        });\r\n      } else {\r\n        toast.error(\"Failed to create configuration\", {\r\n          id: \"create-config\",\r\n          description: err.message\r\n        });\r\n        \r\n        // If transaction fails due to connection error, try switching to another endpoint\r\n        if (err.message.includes('failed to fetch') || \r\n            err.message.includes('timeout') || \r\n            err.message.includes('429') ||\r\n            err.message.includes('503')) {\r\n          switchToNextEndpoint();\r\n        }\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\r\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  const viewConfig = () => {\r\n    if (result?.config) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\r\n      window.open(`${baseUrl}${result.config}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setError(null);\r\n    setCurrentStage('input');\r\n  };\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold text-center\">Config Created!</h3>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Config Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.config}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewConfig}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Config\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"outline\" \r\n          onClick={viewExplorer}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Transaction\r\n        </Button>\r\n      </div>\r\n      \r\n      <Button \r\n        onClick={resetForm}\r\n        className=\"w-full\"\r\n      >\r\n        Create New Config\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render error view\r\n  const renderError = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\r\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\r\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the configuration.'}</p>\r\n      <Button \r\n        onClick={() => {\r\n          setCurrentStage('input');\r\n        }}\r\n        className=\"w-full\"\r\n      >\r\n        Try Again\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render confirmation view\r\n  const renderConfirming = () => (\r\n    <div className=\"space-y-4 p-4 text-center\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\r\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\r\n      </div>\r\n      <h3 className=\"text-xl font-bold\">Creating Config</h3>\r\n      <p className=\"text-muted-foreground\">Please wait while your configuration is being created...</p>\r\n    </div>\r\n  );\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <div className=\"space-y-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"feeClaimer\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Fee Claimer</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Address that will receive fees\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Address that will be able to claim fees from the pool\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n          \r\n          <FormField\r\n            control={form.control}\r\n            name=\"leftoverReceiver\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Leftover Receiver</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"Address that will receive leftover tokens\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Address that will receive leftover tokens\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n          \r\n          <FormField\r\n            control={form.control}\r\n            name=\"quoteMint\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Quote Mint</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Select\r\n                    onValueChange={field.onChange}\r\n                    defaultValue={field.value}\r\n                    disabled={isSubmitting}\r\n                  >\r\n                    <SelectTrigger className=\"border-none bg-transparent h-auto text-xl font-medium focus:ring-0\">\r\n                      <SelectValue placeholder=\"Select quote token\">\r\n                        {field.value === \"So11111111111111111111111111111111111111112\" && (\r\n                          <div className=\"flex items-center\">\r\n                            <img \r\n                              src=\"/crypto-logos/solana-logo.svg\" \r\n                              alt=\"SOL\" \r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            SOL\r\n                          </div>\r\n                        )}\r\n                        {field.value === \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" && (\r\n                          <div className=\"flex items-center\">\r\n                            <img \r\n                              src=\"/crypto-logos/usd-coin-usdc-logo.svg\" \r\n                              alt=\"USDC\" \r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            USDC\r\n                          </div>\r\n                        )}\r\n                        {field.value === \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\" && (\r\n                          <div className=\"flex items-center\">\r\n                            <img \r\n                              src=\"/crypto-logos/tether-usdt-logo.svg\" \r\n                              alt=\"USDT\" \r\n                              className=\"w-5 h-5 mr-2 rounded-full\"\r\n                            />\r\n                            USDT\r\n                          </div>\r\n                        )}\r\n                      </SelectValue>\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"So11111111111111111111111111111111111111112\">\r\n                        <div className=\"flex items-center\">\r\n                          <img \r\n                            src=\"/crypto-logos/solana-logo.svg\" \r\n                            alt=\"SOL\" \r\n                            className=\"w-5 h-5 mr-2 rounded-full\"\r\n                          />\r\n                          SOL\r\n                        </div>\r\n                      </SelectItem>\r\n                      <SelectItem value=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\">\r\n                        <div className=\"flex items-center\">\r\n                          <img \r\n                            src=\"/crypto-logos/usd-coin-usdc-logo.svg\" \r\n                            alt=\"USDC\" \r\n                            className=\"w-5 h-5 mr-2 rounded-full\"\r\n                          />\r\n                          USDC\r\n                        </div>\r\n                      </SelectItem>\r\n                      <SelectItem value=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\">\r\n                        <div className=\"flex items-center\">\r\n                          <img \r\n                            src=\"/crypto-logos/tether-usdt-logo.svg\" \r\n                            alt=\"USDT\" \r\n                            className=\"w-5 h-5 mr-2 rounded-full\"\r\n                          />\r\n                          USDT\r\n                        </div>\r\n                      </SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  The quote token for the pool\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"cliffFeeNumerator\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Cliff Fee Numerator</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"2500000\"\r\n                    {...field}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Base fee for the pool\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n          \r\n          <FormField\r\n            control={form.control}\r\n            name=\"binStep\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Bin Step</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"1\"\r\n                    min=\"1\"\r\n                    {...field}\r\n                    value={field.value}\r\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Bin step for dynamic fee calculation\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n          \r\n          <FormField\r\n            control={form.control}\r\n            name=\"tokenDecimal\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <FormLabel>Token Decimal</FormLabel>\r\n                </div>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"9\"\r\n                    min=\"0\"\r\n                    max=\"18\"\r\n                    {...field}\r\n                    value={field.value}\r\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                    disabled={isSubmitting}\r\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Decimal places for the token\r\n                </p>\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-4\">\r\n          <div className=\"font-medium\">LP Distribution</div>\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <FormField\r\n              control={form.control}\r\n              name=\"partnerLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Partner LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      value={field.value}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"creatorLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Creator LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      value={field.value}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"partnerLockedLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Partner Locked LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      value={field.value}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <FormField\r\n              control={form.control}\r\n              name=\"creatorLockedLpPercentage\"\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <FormLabel>Creator Locked LP %</FormLabel>\r\n                  </div>\r\n                  <FormControl>\r\n                    <Input\r\n                      type=\"number\"\r\n                      placeholder=\"25\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      {...field}\r\n                      value={field.value}\r\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\r\n                      disabled={isSubmitting}\r\n                      className=\"bg-transparent text-sm h-8\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n          </div>\r\n          \r\n          <p className=\"text-xs text-muted-foreground\">\r\n            LP distribution percentages must sum to 100%. These percentages determine how liquidity provider tokens are distributed.\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Default Fee Scheduler Mode</span>\r\n              <span className=\"font-medium\">Linear</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Creating...\r\n                  </>\r\n                ) : \"Create Config\"}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  // Render based on current stage\r\n  const renderStageContent = () => {\r\n    switch (currentStage) {\r\n      case 'success':\r\n        return renderSuccess();\r\n      case 'error':\r\n        return renderError();\r\n      case 'confirming':\r\n        return renderConfirming();\r\n      default:\r\n        return renderForm();\r\n    }\r\n  };\r\n\r\n  // Avoid hydration error\r\n  if (!mounted) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create Config</CardTitle>\r\n          <CardDescription>Create a new DBC configuration</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Create Config</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>Create a new DBC configuration for pools</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {renderStageContent()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CreateConfigForm;\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/createConfig-form.tsx"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\r\n\r\nexport interface WalletModalContextState {\r\n    visible: boolean;\r\n    setVisible: (open: boolean) => void;\r\n}\r\n\r\nconst DEFAULT_CONTEXT = {\r\n    setVisible(_open: boolean) {\r\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\r\n    },\r\n    visible: false,\r\n};\r\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\r\n    get() {\r\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\r\n        return false;\r\n    },\r\n});\r\n\r\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\r\n    return (\r\n        'You have tried to ' +\r\n        ` ${action} \"${valueName}\"` +\r\n        ' on a WalletModalContext without providing one.' +\r\n        ' Make sure to render a WalletModalProvider' +\r\n        ' as an ancestor of the component that uses ' +\r\n        'WalletModalContext'\r\n    );\r\n}\r\n\r\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\r\n\r\nexport function useWalletModal(): WalletModalContextState {\r\n    return useContext(WalletModalContext);\r\n}\r\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    }
  ]
}