{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "createConfig-form",
  "type": "registry:block",
  "title": "Build Curve and Create Config Form",
  "description": "A simple build curve and create config form component.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/createConfig-form.tsx",
      "content": "'use client';\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { Loader2, ExternalLink, CheckCircle, Settings } from \"lucide-react\";\nimport { PublicKey, Transaction, Keypair } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { DynamicBondingCurveClient } from '@meteora-ag/dynamic-bonding-curve-sdk';\nimport BN from 'bn.js';\n\n// UI components\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Context\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\n\nenum FeeSchedulerMode {\n  Linear = 0\n}\n\ninterface CreateConfigResult {\n  config: string;\n  signature: string;\n}\n\ntype CreateConfigFormValues = {\n  feeClaimer: string;\n  leftoverReceiver: string;\n  quoteMint: string;\n  cliffFeeNumerator: string;\n  binStep: number;\n  tokenDecimal: number;\n  partnerLpPercentage: number;\n  creatorLpPercentage: number;\n  partnerLockedLpPercentage: number;\n  creatorLockedLpPercentage: number;\n};\n\n// Create custom resolver for form\nconst customResolver = (data: any) => {\n  const errors: any = {};\n\n  // Validate feeClaimer\n  if (!data.feeClaimer) {\n    errors.feeClaimer = {\n      type: \"required\",\n      message: \"Fee claimer address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.feeClaimer);\n    } catch (e) {\n      errors.feeClaimer = {\n        type: \"pattern\",\n        message: \"Invalid address format\",\n      };\n    }\n  }\n\n  // Validate leftoverReceiver\n  if (!data.leftoverReceiver) {\n    errors.leftoverReceiver = {\n      type: \"required\",\n      message: \"Leftover receiver address is required\",\n    };\n  } else {\n    try {\n      new PublicKey(data.leftoverReceiver);\n    } catch (e) {\n      errors.leftoverReceiver = {\n        type: \"pattern\",\n        message: \"Invalid address format\",\n      };\n    }\n  }\n\n  // Validate quoteMint\n  if (!data.quoteMint) {\n    errors.quoteMint = {\n      type: \"required\",\n      message: \"Quote mint address is required\",\n    };\n  }\n\n  // Validate cliffFeeNumerator\n  if (!data.cliffFeeNumerator) {\n    errors.cliffFeeNumerator = {\n      type: \"required\",\n      message: \"Cliff fee numerator is required\",\n    };\n  }\n\n  // Validate binStep\n  if (data.binStep === undefined || data.binStep === null || data.binStep === \"\") {\n    errors.binStep = {\n      type: \"required\",\n      message: \"Bin step is required\",\n    };\n  } else if (Number(data.binStep) < 1) {\n    errors.binStep = {\n      type: \"min\",\n      message: \"Bin step must be greater than 0\",\n    };\n  }\n\n  // Validate tokenDecimal\n  if (data.tokenDecimal === undefined || data.tokenDecimal === null || data.tokenDecimal === \"\") {\n    errors.tokenDecimal = {\n      type: \"required\",\n      message: \"Token decimal is required\",\n    };\n  } else if (Number(data.tokenDecimal) < 0 || Number(data.tokenDecimal) > 18) {\n    errors.tokenDecimal = {\n      type: \"range\",\n      message: \"Token decimal must be between 0 and 18\",\n    };\n  }\n\n  // Validate LP percentages\n  const validatePercentage = (field: string, name: string) => {\n    if (data[field] === undefined || data[field] === null || data[field] === \"\") {\n      errors[field] = {\n        type: \"required\",\n        message: `${name} is required`,\n      };\n    } else if (Number(data[field]) < 0 || Number(data[field]) > 100) {\n      errors[field] = {\n        type: \"range\",\n        message: `${name} must be between 0 and 100`,\n      };\n    }\n  };\n\n  validatePercentage(\"partnerLpPercentage\", \"Partner LP percentage\");\n  validatePercentage(\"creatorLpPercentage\", \"Creator LP percentage\");\n  validatePercentage(\"partnerLockedLpPercentage\", \"Partner locked LP percentage\");\n  validatePercentage(\"creatorLockedLpPercentage\", \"Creator locked LP percentage\");\n\n  // Validate that percentages sum to 100\n  const totalPercentage = Number(data.partnerLpPercentage || 0) + \n                          Number(data.creatorLpPercentage || 0) + \n                          Number(data.partnerLockedLpPercentage || 0) + \n                          Number(data.creatorLockedLpPercentage || 0);\n  \n  if (totalPercentage !== 100) {\n    errors.partnerLpPercentage = {\n      type: \"validate\",\n      message: \"LP percentages must sum to 100%\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport function CreateConfigForm({ onConfigCreated }: { onConfigCreated?: (configAddress: string) => void }) {\n  // Hooks\n  const { connection } = useConnection();\n  const { publicKey, connected, wallet, signTransaction, signAllTransactions } = useWallet();\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\n  \n  // State\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<CreateConfigResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [network, setNetwork] = useState('devnet');\n  const [currentStage, setCurrentStage] = useState('input'); // input, confirming, success, error\n\n  // Form setup with react-hook-form\n  const form = useForm<CreateConfigFormValues>({\n    defaultValues: {\n      feeClaimer: \"\",\n      leftoverReceiver: \"\",\n      quoteMint: \"So11111111111111111111111111111111111111112\", // SOL by default\n      cliffFeeNumerator: \"2500000\",\n      binStep: 1,\n      tokenDecimal: 9,\n      partnerLpPercentage: 25,\n      creatorLpPercentage: 25,\n      partnerLockedLpPercentage: 25,\n      creatorLockedLpPercentage: 25,\n    },\n    mode: \"onSubmit\",\n    resolver: customResolver,\n  });\n\n  // Only render after the component is mounted on the client\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Update network state when endpoint changes\n  useEffect(() => {\n    if (endpoint) {\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\n    }\n  }, [endpoint]);\n\n  // Auto-fill wallet address into form fields when wallet is connected\n  useEffect(() => {\n    if (connected && publicKey) {\n      const walletAddress = publicKey.toString();\n      \n      // Only set if fields are empty\n      if (!form.getValues(\"feeClaimer\")) {\n        form.setValue(\"feeClaimer\", walletAddress, { shouldValidate: false });\n      }\n      \n      if (!form.getValues(\"leftoverReceiver\")) {\n        form.setValue(\"leftoverReceiver\", walletAddress, { shouldValidate: false });\n      }\n    }\n  }, [connected, publicKey, form]);\n\n  // Handle form submission\n  const onSubmit = async (values: CreateConfigFormValues) => {\n    if (!connected || !publicKey || !wallet) {\n      toast.error('Please connect your wallet');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setError(null);\n      setCurrentStage('confirming');\n\n      toast.loading(\"Creating config...\", {\n        id: \"create-config\"\n      });\n\n      // Create a new keypair for config\n      const configKeypair = Keypair.generate();\n      \n      // Initialize DBC client\n      const client = new DynamicBondingCurveClient(connection);\n      \n      // Create params for createConfig\n      const createConfigParams = {\n        payer: publicKey,\n        config: configKeypair.publicKey,\n        feeClaimer: new PublicKey(values.feeClaimer),\n        leftoverReceiver: new PublicKey(values.leftoverReceiver),\n        quoteMint: new PublicKey(values.quoteMint),\n    poolFees: {\n        baseFee: {\n            cliffFeeNumerator: new BN(values.cliffFeeNumerator),\n            numberOfPeriod: 0,\n            reductionFactor: new BN('0'),\n            periodFrequency: new BN('0'),\n            feeSchedulerMode: FeeSchedulerMode.Linear,\n        },\n        dynamicFee: {\n            binStep: values.binStep,\n            binStepU128: new BN('1844674407370955'),\n            filterPeriod: 10,\n            decayPeriod: 120,\n            reductionFactor: 1000,\n            variableFeeControl: 100000,\n            maxVolatilityAccumulator: 100000,\n        },\n    },\n    activationType: 0,\n    collectFeeMode: 0,\n        migrationOption: 0,\n    tokenType: 0,\n        tokenDecimal: values.tokenDecimal,\n    migrationQuoteThreshold: new BN('1000000000'),\n        partnerLpPercentage: values.partnerLpPercentage,\n        creatorLpPercentage: values.creatorLpPercentage,\n        partnerLockedLpPercentage: values.partnerLockedLpPercentage,\n        creatorLockedLpPercentage: values.creatorLockedLpPercentage,\n    sqrtStartPrice: new BN('58333726687135158'),\n    lockedVesting: {\n        amountPerPeriod: new BN('0'),\n        cliffDurationFromMigrationTime: new BN('0'),\n        frequency: new BN('0'),\n        numberOfPeriod: new BN('0'),\n        cliffUnlockAmount: new BN('0'),\n    },\n    migrationFeeOption: 0,\n    tokenSupply: {\n        preMigrationTokenSupply: new BN('10000000000000000000'),\n        postMigrationTokenSupply: new BN('10000000000000000000'),\n    },\n    padding: [\n        new BN(0),\n        new BN(0),\n        new BN(0),\n        new BN(0),\n        new BN(0),\n        new BN(0),\n        new BN(0),\n    ],\n    curve: [\n        {\n            sqrtPrice: new BN('233334906748540631'),\n            liquidity: new BN('622226417996106429201027821619672729'),\n        },\n        {\n            sqrtPrice: new BN('79226673521066979257578248091'),\n            liquidity: new BN('1'),\n        },\n    ],\n      };\n      \n      // Create transaction\n      const transaction = await client.partners.createConfig(createConfigParams);\n      \n      // Get recentBlockhash\n      const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.lastValidBlockHeight = lastValidBlockHeight;\n      \n      // Set feePayer for transaction\n      transaction.feePayer = publicKey;\n      \n      // Partially sign transaction with config keypair if needed\n      transaction.partialSign(configKeypair);\n      \n      // Sign and send transaction\n      const signature = await wallet.adapter.sendTransaction(transaction, connection);\n      \n      // Wait for confirmation\n      await connection.confirmTransaction({\n        blockhash,\n        lastValidBlockHeight,\n        signature\n      });\n      \n      // Save result\n      const configAddress = configKeypair.publicKey.toString();\n      setResult({\n        config: configAddress,\n        signature: signature\n      });\n      \n      // Call callback if provided\n      if (onConfigCreated) {\n        onConfigCreated(configAddress);\n      }\n      \n      toast.success(\"Configuration created successfully!\", {\n        id: \"create-config\",\n        description: `Config: ${configAddress.slice(0, 8)}...${configAddress.slice(-8)}`\n      });\n      \n      setCurrentStage('success');\n      \n    } catch (err: any) {\n      console.error(\"Create Config error:\", err);\n      setError(err.message);\n      setCurrentStage('error');\n      \n      // Check if user canceled/rejected the transaction\n      if (err.message && (err.message.includes(\"rejected\") || err.message.includes(\"canceled\"))) {\n        toast.error(\"Transaction canceled\", {\n          id: \"create-config\",\n          description: \"You canceled the transaction\"\n        });\n      } else {\n        toast.error(\"Failed to create configuration\", {\n          id: \"create-config\",\n          description: err.message\n        });\n        \n        // If transaction fails due to connection error, try switching to another endpoint\n        if (err.message.includes('failed to fetch') || \n            err.message.includes('timeout') || \n            err.message.includes('429') ||\n            err.message.includes('503')) {\n          switchToNextEndpoint();\n        }\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const viewExplorer = () => {\n    if (result?.signature) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  const viewConfig = () => {\n    if (result?.config) {\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/account/';\n      window.open(`${baseUrl}${result.config}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\n    }\n  };\n\n  // Reset form\n  const resetForm = () => {\n    form.reset();\n    setResult(null);\n    setError(null);\n    setCurrentStage('input');\n  };\n\n  // Render success view\n  const renderSuccess = () => (\n    <div className=\"space-y-4 p-4\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\n      </div>\n      <h3 className=\"text-xl font-bold text-center\">Config Created!</h3>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Config Address:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.config}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\n          {result?.signature}\n        </div>\n      </div>\n      \n      <div className=\"flex gap-2 mt-4\">\n        <Button \n          variant=\"outline\" \n          onClick={viewConfig}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Config\n        </Button>\n        \n        <Button \n          variant=\"outline\" \n          onClick={viewExplorer}\n          className=\"flex-1\"\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Transaction\n        </Button>\n      </div>\n      \n      <Button \n        onClick={resetForm}\n        className=\"w-full\"\n      >\n        Create New Config\n      </Button>\n    </div>\n  );\n\n  // Render error view\n  const renderError = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-red-100\">\n        <svg className=\"h-10 w-10 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </div>\n      <h3 className=\"text-xl font-bold\">Creation Failed</h3>\n      <p className=\"text-muted-foreground\">{error || 'An error occurred while creating the configuration.'}</p>\n      <Button \n        onClick={() => {\n          setCurrentStage('input');\n        }}\n        className=\"w-full\"\n      >\n        Try Again\n      </Button>\n    </div>\n  );\n\n  // Render confirmation view\n  const renderConfirming = () => (\n    <div className=\"space-y-4 p-4 text-center\">\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center\">\n        <Loader2 className=\"h-10 w-10 animate-spin\" />\n      </div>\n      <h3 className=\"text-xl font-bold\">Creating Config</h3>\n      <p className=\"text-muted-foreground\">Please wait while your configuration is being created...</p>\n    </div>\n  );\n\n  // Render form view\n  const renderForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"feeClaimer\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Fee Claimer</FormLabel>\n                </div>\n                <FormControl>\n                  <Input\n                    placeholder=\"Address that will receive fees\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Address that will be able to claim fees from the pool\n                </p>\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"leftoverReceiver\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Leftover Receiver</FormLabel>\n                </div>\n                <FormControl>\n                  <Input\n                    placeholder=\"Address that will receive leftover tokens\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Address that will receive leftover tokens\n                </p>\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"quoteMint\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Quote Mint</FormLabel>\n                </div>\n                <FormControl>\n                  <Select\n                    onValueChange={field.onChange}\n                    defaultValue={field.value}\n                    disabled={isSubmitting}\n                  >\n                    <SelectTrigger className=\"border-none bg-transparent h-auto text-xl font-medium focus:ring-0\">\n                      <SelectValue placeholder=\"Select quote token\">\n                        {field.value === \"So11111111111111111111111111111111111111112\" && (\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/solana-logo.svg\" \n                              alt=\"SOL\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            SOL\n                          </div>\n                        )}\n                        {field.value === \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" && (\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/usd-coin-usdc-logo.svg\" \n                              alt=\"USDC\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            USDC\n                          </div>\n                        )}\n                        {field.value === \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\" && (\n                          <div className=\"flex items-center\">\n                            <img \n                              src=\"/crypto-logos/tether-usdt-logo.svg\" \n                              alt=\"USDT\" \n                              className=\"w-5 h-5 mr-2 rounded-full\"\n                            />\n                            USDT\n                          </div>\n                        )}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"So11111111111111111111111111111111111111112\">\n                        <div className=\"flex items-center\">\n                          <img \n                            src=\"/crypto-logos/solana-logo.svg\" \n                            alt=\"SOL\" \n                            className=\"w-5 h-5 mr-2 rounded-full\"\n                          />\n                          SOL\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\">\n                        <div className=\"flex items-center\">\n                          <img \n                            src=\"/crypto-logos/usd-coin-usdc-logo.svg\" \n                            alt=\"USDC\" \n                            className=\"w-5 h-5 mr-2 rounded-full\"\n                          />\n                          USDC\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\">\n                        <div className=\"flex items-center\">\n                          <img \n                            src=\"/crypto-logos/tether-usdt-logo.svg\" \n                            alt=\"USDT\" \n                            className=\"w-5 h-5 mr-2 rounded-full\"\n                          />\n                          USDT\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  The quote token for the pool\n                </p>\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"cliffFeeNumerator\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Cliff Fee Numerator</FormLabel>\n                </div>\n                <FormControl>\n                  <Input\n                    placeholder=\"2500000\"\n                    {...field}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Base fee for the pool\n                </p>\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"binStep\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Bin Step</FormLabel>\n                </div>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"1\"\n                    min=\"1\"\n                    {...field}\n                    value={field.value}\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Bin step for dynamic fee calculation\n                </p>\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"tokenDecimal\"\n            render={({ field }) => (\n              <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\n                <div className=\"flex justify-between items-center\">\n                  <FormLabel>Token Decimal</FormLabel>\n                </div>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"9\"\n                    min=\"0\"\n                    max=\"18\"\n                    {...field}\n                    value={field.value}\n                    onChange={(e) => field.onChange(parseInt(e.target.value))}\n                    disabled={isSubmitting}\n                    className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\n                  />\n                </FormControl>\n                <FormMessage />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Decimal places for the token\n                </p>\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <div className=\"bg-secondary/50 rounded-lg p-4 space-y-4\">\n          <div className=\"font-medium\">LP Distribution</div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"partnerLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Partner LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      value={field.value}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"creatorLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Creator LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      value={field.value}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"partnerLockedLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Partner Locked LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      value={field.value}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"creatorLockedLpPercentage\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex justify-between items-center\">\n                    <FormLabel>Creator Locked LP %</FormLabel>\n                  </div>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"25\"\n                      min=\"0\"\n                      max=\"100\"\n                      {...field}\n                      value={field.value}\n                      onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      disabled={isSubmitting}\n                      className=\"bg-transparent text-sm h-8\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          \n          <p className=\"text-xs text-muted-foreground\">\n            LP distribution percentages must sum to 100%. These percentages determine how liquidity provider tokens are distributed.\n          </p>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Network</span>\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\n                {network}\n              </Badge>\n            </div>\n            \n            <div className=\"flex justify-between items-center text-sm\">\n              <span>Default Fee Scheduler Mode</span>\n              <span className=\"font-medium\">Linear</span>\n            </div>\n          </div>\n          \n          <div className=\"pt-2\">\n            {!connected ? (\n              <ConnectWalletButton className=\"w-full\" />\n            ) : (\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                    Creating...\n                  </>\n                ) : \"Create Config\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </form>\n    </Form>\n  );\n\n  // Render based on current stage\n  const renderStageContent = () => {\n    switch (currentStage) {\n      case 'success':\n        return renderSuccess();\n      case 'error':\n        return renderError();\n      case 'confirming':\n        return renderConfirming();\n      default:\n        return renderForm();\n    }\n  };\n\n  // Avoid hydration error\n  if (!mounted) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Create Config</CardTitle>\n          <CardDescription>Create a new DBC configuration</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center p-6\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Create Config</span>\n          {connected && publicKey && (\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription>Create a new DBC configuration for pools</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderStageContent()}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default CreateConfigForm;\n",
      "type": "registry:component",
      "target": "components/ui/murphy/createConfig-form.tsx"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    },
    {
      "path": "hook/murphy/use-walletModal.ts",
      "content": "import { createContext, useContext } from 'react';\n\nexport interface WalletModalContextState {\n    visible: boolean;\n    setVisible: (open: boolean) => void;\n}\n\nconst DEFAULT_CONTEXT = {\n    setVisible(_open: boolean) {\n        console.error(constructMissingProviderErrorMessage('call', 'setVisible'));\n    },\n    visible: false,\n};\nObject.defineProperty(DEFAULT_CONTEXT, 'visible', {\n    get() {\n        console.error(constructMissingProviderErrorMessage('read', 'visible'));\n        return false;\n    },\n});\n\nfunction constructMissingProviderErrorMessage(action: string, valueName: string) {\n    return (\n        'You have tried to ' +\n        ` ${action} \"${valueName}\"` +\n        ' on a WalletModalContext without providing one.' +\n        ' Make sure to render a WalletModalProvider' +\n        ' as an ancestor of the component that uses ' +\n        'WalletModalContext'\n    );\n}\n\nexport const WalletModalContext = createContext<WalletModalContextState>(DEFAULT_CONTEXT as WalletModalContextState);\n\nexport function useWalletModal(): WalletModalContextState {\n    return useContext(WalletModalContext);\n}\n",
      "type": "registry:hook",
      "target": "hook/murphy/use-walletModal.ts"
    }
  ]
}