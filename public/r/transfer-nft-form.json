{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transfer-nft-form",
  "type": "registry:block",
  "title": "Transfer NFT Form",
  "description": "A Solana NFT transfer component with shadcn UI styling.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/spl-token",
    "@solana/wallet-adapter-react"
  ],
  "registryDependencies": [
    "input",
    "button",
    "form",
    "card",
    "sonner",
    "select",
    "dialog",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "components/ui/murphy/transfer-nft-form.tsx",
      "content": "'use client';\r\n\r\n// React vÃ  hooks\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// Solana\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport { PublicKey, Transaction } from '@solana/web3.js';\r\nimport {\r\n  createTransferInstruction, getAssociatedTokenAddress,\r\n  createAssociatedTokenAccountInstruction\r\n} from '@solana/spl-token';\r\n\r\n// UI components\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { ConnectWalletButton } from \"./connect-wallet-button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardDescription,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\n\r\n// Icons and notifications\r\nimport { toast } from \"sonner\";\r\nimport { Loader2, ExternalLink, CheckCircle, ArrowRight, RefreshCw } from \"lucide-react\";\r\n\r\n// Context\r\nimport { ModalContext } from \"@/components/providers/wallet-provider\";\r\n\r\n// Import Metaplex libraries\r\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\r\nimport { walletAdapterIdentity } from '@metaplex-foundation/umi-signer-wallet-adapters';\r\nimport { mplTokenMetadata, findMetadataPda } from '@metaplex-foundation/mpl-token-metadata';\r\nimport { publicKey as umiPublicKey } from '@metaplex-foundation/umi';\r\n\r\ninterface TransferNFTResult {\r\n  signature: string;\r\n  nftMint: string;\r\n  recipient: string;\r\n}\r\n\r\ntype TransferNFTFormValues = {\r\n  nftMintAddress: string;\r\n  recipientAddress: string;\r\n};\r\n\r\n// Create custom resolver for form\r\nconst customResolver = (data: any) => {\r\n  const errors: any = {};\r\n\r\n  // Validate NFT mint address\r\n  if (!data.nftMintAddress) {\r\n    errors.nftMintAddress = {\r\n      type: \"required\",\r\n      message: \"NFT mint address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.nftMintAddress);\r\n    } catch (e) {\r\n      errors.nftMintAddress = {\r\n        type: \"pattern\",\r\n        message: \"Invalid NFT mint address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validate recipient address\r\n  if (!data.recipientAddress) {\r\n    errors.recipientAddress = {\r\n      type: \"required\",\r\n      message: \"Recipient address is required\",\r\n    };\r\n  } else {\r\n    try {\r\n      new PublicKey(data.recipientAddress);\r\n    } catch (e) {\r\n      errors.recipientAddress = {\r\n        type: \"pattern\",\r\n        message: \"Invalid recipient address format\",\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    values: Object.keys(errors).length === 0 ? data : {},\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default function TransferNFTForm({\r\n  nftMint: propNftMint,\r\n  onNFTTransferred\r\n}: {\r\n  nftMint?: string;\r\n  onNFTTransferred?: (signature: string, recipient: string) => void;\r\n}) {\r\n  const { connection } = useConnection();\r\n  const { publicKey, connected, wallet, sendTransaction } = useWallet();\r\n  const { switchToNextEndpoint, endpoint } = useContext(ModalContext);\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isLoadingNFT, setIsLoadingNFT] = useState(false);\r\n  const [result, setResult] = useState<TransferNFTResult | null>(null);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [network, setNetwork] = useState('devnet');\r\n  const [nftMetadata, setNftMetadata] = useState<any>(null);\r\n\r\n  // Form setup with react-hook-form\r\n  const form = useForm<TransferNFTFormValues>({\r\n    defaultValues: {\r\n      nftMintAddress: propNftMint || \"\",\r\n      recipientAddress: \"\",\r\n    },\r\n    mode: \"onSubmit\",\r\n    resolver: customResolver,\r\n  });\r\n\r\n  // Only render after the component is mounted on the client\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  // Update network state when endpoint changes\r\n  useEffect(() => {\r\n    if (endpoint) {\r\n      setNetwork(endpoint.includes('devnet') ? 'devnet' : 'mainnet');\r\n    }\r\n  }, [endpoint]);\r\n\r\n  // Load NFT metadata when mint address changes\r\n  const loadNFTMetadata = async (mintAddress: string) => {\r\n    if (!mintAddress) {\r\n      setNftMetadata(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoadingNFT(true);\r\n\r\n      // Simple validation - check if mint account exists\r\n      const mintPubkey = new PublicKey(mintAddress);\r\n      const accountInfo = await connection.getAccountInfo(mintPubkey);\r\n\r\n      if (!accountInfo) {\r\n        throw new Error(\"NFT mint not found\");\r\n      }\r\n\r\n      // Check if it's a valid token mint\r\n      if (accountInfo.data.length !== 82) {\r\n        throw new Error(\"Invalid token mint account\");\r\n      }\r\n\r\n      // Set metadata\r\n      setNftMetadata({\r\n        name: \"NFT\",\r\n        mint: mintAddress,\r\n        exists: true\r\n      });\r\n\r\n      toast.success(\"NFT found!\", {\r\n        description: `Ready to transfer NFT: ${mintAddress.slice(0, 8)}...`\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error loading NFT:\", err);\r\n      setNftMetadata(null);\r\n      toast.error(\"Failed to load NFT\", {\r\n        description: err.message\r\n      });\r\n    } finally {\r\n      setIsLoadingNFT(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (values: TransferNFTFormValues) => {\r\n    if (!connected || !publicKey || !wallet) {\r\n      toast.error('Please connect your wallet');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n\r\n      toast.loading(\"Transferring NFT...\", {\r\n        id: \"transfer-nft\"\r\n      });\r\n\r\n      // Create transaction for NFT transfer\r\n      const transaction = new Transaction();\r\n\r\n      // Get mint public key\r\n      const mintPubkey = new PublicKey(values.nftMintAddress);\r\n      const recipientPubkey = new PublicKey(values.recipientAddress);\r\n\r\n      // Get associated token accounts\r\n      const fromTokenAccount = await getAssociatedTokenAddress(\r\n        mintPubkey,\r\n        publicKey\r\n      );\r\n\r\n      const toTokenAccount = await getAssociatedTokenAddress(\r\n        mintPubkey,\r\n        recipientPubkey\r\n      );\r\n\r\n      // Check if recipient token account exists\r\n      const recipientAccountInfo = await connection.getAccountInfo(toTokenAccount);\r\n\r\n      if (!recipientAccountInfo) {\r\n        // Create associated token account for recipient\r\n        const { createAssociatedTokenAccountInstruction } = await import('@solana/spl-token');\r\n        transaction.add(\r\n          createAssociatedTokenAccountInstruction(\r\n            publicKey,\r\n            toTokenAccount,\r\n            recipientPubkey,\r\n            mintPubkey\r\n          )\r\n        );\r\n      }\r\n\r\n      // Add transfer instruction\r\n      transaction.add(\r\n        createTransferInstruction(\r\n          fromTokenAccount,\r\n          toTokenAccount,\r\n          publicKey,\r\n          1, // NFT amount is always 1\r\n          [],\r\n          mintPubkey\r\n        )\r\n      );\r\n\r\n      // Send transaction\r\n      const signature = await sendTransaction(transaction, connection);\r\n\r\n      // Confirm transaction\r\n      await connection.confirmTransaction(signature, 'confirmed');\r\n\r\n      // Save result\r\n      setResult({\r\n        signature,\r\n        nftMint: values.nftMintAddress,\r\n        recipient: values.recipientAddress\r\n      });\r\n\r\n      // Call callback if provided\r\n      if (onNFTTransferred) {\r\n        onNFTTransferred(signature, values.recipientAddress);\r\n      }\r\n\r\n      toast.success(\"NFT transferred successfully!\", {\r\n        id: \"transfer-nft\",\r\n        description: `To: ${values.recipientAddress.slice(0, 8)}...${values.recipientAddress.slice(-8)}`\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error(\"Error transferring NFT:\", err);\r\n\r\n      toast.error(\"Cannot transfer NFT\", {\r\n        id: \"transfer-nft\",\r\n        description: err.message\r\n      });\r\n\r\n      // If transaction fails due to connection error, try switching to another endpoint\r\n      if (err.message.includes('failed to fetch') ||\r\n        err.message.includes('timeout') ||\r\n        err.message.includes('429') ||\r\n        err.message.includes('503')) {\r\n        switchToNextEndpoint();\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const viewExplorer = () => {\r\n    if (result?.signature) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/tx/' : 'https://solscan.io/tx/';\r\n      window.open(`${baseUrl}${result.signature}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  const viewNFT = () => {\r\n    if (result?.nftMint) {\r\n      const baseUrl = network === 'devnet' ? 'https://explorer.solana.com/address/' : 'https://solscan.io/token/';\r\n      window.open(`${baseUrl}${result.nftMint}${network === 'devnet' ? '?cluster=devnet' : ''}`, '_blank');\r\n    }\r\n  };\r\n\r\n  // Reset form\r\n  const resetForm = () => {\r\n    form.reset();\r\n    setResult(null);\r\n    setNftMetadata(null);\r\n  };\r\n\r\n  // Avoid hydration error\r\n  if (!mounted) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Transfer NFT</CardTitle>\r\n          <CardDescription>Transfer an NFT to another wallet on Solana</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center p-6\">\r\n          <div className=\"flex flex-col items-center gap-2\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Render success view\r\n  const renderSuccess = () => (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"mx-auto flex h-20 w-20 items-center justify-center rounded-full bg-green-100\">\r\n        <CheckCircle className=\"h-10 w-10 text-green-600\" />\r\n      </div>\r\n\r\n      <h3 className=\"text-xl font-bold text-center\">NFT Transferred!</h3>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">NFT Mint Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.nftMint}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Recipient Address:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.recipient}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"text-sm text-muted-foreground\">Transaction Signature:</div>\r\n        <div className=\"bg-secondary/60 rounded p-2 text-sm font-mono break-all\">\r\n          {result?.signature}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 mt-4\">\r\n        <Button\r\n          variant=\"outline\"\r\n          onClick={viewNFT}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View NFT\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          onClick={viewExplorer}\r\n          className=\"flex-1\"\r\n        >\r\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\r\n          View Transaction\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        onClick={resetForm}\r\n        className=\"w-full\"\r\n      >\r\n        <ArrowRight className=\"h-4 w-4 mr-2\" />\r\n        Transfer Another NFT\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render form view\r\n  const renderForm = () => (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"nftMintAddress\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>NFT Mint Address</FormLabel>\r\n                {field.value && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => loadNFTMetadata(field.value)}\r\n                    disabled={isLoadingNFT}\r\n                  >\r\n                    {isLoadingNFT ? (\r\n                      <Loader2 className=\"h-4 w-4 animate-spin mr-1\" />\r\n                    ) : (\r\n                      <RefreshCw className=\"h-4 w-4 mr-1\" />\r\n                    )}\r\n                    Verify\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter NFT mint address\"\r\n                  {...field}\r\n                  disabled={isSubmitting || !!propNftMint}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              {nftMetadata && (\r\n                <div className=\"mt-2 p-2 bg-green-50 rounded text-sm\">\r\n                  <span className=\"text-green-700\">â NFT verified and ready to transfer</span>\r\n                </div>\r\n              )}\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                The mint address of the NFT you want to transfer\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"recipientAddress\"\r\n          render={({ field }) => (\r\n            <FormItem className=\"bg-secondary/50 rounded-lg p-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <FormLabel>Recipient Address</FormLabel>\r\n              </div>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Enter recipient wallet address\"\r\n                  {...field}\r\n                  disabled={isSubmitting}\r\n                  className=\"bg-transparent border-none text-xl font-medium placeholder:text-muted-foreground focus-visible:ring-0 focus-visible:ring-offset-0\"\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n              <p className=\"text-xs text-muted-foreground mt-1\">\r\n                The wallet address that will receive the NFT\r\n              </p>\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"bg-secondary/50 rounded-lg p-4 space-y-2\">\r\n            <div className=\"flex justify-between items-center text-sm\">\r\n              <span>Network</span>\r\n              <Badge variant={network === 'mainnet' ? \"default\" : \"secondary\"}>\r\n                {network}\r\n              </Badge>\r\n            </div>\r\n            {connected && publicKey && (\r\n              <div className=\"flex justify-between items-center text-sm\">\r\n                <span>Your Wallet</span>\r\n                <span className=\"font-mono text-xs\">\r\n                  {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n                </span>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"pt-2\">\r\n            {!connected ? (\r\n              <ConnectWalletButton className=\"w-full\" />\r\n            ) : (\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full\"\r\n                disabled={isSubmitting || !nftMetadata}\r\n              >\r\n                {isSubmitting ? (\r\n                  <>\r\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                    Transferring...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <ArrowRight className=\"h-4 w-4 mr-2\" />\r\n                    Transfer NFT\r\n                  </>\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center justify-between\">\r\n          <span>Transfer NFT</span>\r\n          {connected && publicKey && (\r\n            <Badge variant=\"outline\" className=\"ml-2\">\r\n              {publicKey.toString().slice(0, 4)}...{publicKey.toString().slice(-4)}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n        <CardDescription>Transfer an NFT to another wallet on Solana</CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {result ? renderSuccess() : renderForm()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/ui/murphy/transfer-nft-form.tsx"
    }
  ]
}