{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "RecurringOrderWidget",
  "type": "registry:block",
  "author": "Murphy",
  "description": "Murphy component to manage and filter Jupiter Recurring DCA Orders on Solana mainnet",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "sonner"
  ],
  "files": [
    {
      "path": "components/ui/murphy/Jupiter-Recurring/RecurringOrderWidget.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport useRecurringJupiter, { RecurringType, OrderStatus } from \"./useRecurringJupiter\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { RecurringOrderCard } from \"./RecurringOrderCard\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { RefreshCw, FolderOpen } from \"lucide-react\";\r\n\r\nconst RECURRING_TYPE_OPTIONS: { label: string; value: RecurringType }[] = [\r\n  { label: \"Time-based\", value: \"time\" },\r\n  { label: \"Price-based\", value: \"price\" },\r\n  { label: \"All\", value: \"all\" },\r\n];\r\nconst ORDER_STATUS_OPTIONS: { label: string; value: OrderStatus }[] = [\r\n  { label: \"Active\", value: \"active\" },\r\n  { label: \"History\", value: \"history\" },\r\n];\r\n\r\nconst LOCAL_STATUS_OPTIONS = [\r\n  { label: \"All\", value: \"all\" },\r\n  { label: \"Completed\", value: \"completed\" },\r\n  { label: \"Cancelled\", value: \"cancelled\" },\r\n  { label: \"Expired\", value: \"expired\" },\r\n  { label: \"Failed\", value: \"failed\" },\r\n];\r\n\r\nexport function RecurringOrderWidget({ className, style }: { className?: string; style?: React.CSSProperties }) {\r\n  const { publicKey, connected } = useWallet();\r\n  const {\r\n    loading,\r\n    error,\r\n    data,\r\n    recurringType,\r\n    orderStatus,\r\n    includeFailedTx,\r\n    setRecurringType,\r\n    setOrderStatus,\r\n    setIncludeFailedTx,\r\n    refetch,\r\n  } = useRecurringJupiter();\r\n\r\n  const [localStatus, setLocalStatus] = useState<string>(\"all\");\r\n\r\n  useEffect(() => {\r\n    if (connected && publicKey) {\r\n      refetch();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [connected, publicKey]);\r\n\r\n  if (!connected || !publicKey) {\r\n    return (\r\n      <Card className={cn(\"max-w-md mx-auto\", className)}>\r\n        <CardHeader>\r\n          <CardTitle>Recurring Orders</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className=\"text-muted-foreground\">Please connect your wallet to view your recurring orders.</p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={cn(\"w-full bg-neutral-950 border border-neutral-800 shadow-2xl rounded-2xl p-0 flex flex-col\", className)} style={style}>\r\n      <CardHeader className=\"flex flex-col gap-1 px-8 pt-8 pb-2\">\r\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-2\">\r\n          <CardTitle className=\"text-2xl font-extrabold text-white tracking-tight\">Your Recurring Orders</CardTitle>\r\n          <span className=\"text-sm text-neutral-400 font-normal\">All your DCA orders in one place</span>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent className=\"flex flex-col gap-6 px-8 pb-8\">\r\n        {/* Filter Bar */}\r\n        <div className=\"flex flex-col md:flex-row md:items-center gap-4 w-full mb-2\">\r\n          <div className=\"flex flex-1 flex-col md:flex-row gap-4\">\r\n            <Select value={recurringType} onValueChange={(v) => setRecurringType(v as RecurringType, orderStatus, includeFailedTx)}>\r\n              <SelectTrigger className=\"min-w-[140px] bg-neutral-900 border border-neutral-800 text-white focus:ring-2 focus:ring-violet-600 rounded-lg px-4 py-2\">\r\n                <SelectValue placeholder=\"Type\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {RECURRING_TYPE_OPTIONS.map((opt) => (\r\n                  <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            <Select value={orderStatus} onValueChange={(v) => { setOrderStatus(v as OrderStatus); setLocalStatus(\"all\"); }}>\r\n              <SelectTrigger className=\"min-w-[120px] bg-neutral-900 border border-neutral-800 text-white focus:ring-2 focus:ring-violet-600 rounded-lg px-4 py-2\">\r\n                <SelectValue placeholder=\"Status\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {ORDER_STATUS_OPTIONS.map((opt) => (\r\n                  <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            {orderStatus === \"history\" && (\r\n              <Select value={localStatus} onValueChange={setLocalStatus}>\r\n                <SelectTrigger className=\"min-w-[120px] bg-neutral-900 border border-neutral-800 text-white focus:ring-2 focus:ring-violet-600 rounded-lg px-4 py-2\">\r\n                  <SelectValue placeholder=\"Filter by status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {LOCAL_STATUS_OPTIONS.map((opt) => (\r\n                    <SelectItem key={opt.value} value={opt.value}>{opt.label}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            )}\r\n          </div>\r\n          <div className=\"flex items-center gap-4 ml-auto\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Switch checked={includeFailedTx} onCheckedChange={setIncludeFailedTx} id=\"failedtx\" />\r\n              <label htmlFor=\"failedtx\" className=\"text-xs text-neutral-300 whitespace-nowrap\">Include Failed Tx</label>\r\n            </div>\r\n            <Button size=\"sm\" variant=\"outline\" onClick={() => refetch()} disabled={loading} className=\"min-w-[100px] bg-neutral-900 border border-violet-700 text-violet-400 hover:bg-violet-950 hover:text-white font-semibold rounded-lg transition\">\r\n              {loading ? <RefreshCw className=\"animate-spin w-4 h-4\" /> : \"Refresh\"}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {/* Content */}\r\n        <div className=\"flex-1 flex flex-col items-center justify-center min-h-[180px]\">\r\n          {error && typeof error === \"string\" && (\r\n            error.trim().startsWith(\"{\") && error.trim().endsWith(\"}\")\r\n              ? <div className=\"text-red-600 text-base mb-2\">No orders found or API returned empty result.</div>\r\n              : <div className=\"text-red-600 text-base mb-2\">{error}</div>\r\n          )}\r\n          {loading && <div className=\"text-neutral-400 text-base\">Loading orders...</div>}\r\n          {!loading && (!data || data.length === 0) && (\r\n            <div className=\"flex flex-col items-center gap-2 mt-6\">\r\n              <FolderOpen className=\"w-12 h-12 text-neutral-700 mb-2\" />\r\n              <div className=\"text-lg text-neutral-400 font-medium\">No recurring orders found.</div>\r\n            </div>\r\n          )}\r\n          <div className=\"flex flex-col w-full gap-2 mt-2\">\r\n            {data && data\r\n              .filter((order: any) => {\r\n                if (orderStatus !== \"history\") return true;\r\n                if (localStatus === \"all\") return true;\r\n                return order.status.toLowerCase() === localStatus.toLowerCase();\r\n              })\r\n              .map((order: any) => (\r\n                <div key={order.id} className=\"w-full border-b border-neutral-800 last:border-b-0 hover:bg-neutral-900/80 transition rounded-lg px-2 py-2\">\r\n                  <RecurringOrderCard order={order} className=\"bg-transparent border-none shadow-none p-0\" />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RecurringOrderWidget; \r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/Jupiter-Recurring/RecurringOrderWidget.tsx"
    }
  ]
}