{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-input",
  "type": "registry:block",
  "title": "token-input",
  "description": "The TokenInput component is an input field with support for user balances, half / max buttons, and number formatting.",
  "dependencies": [
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-input.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { WalletIcon } from \"lucide-react\";\n\nimport { formatNumberGrouped, formatNumberShort } from \"@/lib/utils\";\nimport { SolAsset } from \"@/types/assets\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { TokenCombobox } from \"@/components/ui/murphy/token-combobox\";\n\ntype TokenInputProps = {\n  assets: SolAsset[];\n  disabled: boolean;\n  showWalletBalance?: boolean;\n  showQuickAmountButtons?: boolean;\n  amount?: number;\n  onTokenSelect?: (token: SolAsset) => void;\n  onAmountChange?: (amount: number) => void;\n  onSearch?: ({\n    query,\n    owner,\n  }: {\n    query: string;\n    owner?: PublicKey;\n  }) => Promise<SolAsset[]>;\n};\n\nexport const TokenInput = React.forwardRef<HTMLInputElement, TokenInputProps>(\n  (\n    {\n      assets,\n      disabled = false,\n      showWalletBalance = true,\n      showQuickAmountButtons = true,\n      amount: initAmount = 0,\n      onTokenSelect,\n      onAmountChange,\n      onSearch,\n    },\n    amountInputRef: React.ForwardedRef<HTMLInputElement>,\n  ) => {\n    const [amount, setAmount] = React.useState<string>(initAmount.toString());\n    const [maxAmount, setMaxAmount] = React.useState<number>(0);\n    const [selectedToken, setSelectedToken] = React.useState<SolAsset>();\n    const handleInputChange = React.useCallback(\n      (newAmount: string) => {\n        let formattedAmount: string = \"\",\n          amount: number = 0;\n        const newAmountWithoutCommas = newAmount.replace(/,/g, \"\");\n        let decimalPart = newAmountWithoutCommas.split(\".\")[1];\n\n        if (\n          (newAmount.endsWith(\",\") || newAmount.endsWith(\".\")) &&\n          !newAmount.substring(0, newAmount.length - 1).includes(\".\")\n        ) {\n          amount = isNaN(Number.parseFloat(newAmountWithoutCommas))\n            ? 0\n            : Number.parseFloat(newAmountWithoutCommas);\n          formattedAmount = formatNumberGrouped(amount).concat(\".\");\n        } else if (selectedToken) {\n          const mintDecimals = selectedToken?.decimals;\n          const isDecimalPartInvalid = isNaN(Number.parseFloat(decimalPart));\n          if (!isDecimalPartInvalid)\n            decimalPart = decimalPart.substring(0, mintDecimals);\n          decimalPart = isDecimalPartInvalid\n            ? \"\"\n            : \".\".concat(\n                Number.parseFloat(\"1\".concat(decimalPart))\n                  .toString()\n                  .substring(1),\n              );\n          amount = isNaN(Number.parseFloat(newAmountWithoutCommas))\n            ? 0\n            : Number.parseFloat(newAmountWithoutCommas);\n          formattedAmount = formatNumberGrouped(amount)\n            .split(\".\")[0]\n            .concat(decimalPart);\n        }\n\n        if (amount > maxAmount) {\n          setAmount(formatNumberGrouped(maxAmount));\n          if (onAmountChange) onAmountChange(maxAmount);\n        } else {\n          setAmount(formattedAmount);\n          if (onAmountChange) onAmountChange(amount);\n        }\n      },\n      [maxAmount, setAmount, selectedToken, onAmountChange],\n    );\n    React.useEffect(() => {\n      setAmount(initAmount.toString());\n    }, [initAmount]);\n    return (\n      <div className=\"relative w-full space-y-4\">\n        <div className=\"flex items-center justify-end gap-2\">\n          {showWalletBalance && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                setAmount(formatNumberGrouped(maxAmount));\n              }}\n            >\n              <WalletIcon size={16} />\n              {formatNumberShort(maxAmount)}\n            </Button>\n          )}\n          {showQuickAmountButtons && (\n            <>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => {\n                  setAmount(formatNumberGrouped(maxAmount / 2));\n                  onAmountChange && onAmountChange(maxAmount / 2);\n                }}\n              >\n                Half\n              </Button>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => {\n                  setAmount(formatNumberGrouped(maxAmount));\n                  onAmountChange && onAmountChange(maxAmount);\n                }}\n              >\n                Max\n              </Button>\n            </>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <TokenCombobox\n            assets={assets}\n            onSelect={(token) => {\n              setSelectedToken(token);\n              setMaxAmount(token?.userTokenAccount?.amount ?? 0);\n              setAmount(\"\");\n              if (\n                amountInputRef &&\n                \"current\" in amountInputRef &&\n                amountInputRef.current instanceof HTMLInputElement\n              ) {\n                amountInputRef.current.focus();\n              }\n              if (onTokenSelect) onTokenSelect(token);\n            }}\n            onSearch={onSearch}\n          />\n          <Input\n            ref={amountInputRef}\n            type=\"text\"\n            placeholder=\"0\"\n            className=\"h-12 text-right\"\n            inputMode=\"numeric\"\n            value={amount ?? undefined}\n            disabled={disabled || !selectedToken}\n            onChange={(e) => handleInputChange(e.target.value)}\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\nTokenInput.displayName = \"TokenInput\";\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-input.tsx"
    },
    {
      "path": "components/ui/murphy/token-combobox.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { ChevronsUpDownIcon } from \"lucide-react\";\nimport { Button } from \"../button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { SolAsset } from \"@/types/assets\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenIcon } from \"./token-icon\";\nimport { fetchWalletAssets } from \"@/lib/assets/birdeye/wallets\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\ntype TokenComboboxProps = {\n  assets?: SolAsset[];\n  trigger?: React.ReactNode;\n  address?: PublicKey | null;\n  showBalances?: boolean;\n  onSelect?: (token: SolAsset) => void;\n  onSearch?: ({\n    query,\n    owner,\n  }: {\n    query: string;\n    owner?: PublicKey;\n  }) => Promise<SolAsset[]>;\n};\n\nexport function TokenCombobox({\n  assets: initialAssets,\n  trigger,\n  address,\n  showBalances = true,\n  onSelect,\n  onSearch,\n}: TokenComboboxProps) {\n  const { publicKey } = useWallet();\n  const [open, setOpen] = React.useState(false);\n  const [assets, setAssets] = React.useState<SolAsset[]>(initialAssets || []);\n  const [value, setValue] = React.useState(\"\");\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const selectedAsset = React.useMemo(\n    () => assets.find((asset) => asset.mint.toBase58().toLowerCase() === value),\n    [assets, value],\n  );\n\n  const fetchData = async () => {\n    if (!publicKey) return;\n    try {\n      setLoading(true);\n\n      const fetchedAssets = await fetchWalletAssets({\n        owner: publicKey,\n      });\n      setAssets(fetchedAssets);\n    } finally {\n      setLoading(false);\n    }\n  }\n  // In case assets array not provided -> fetch from user wallet\n  useEffect(() => {\n    if (assets.length == 0) {\n      fetchData()\n    }\n  }, []);\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        {trigger || (\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            size=\"lg\"\n            aria-expanded={open}\n            className=\"h-12 w-[300px] justify-start gap-2.5 px-3 font-medium\"\n          >\n            {selectedAsset ? (\n              <>\n                <TokenIcon asset={selectedAsset} />\n                {selectedAsset.symbol}\n              </>\n            ) : (\n              \"Select token...\"\n            )}\n            <ChevronsUpDownIcon size={16} className=\"ml-auto opacity-50\" />\n          </Button>\n        )}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search tokens...\"\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            {assets.length === 0 && (\n              <CommandEmpty>\n                {searchValue ? \"No tokens found.\" : \"Loading...\"}\n              </CommandEmpty>\n            )}\n            <CommandGroup>\n              {assets.map((asset) => (\n                <CommandItem\n                  key={asset.mint.toBase58()}\n                  value={asset.mint.toBase58().toLowerCase()}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue);\n                    setOpen(false);\n                    if (onSelect) onSelect(asset);\n                  }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <TokenIcon asset={asset} />\n                  {asset.symbol}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-combobox.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport millify from \"millify\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\n};\n\nexport const formatUsd = (num: number): string => {\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\n};\n\nexport const formatNumber = (\n  num: number,\n  options: Intl.NumberFormatOptions = {},\n): string => {\n  if (num === null || num === undefined) return \"0\";\n\n  const absNum = Math.abs(num);\n  let decimals = 2;\n\n  if (absNum < 1) {\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\n  }\n\n  return new Intl.NumberFormat(\"en-US\", {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: decimals,\n    ...options,\n  }).format(num);\n};\n\nexport const formatNumberShort = (num: number): string => {\n  if (num < 1000) return formatNumber(num);\n  return millify(num, {\n    precision: 2,\n  });\n};\n\nexport const formatNumberGrouped = (\n  value: number,\n  expThreshold: number = 0.0001,\n  expPrecision: number = 1,\n) => {\n  if (value === 0) return \"0\";\n\n  if (Math.abs(value) < expThreshold) {\n    return value.toExponential(expPrecision);\n  }\n\n  if (Number.isInteger(value)) {\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\n  }\n\n  const valueParts = value.toString().split(\".\");\n  const decimalPart = valueParts[1] ?? \"\";\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\n\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: true,\n    minimumFractionDigits: minimumFractionDigits,\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\n  }).format(value);\n};\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch (error) {\n        return false;\n\n  }\n};\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "types/swap/index.ts",
      "content": "import { PublicKey, Connection } from \"@solana/web3.js\";\n\nexport interface Config {\n    JUPITER_REFERRAL_ACCOUNT?: string;\n    JUPITER_FEE_BPS?: number;\n}\n  \ndeclare const _default: {\n    Config: Config;\n};\n\n\nexport default _default; ",
      "type": "registry:file",
      "target": "types/swap/index.ts"
    }
  ]
}