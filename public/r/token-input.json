{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-input",
  "type": "registry:block",
  "title": "token-input",
  "description": "The TokenInput component is an input field with support for user balances, half / max buttons, and number formatting.",
  "dependencies": [
    "@solana/web3.js"
  ],
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "components/ui/murphy/token-input.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { WalletIcon } from \"lucide-react\";\r\n\r\nimport { formatNumberGrouped, formatNumberShort } from \"@/lib/utils\";\r\nimport { SolAsset } from \"@/types/assets\";\r\n\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nimport { TokenCombobox } from \"@/components/ui/murphy/token-combobox\";\r\n\r\ntype TokenInputProps = {\r\n  assets: SolAsset[];\r\n  disabled: boolean;\r\n  showWalletBalance?: boolean;\r\n  showQuickAmountButtons?: boolean;\r\n  amount?: number;\r\n  onTokenSelect?: (token: SolAsset) => void;\r\n  onAmountChange?: (amount: number) => void;\r\n  onSearch?: ({\r\n    query,\r\n    owner,\r\n  }: {\r\n    query: string;\r\n    owner?: PublicKey;\r\n  }) => Promise<SolAsset[]>;\r\n};\r\n\r\nexport const TokenInput = React.forwardRef<HTMLInputElement, TokenInputProps>(\r\n  (\r\n    {\r\n      assets,\r\n      disabled = false,\r\n      showWalletBalance = true,\r\n      showQuickAmountButtons = true,\r\n      amount: initAmount = 0,\r\n      onTokenSelect,\r\n      onAmountChange,\r\n      onSearch,\r\n    },\r\n    amountInputRef: React.ForwardedRef<HTMLInputElement>,\r\n  ) => {\r\n    const [amount, setAmount] = React.useState<string>(initAmount.toString());\r\n    const [maxAmount, setMaxAmount] = React.useState<number>(0);\r\n    const [selectedToken, setSelectedToken] = React.useState<SolAsset>();\r\n    const handleInputChange = React.useCallback(\r\n      (newAmount: string) => {\r\n        let formattedAmount: string = \"\",\r\n          amount: number = 0;\r\n        const newAmountWithoutCommas = newAmount.replace(/,/g, \"\");\r\n        let decimalPart = newAmountWithoutCommas.split(\".\")[1];\r\n\r\n        if (\r\n          (newAmount.endsWith(\",\") || newAmount.endsWith(\".\")) &&\r\n          !newAmount.substring(0, newAmount.length - 1).includes(\".\")\r\n        ) {\r\n          amount = isNaN(Number.parseFloat(newAmountWithoutCommas))\r\n            ? 0\r\n            : Number.parseFloat(newAmountWithoutCommas);\r\n          formattedAmount = formatNumberGrouped(amount).concat(\".\");\r\n        } else if (selectedToken) {\r\n          const mintDecimals = selectedToken?.decimals;\r\n          const isDecimalPartInvalid = isNaN(Number.parseFloat(decimalPart));\r\n          if (!isDecimalPartInvalid)\r\n            decimalPart = decimalPart.substring(0, mintDecimals);\r\n          decimalPart = isDecimalPartInvalid\r\n            ? \"\"\r\n            : \".\".concat(\r\n                Number.parseFloat(\"1\".concat(decimalPart))\r\n                  .toString()\r\n                  .substring(1),\r\n              );\r\n          amount = isNaN(Number.parseFloat(newAmountWithoutCommas))\r\n            ? 0\r\n            : Number.parseFloat(newAmountWithoutCommas);\r\n          formattedAmount = formatNumberGrouped(amount)\r\n            .split(\".\")[0]\r\n            .concat(decimalPart);\r\n        }\r\n\r\n        if (amount > maxAmount) {\r\n          setAmount(formatNumberGrouped(maxAmount));\r\n          if (onAmountChange) onAmountChange(maxAmount);\r\n        } else {\r\n          setAmount(formattedAmount);\r\n          if (onAmountChange) onAmountChange(amount);\r\n        }\r\n      },\r\n      [maxAmount, setAmount, selectedToken, onAmountChange],\r\n    );\r\n    React.useEffect(() => {\r\n      setAmount(initAmount.toString());\r\n    }, [initAmount]);\r\n    return (\r\n      <div className=\"relative w-full space-y-4\">\r\n        <div className=\"flex items-center justify-end gap-2\">\r\n          {showWalletBalance && (\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setAmount(formatNumberGrouped(maxAmount));\r\n              }}\r\n            >\r\n              <WalletIcon size={16} />\r\n              {formatNumberShort(maxAmount)}\r\n            </Button>\r\n          )}\r\n          {showQuickAmountButtons && (\r\n            <>\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setAmount(formatNumberGrouped(maxAmount / 2));\r\n                  onAmountChange && onAmountChange(maxAmount / 2);\r\n                }}\r\n              >\r\n                Half\r\n              </Button>\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setAmount(formatNumberGrouped(maxAmount));\r\n                  onAmountChange && onAmountChange(maxAmount);\r\n                }}\r\n              >\r\n                Max\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <TokenCombobox\r\n            assets={assets}\r\n            onSelect={(token) => {\r\n              setSelectedToken(token);\r\n              setMaxAmount(token?.userTokenAccount?.amount ?? 0);\r\n              setAmount(\"\");\r\n              if (\r\n                amountInputRef &&\r\n                \"current\" in amountInputRef &&\r\n                amountInputRef.current instanceof HTMLInputElement\r\n              ) {\r\n                amountInputRef.current.focus();\r\n              }\r\n              if (onTokenSelect) onTokenSelect(token);\r\n            }}\r\n            onSearch={onSearch}\r\n          />\r\n          <Input\r\n            ref={amountInputRef}\r\n            type=\"text\"\r\n            placeholder=\"0\"\r\n            className=\"h-12 text-right\"\r\n            inputMode=\"numeric\"\r\n            value={amount ?? undefined}\r\n            disabled={disabled || !selectedToken}\r\n            onChange={(e) => handleInputChange(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nTokenInput.displayName = \"TokenInput\";\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-input.tsx"
    },
    {
      "path": "components/ui/murphy/token-combobox.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ChevronsUpDownIcon } from \"lucide-react\";\r\nimport { Button } from \"../button\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@/components/ui/command\";\r\nimport { SolAsset } from \"@/types/assets\";\r\nimport { PublicKey } from \"@solana/web3.js\";\r\nimport { TokenIcon } from \"./token-icon\";\r\nimport { fetchWalletAssets } from \"@/lib/assets/birdeye/wallets\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\n\r\ntype TokenComboboxProps = {\r\n  assets?: SolAsset[];\r\n  trigger?: React.ReactNode;\r\n  address?: PublicKey | null;\r\n  showBalances?: boolean;\r\n  onSelect?: (token: SolAsset) => void;\r\n  onSearch?: ({\r\n    query,\r\n    owner,\r\n  }: {\r\n    query: string;\r\n    owner?: PublicKey;\r\n  }) => Promise<SolAsset[]>;\r\n};\r\n\r\nexport function TokenCombobox({\r\n  assets: initialAssets,\r\n  trigger,\r\n  address,\r\n  showBalances = true,\r\n  onSelect,\r\n  onSearch,\r\n}: TokenComboboxProps) {\r\n  const { publicKey } = useWallet();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [assets, setAssets] = React.useState<SolAsset[]>(initialAssets || []);\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [searchValue, setSearchValue] = React.useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n  const selectedAsset = React.useMemo(\r\n    () => assets.find((asset) => asset.mint.toBase58().toLowerCase() === value),\r\n    [assets, value],\r\n  );\r\n\r\n  const fetchData = async () => {\r\n    if (!publicKey) return;\r\n    try {\r\n      setLoading(true);\r\n\r\n      const fetchedAssets = await fetchWalletAssets({\r\n        owner: publicKey,\r\n      });\r\n      setAssets(fetchedAssets);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n  // In case assets array not provided -> fetch from user wallet\r\n  useEffect(() => {\r\n    if (assets.length == 0) {\r\n      fetchData()\r\n    }\r\n  }, []);\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        {trigger || (\r\n          <Button\r\n            variant=\"outline\"\r\n            role=\"combobox\"\r\n            size=\"lg\"\r\n            aria-expanded={open}\r\n            className=\"h-12 w-[300px] justify-start gap-2.5 px-3 font-medium\"\r\n          >\r\n            {selectedAsset ? (\r\n              <>\r\n                <TokenIcon asset={selectedAsset} />\r\n                {selectedAsset.symbol}\r\n              </>\r\n            ) : (\r\n              \"Select token...\"\r\n            )}\r\n            <ChevronsUpDownIcon size={16} className=\"ml-auto opacity-50\" />\r\n          </Button>\r\n        )}\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[300px] p-0\">\r\n        <Command shouldFilter={false}>\r\n          <CommandInput\r\n            placeholder=\"Search tokens...\"\r\n            onValueChange={setSearchValue}\r\n          />\r\n          <CommandList>\r\n            {assets.length === 0 && (\r\n              <CommandEmpty>\r\n                {searchValue ? \"No tokens found.\" : \"Loading...\"}\r\n              </CommandEmpty>\r\n            )}\r\n            <CommandGroup>\r\n              {assets.map((asset) => (\r\n                <CommandItem\r\n                  key={asset.mint.toBase58()}\r\n                  value={asset.mint.toBase58().toLowerCase()}\r\n                  onSelect={(currentValue) => {\r\n                    setValue(currentValue === value ? \"\" : currentValue);\r\n                    setOpen(false);\r\n                    if (onSelect) onSelect(asset);\r\n                  }}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <TokenIcon asset={asset} />\r\n                  {asset.symbol}\r\n                </CommandItem>\r\n              ))}\r\n            </CommandGroup>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/murphy/token-combobox.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { PublicKey } from \"@solana/web3.js\";\r\nimport { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport millify from \"millify\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport const shortAddress = (address: PublicKey | string) => {\r\n  const key = typeof address === \"string\" ? address : address.toBase58();\r\n  return `${key.slice(0, 4)}...${key.slice(-4)}`;\r\n};\r\n\r\nexport const formatUsd = (num: number): string => {\r\n  return formatNumber(num, { style: \"currency\", currency: \"USD\" });\r\n};\r\n\r\nexport const formatNumber = (\r\n  num: number,\r\n  options: Intl.NumberFormatOptions = {},\r\n): string => {\r\n  if (num === null || num === undefined) return \"0\";\r\n\r\n  const absNum = Math.abs(num);\r\n  let decimals = 2;\r\n\r\n  if (absNum < 1) {\r\n    decimals = Math.max(2, Math.min(20, Math.ceil(-Math.log10(absNum)) + 2));\r\n  }\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: decimals,\r\n    ...options,\r\n  }).format(num);\r\n};\r\n\r\nexport const formatNumberShort = (num: number): string => {\r\n  if (num < 1000) return formatNumber(num);\r\n  return millify(num, {\r\n    precision: 2,\r\n  });\r\n};\r\n\r\nexport const formatNumberGrouped = (\r\n  value: number,\r\n  expThreshold: number = 0.0001,\r\n  expPrecision: number = 1,\r\n) => {\r\n  if (value === 0) return \"0\";\r\n\r\n  if (Math.abs(value) < expThreshold) {\r\n    return value.toExponential(expPrecision);\r\n  }\r\n\r\n  if (Number.isInteger(value)) {\r\n    return new Intl.NumberFormat(\"en-US\", { useGrouping: true }).format(value);\r\n  }\r\n\r\n  const valueParts = value.toString().split(\".\");\r\n  const decimalPart = valueParts[1] ?? \"\";\r\n  const leadingZeros = decimalPart.match(/^0*/)?.[0].length ?? 0;\r\n  const minimumFractionDigits = leadingZeros > 0 ? leadingZeros + 1 : 2;\r\n\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    useGrouping: true,\r\n    minimumFractionDigits: minimumFractionDigits,\r\n    maximumFractionDigits: Math.max(2, minimumFractionDigits),\r\n  }).format(value);\r\n};\r\n\r\nexport const validatePublicKey = (address: PublicKey | string) => {\r\n  try {\r\n    if (typeof address == \"string\") {\r\n      new PublicKey(address);\r\n    } else {\r\n      address.toBase58();\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n        return false;\r\n\r\n  }\r\n};\r\n",
      "type": "registry:file",
      "target": "lib/utils.ts"
    },
    {
      "path": "types/swap/index.ts",
      "content": "import { PublicKey, Connection } from \"@solana/web3.js\";\r\n\r\nexport interface Config {\r\n    JUPITER_REFERRAL_ACCOUNT?: string;\r\n    JUPITER_FEE_BPS?: number;\r\n}\r\n  \r\ndeclare const _default: {\r\n    Config: Config;\r\n};\r\n\r\n\r\nexport default _default; ",
      "type": "registry:file",
      "target": "types/swap/index.ts"
    }
  ]
}